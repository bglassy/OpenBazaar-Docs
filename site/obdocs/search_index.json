{
    "docs": [
        {
            "location": "/", 
            "text": "1. What is \nOpenBazaar\n?\n\n\nOpenBazaar\n is a new way to buy and sell goods and services online. By running a program on your computer, you can connect directly to other users in the \nOpenBazaar\n network and trade with them. \nThe network isn't controlled by a company or organisation. \nOpenBazaar\n is a decentralised peer-to-peer network, which means there are no listing fees and the marketplace is censorship-resistant.\n\n\nGoods and services are bought and sold on \nOpenBazaar\n using Bitcoin, a digital cryptocurrency that is decentralised and censorship-resistant. Transaction fees on the Bitcoin network are typically less than a dollar.\n\n\nBitcoin and \nOpenBazaar\n together are the future on online commerce.\n\n\nRight now, online commerce means using centralized services. eBay, Amazon, Alibaba and others have restrictive policies and charge fees for listing and selling goods. They only accept forms of payment that cost both buyers and sellers money, such as credit cards or PayPal/Alipay. They require personal information, which can lead to it being stolen or even sold to others for advertising or worse. Buyers and sellers aren\u2019t always free to exchange goods and services with each other, as companies and governments censor entire categories of trade.\n\n\nOpenBazaar\n is a different approach to online commerce. It puts the power back in the users\u2019 hands. Instead of buyers and sellers going through a centralized service, \nOpenBazaar\n connects them directly. Because there is no one in the middle of the transactions, there are no fees, no one can censor transactions, and you only reveal the personal information that you choose.\n\n\nThis project is \nopen source\n, which means the code is publicly available for people to review or audit, as well as contribute code to make it better.\n\n\n1.1 What does it do?\n\n\n\n\nCreates an online store for users to sells goods for Bitcoin\n\n\nConnects these stores directly to each other on a global network\n\n\nUsers can browse individual stores and search for products across the whole network\n\n\nA buyer directly connects and purchases the good from the merchant using Bitcoin\n\n\nBitcoin payments can be made via escrow to protect merchants and buyers during trade \n\n\n\n\n1.2 What does it enable?\n\n\n\n\nAn online marketplace that is:\n\n\nScalable to millions of stores\n\n\nFree of intermediaries and their fees\n\n\nCannot be censored\n\n\nFrictionless trade\n\n\n\n\n\n\n\n\n1.3 What problems does it solve?\n\n\n\n\nHosting an online store\n\n\nEasy to deploy\n\n\nInstall and run\n\n\n\n\n\n\nFees\n\n\nEliminates fees related to listing on a platform\n\n\nSignificantly reduces payment fees via Bitcoin (i.e. fractions of a cent)\n\n\n\n\n\n\n\n\n1.4 What is the philosophy of the project?\n\n\n\n\nOur \nvision\n is to \nmake trade free\n. \n\n\nOur \nmission\n is to \nshift global trade onto a decentralised platform\n, \nOpenBazaar\n.\n\n\nOur values are:\n\n\nPrivacy\n\n\nUsers should full control their data\n\n\nUsers should have freedom to reveal as much personal identifiable information as they want, when they want\n\n\n\n\n\n\nSecurity\n\n\nCrytographic tamper-proof agreements to: 1) minimise potential disputes, and 2) fast-track dispute resolution\n\n\nEncryption, encryption, encryption\n\n\n\n\n\n\nMarkets\n\n\nFree and open markets\n\n\nCreating open and competitive markets for services in \nOpenBazaar\n that cannot be perfectly solved with technology\n\n\n\n\n\n\nBitcoin\n\n\nBitcoin is the \nonly\n transactional currency of \nOpenBazaar", 
            "title": "Home"
        }, 
        {
            "location": "/#1-what-is-openbazaar", 
            "text": "OpenBazaar  is a new way to buy and sell goods and services online. By running a program on your computer, you can connect directly to other users in the  OpenBazaar  network and trade with them. \nThe network isn't controlled by a company or organisation.  OpenBazaar  is a decentralised peer-to-peer network, which means there are no listing fees and the marketplace is censorship-resistant.  Goods and services are bought and sold on  OpenBazaar  using Bitcoin, a digital cryptocurrency that is decentralised and censorship-resistant. Transaction fees on the Bitcoin network are typically less than a dollar.  Bitcoin and  OpenBazaar  together are the future on online commerce.  Right now, online commerce means using centralized services. eBay, Amazon, Alibaba and others have restrictive policies and charge fees for listing and selling goods. They only accept forms of payment that cost both buyers and sellers money, such as credit cards or PayPal/Alipay. They require personal information, which can lead to it being stolen or even sold to others for advertising or worse. Buyers and sellers aren\u2019t always free to exchange goods and services with each other, as companies and governments censor entire categories of trade.  OpenBazaar  is a different approach to online commerce. It puts the power back in the users\u2019 hands. Instead of buyers and sellers going through a centralized service,  OpenBazaar  connects them directly. Because there is no one in the middle of the transactions, there are no fees, no one can censor transactions, and you only reveal the personal information that you choose.  This project is  open source , which means the code is publicly available for people to review or audit, as well as contribute code to make it better.", 
            "title": "1. What is OpenBazaar?"
        }, 
        {
            "location": "/#11-what-does-it-do", 
            "text": "Creates an online store for users to sells goods for Bitcoin  Connects these stores directly to each other on a global network  Users can browse individual stores and search for products across the whole network  A buyer directly connects and purchases the good from the merchant using Bitcoin  Bitcoin payments can be made via escrow to protect merchants and buyers during trade", 
            "title": "1.1 What does it do?"
        }, 
        {
            "location": "/#12-what-does-it-enable", 
            "text": "An online marketplace that is:  Scalable to millions of stores  Free of intermediaries and their fees  Cannot be censored  Frictionless trade", 
            "title": "1.2 What does it enable?"
        }, 
        {
            "location": "/#13-what-problems-does-it-solve", 
            "text": "Hosting an online store  Easy to deploy  Install and run    Fees  Eliminates fees related to listing on a platform  Significantly reduces payment fees via Bitcoin (i.e. fractions of a cent)", 
            "title": "1.3 What problems does it solve?"
        }, 
        {
            "location": "/#14-what-is-the-philosophy-of-the-project", 
            "text": "Our  vision  is to  make trade free .   Our  mission  is to  shift global trade onto a decentralised platform ,  OpenBazaar .  Our values are:  Privacy  Users should full control their data  Users should have freedom to reveal as much personal identifiable information as they want, when they want    Security  Crytographic tamper-proof agreements to: 1) minimise potential disputes, and 2) fast-track dispute resolution  Encryption, encryption, encryption    Markets  Free and open markets  Creating open and competitive markets for services in  OpenBazaar  that cannot be perfectly solved with technology    Bitcoin  Bitcoin is the  only  transactional currency of  OpenBazaar", 
            "title": "1.4 What is the philosophy of the project?"
        }, 
        {
            "location": "/02.-Getting-Started/", 
            "text": "2. Getting started\n\n\n2.1 Installation\n\n\nFuture versions of \nOpenBazaar\n will be developed using \nElectron\n, which will enable the platform to be easily installed on all platforms. Below are instructions for the current version (beta 5.0) of \nOpenBazaar\n.\n\n\nMac OSX and Ubuntu (using configure.sh script)\n\n\n\n\nInstall git:\n\n\n$ sudo apt-get install git\n\n\nOptionally install package \nhaveged\n for faster entropy creation; refer to \nthis\n section if keypair generation takes too long on Ubuntu/Linux.\n\n\n\n\n\n\nGet the latest release:\n\n\n$ git clone https://github.com/OpenBazaar/OpenBazaar.git\n\n\n\n\n\n\nNavigate to the OpenBazaar folder\n\n\n$ cd OpenBazaar\n\n\n\n\n\n\nRun the configuration script:\n\n\n$ ./configure.sh\n\n\nYour \nOpenBazaar\n installation should now be ready to go.\n\n\n\n\n\n\nRun the application\n\n\n$ ./openbazaar start\n\n\nIf the above script executes successfully, you will see a new browser window open automatically. If this doesn't happen after some time, open your web browser and point it to \nhttp://localhost:\nPORT\n. You will find the correct \nPORT\n number in the console output. Of course, in order to run a browser in the GUI you need to have them both installed (e.g. \nsudo apt-get install xorg gnome-core gnome-system-tools gnome-app-install firefox\n). Otherwise you can try to use SSH tunneling or some other approach.\n\n\n\n\n\n\nTest the application.\n\n\nTo shutdown \nOpenBazaar\n\n\n$ ./openbazaar stop\n\n\n\n\n\n\n\n\n===\n\n\nUbuntu (possibly other versions of Linux, let us know)\n\n\nPlease use the instructions above! The following instructions are for advanced users, and are not up to date.\n\n\nNative Installation\n\n\nFirst at all, we need to create a virtualenv in order to avoid conflictive dependencies from another old/future projects in the same machine:\n\n\n\n\n$ apt-get update\n\n\n$ sudo apt-get install python-pip\n\n\n$ sudo pip install virtualenv\n\n\n$ sudo pip install virtualenvwrapper\n\n\n$ mkdir ~/.virtualenvs\n\n\nAdd the following lines in your \n~/.zshrc\n, \n~/.bashrc\n or \n~/.profile\n: \n\n\nexport WORKON_HOME=~/.virtualenvs\n\n\nsource /usr/local/bin/virtualenvwrapper.sh\n\n\n\n\n\n\nsource ~/.zshrc\n (the file where you put the lines in the previous step).\n\n\nmkvirtualenv open_bazaar\n or whatever name that you like.\n\n\nWith the virtualenv already active, then install \nOpenBazaar\n:\n\n\n\n\n\n\n$ apt-get update\n\n\n$ apt-get install git python-dev python-pip g++ libjpeg-dev zlib1g-dev sqlite3 libssl-dev\n\n\n$ cd /opt\n\n\n$ git clone https://github.com/OpenBazaar/OpenBazaar.git\n # may need a \"sudo\" before \"git\"\n\n\n$ cd /opt/OpenBazaar\n\n\n$ sudo pip install -r requirements.txt\n\n\n$ ./openbazaar start\n - Runs \nOpenBazaar\n\n\nOpen your browser and give: \n127.0.0.1:8888\n\n\nWelcome to \nOpenBazaar\n!\n\n\n\n\n===\n\n\nVagrant\n\n\nThese instructions download a VirtualBox image (Ubuntu Trusty) and use Vagrant (\n=1.3.0) to configure an \nOpenBazaar\n node inside the virtual environment. When the node is running, you can navigate to http://localhost:8888 on your local machine to access the client. This setup should take less than 10GB and about an hour. These instructions should include all necessary code for starting \nOpenBazaar\n.\n\n\n\n\nThis example is built on an Ubuntu Trusty host. Doesn't work from inside a virtual machine.\n\n\nsudo apt-get update\n\n\nsudo apt-get install virtualbox git vagrant\n\n\n\n\n\n\nClone openbazaar:\n\n\ngit clone https://github.com/OpenBazaar/OpenBazaar.git\n\n\ncd OpenBazaar\n\n\n\n\n\n\nSet up vagrant: (this will take a while!)\n\n\nvagrant up\n\n\n\n\n\n\nLog into the vagrant instance:\n\n\nvagrant ssh\n\n\n\n\n\n\nStart the \nOpenBazaar\n node:\n\n\nBefore running for the first time: \ncd /vagrant \n ./configure.sh\n\n\nProduction:\ncd /vagrant \n ./openbazaar start \n tail -f logs/production.log\n\n\nDevelopment:\ncd /vagrant \n ./openbazaar -d start \n tail -f logs/development.log\n\n\n\n\n\n\nNow return to your host and open your web browser to:\n\n\nhttp://127.0.0.1:8888\n\n\n\n\n\n\n\n\n===\n\n\nAdditional Notes\n\n\nOSX Users\n\n\nYou can either install natively or use vagrant. If you decide to use vagrant, just follow the instructions above for Linux. If you want to install natively, follow the instructions below.\n\n\nInstall Dependencies\n\n\n\n\nInstall \nhttp://brew.sh\n\n\nbrew update\n\n\nbrew upgrade\n\n\nbrew doctor\n\n\nbrew install wget gpg\n\n\nsudo port install sqlite3\n (you don't have macports? you can always do \nbrew install sqlite3\n and manually symlink it, e.g. \nln -s /usr/local/Cellar/sqlite/3.8.5_1/bin/sqlite3 /usr/local/bin/sqlite3\n)\n\n\n\n\nInstall PIP and Virtualenv\n\n\n\n\nsudo easy_install pip\n\n\nsudo pip install -U pip\n \n\n\nsudo pip install virtualenv\n\n\nsudo pip install virtualenvwrapper\n\n\nmkdir ~/.virtualenvs\n\n\nThen in our ~/.zshrc, ~/.bashrc or ~/.profile, add the following lines:\n\n\nexport WORKON_HOME=~/.virtualenvs\n\n\nsource /usr/local/bin/virtualenvwrapper.sh\n        \n\n\n\n\n\n\nsource ~/.zshrc\n\n\nor where you put the lines above\n\n\n\n\n\n\n\n\nInstall \nOpenBazaar\n\n\n\n\ngit clone https://github.com/OpenBazaar/OpenBazaar.git\n\n\ncd OpenBazaar\n\n\nmkvirtualenv open_bazaar\n or whatever name that you like\n\n\npip install -r requirements.txt\n (see note below if you encounter a CLANG error)\n\n\nbash openbazaar start\n - Runs OpenBazaar\n\n\nOpen your browser and go to \n127.0.0.1:8888\n\n\nStart OpenBazaaring!\n\n\n\n\nIf you encounter a CLANG error while installing pyzmq or Pillow you can try installing requirements with the following to ignore unused arguments:\n\n\nCPPFLAGS=-Qunused-arguments CFLAGS=-Qunused-arguments pip install -r requirements.txt\n\n\n\n\nTests\n\n\n\n\nInstall the required dependencies:\n\n\n$ pip install -r test_requirements.txt\n\n\n$ npm install -g jshint\n\n\n\n\n\n\nRun the tests:\n\n\n$ make\n\n\nThere are a bunch of behaviour tests on \nOpenBazaar/features\n folder but these are not functional right now.\n\n\n\n\n\n\n\n\nIssues\n\n\n\n\nIf you are getting a complaint about not having PIL and you're on Ubuntu try:\n\n\nsudo apt-get install python-imaging\n\n\n\n\n\n\nIf you are having problems sort of like \nthis\n when you try to run \nvagrant up\n, try these steps:\n\n\nOpen the Virtualbox GUI client, select the \nOpenBazaar\n machine and select 'Start'.\n\n\nIf this doesn't start the machine, but instead returns an error like \nthis one\n, then you'll want to try following the advice in \nthis thread\n. \n\n\nIf you're still having the issue, you'll want to try entering your system BIOS to enable Virtualized Hardware.\n\n\n\n\n\n\n\n\npyelliptic\n\n\n\n\nOn MacOS, you may have issues with your OpenSSL version. You may get an error similar to the following:\n\n\nAttributeError: dlsym(0x7f9d8b4fbf90, PKCS5_PBKDF2_HMAC): symbol not found\n\n\n\n\n\n\nThis error is related to a \npyelliptic bug\n. \n\n\nYou can overcome this issue by running the \nopenbazaar start\n command as follows:\n\n\nDYLD_LIBRARY_PATH=/usr/local/Cellar/openssl/1.0.1f/lib bash openbazaar start\n\n\n\n\n\n\nIf this doesn't work a simpler way to fix the \"symbol not found\" issue is to ensure that the Homebrew OpenSSL is correctly linked by running:\n\n\nbrew link openssl --force\n\n\nthen you will be able to use the \nopenbazaar start\n normally.\n\n\n\n\n\n\n\n\nGenerating a PGP Keypair\n\n\nUbuntu/Linux: Won't get past 'Generating PGP keypair' or takes way too long to generate key.\n\n\n\n\nWhen you first run \nOpenBazaar\n it needs to create a 2048 bit key, this could take a few seconds, but on some Ubuntu systems it takes so long (\n30 min) that you'd give up and try again.\n\n\nWhen you do a ps aux, you see this process stuck doing nothing:\n\n\ngpg --status-fd 2 --no-tty --gen-key --batch\n\n\n\n\n\n\nThe reason is that to generate the PGP key, the system needs entropy. When you read the \nentropy_avail\n file (\ncat /proc/sys/kernel/random/entropy_avail\n) you will probably see a very low number. A solution to having more entropy is to install the \nrng-tools\n.\n\n\nsudo apt-get install rng-tools\n\n\n\n\n\n\nIf you have issues starting the rng-tools service like this.\n\n\nsudo service rng-tools start\n\n\nThis returns: \n\n\nStarting Hardware RNG entropy gatherer daemon: (failed).\n\n\n\n\n\n\nThen you need to set an environment variable:\n\n\nsudo bash\n\n\necho \"HRNGDEVICE=/dev/urandom\" \n /etc/default/rng-tools\n\n\nexit\n\n\n\n\n\n\n\n\n\n\nNow try once again to start it.\n\n\nsudo service rng-tools start\n\n\n\n\n\n\n\n\n2.2 User Guide\n\n\n2.2.1 Overview of the Client\n\n\nThere are six tabs in the \nOpenBazaar\n client:\n\n\n\n\nHome\n\n\nMessages\n\n\nOrders\n\n\nNotarizations\n\n\nContracts\n\n\nSettings\n\n\n\n\nSettings\n\n\n\n\nIn settings you have six sections to manage your client.\n\n\n\n\nStore Info\n\n\nKeys\n\n\nCommunication\n\n\nNotary\n\n\nAdvanced\n\n\nBackup\n\n\n\n\nStore Info\n\n\nIn the Store Info section, you have the following options.\n\n\nStore Details\n\n\n\n\nNickname\n. This is the name of your store that everyone will see on the network. You must enter a store name or it will display as \u201cDefault.\u201d\n\n\nAvatar URL\n. This allows you to choose a personalized image which is displayed along with your store. These images are externally hosted, so choose a link to an image of your choice. Avatars are optional.\n\n\nNamecoin id\n. If you have a Namecoin id, you can choose to have it displayed in your profile.\n\n\nBitcoin Receiving Address. It is important you put in a Bitcoin address that you control. This is where funds will be released if the third party notary needs to manually release funds from multisig.\n\n\nStore Description\n. Give a short description of your store here. Only supports text at the moment.\n\n\n\n\nReputation Pledge\n\n\nThis section displays the amount of your reputation pledge, and your proof-of-burn address. Reputation pledges are a way to intentionally burn a small amount of Bitcoin tied to your store ID in order to show others you are committed to maintaining your store reputation. In other words, someone who has made a sizeable reputation pledge is unlikely to be a scammer, since it wouldn\u2019t be profitable for a scammer to consistently burn coins for new identities. You can learn more about reputation pledges \nhere\n.\n\n\nNote that during betas we don\u2019t recommend large reputation pledges, since there\u2019s a good chance your store may need to be updated and you will lose the identity associated with the pledge.\n\n\nTo make a pledge, simply send a small amount of Bitcoin to the address listed as \u201cProof-of-burn address.\u201d\n\n\nShipping Information\n\n\nThis is where a buyer will input their shipping information. If you intend on using \nOpenBazaar\n as a buyer as well as a merchant, you should fill this section out as well.\n\n\nKeys\n\n\nBitcoin Public Key (Uncompressed)\n\n\nThis is the uncompressed Bitcoin public key created for signing.\n\n\nBIP32 Seed\n\n\nThe \nOpenBazaar\n client uses BIP32 to create HD keys for signing. This increases privacy by ensuring that the same key isn\u2019t used for signing multisignature transactions. This seed should be kept private.\n\n\nPGP Public Key\n\n\nIn order to encrypt communications over the network, each store creates a PGP key pair. This is the public key which other users\u2019 clients use to encrypt messages sent to you.\n\n\nCommunication\n\n\n\n\nEmail\n. If you\u2019d like to communicate with other users over email, set it here. Your email will be visible to anyone viewing your store.  \n\n\nYour Website\n. If you\u2019d like to have your website URL displayed in your store, set it here.  \n\n\nBitmessage\n. If you\u2019d like to communicate with other users over Bitmessage, set it here.  \n\n\n\n\nNotary\n\n\nNotaries are a vital part of \nOpenBazaar\n. They are the third key holder in the 2-of-3 multisig, meaning that if there is a dispute between buyer and merchant, only the notary has the power to work with one of the parties to release the funds. As such, it\u2019s important that buyer and merchant trust the notary not to collude with the other party. In beta we recommend smaller transactions until reputable notaries emerge in the market. Since in the 5.0 beta buyers choose notaries, the burden is on the merchant to either accept the buyer\u2019s choice of notary or contact the buyer and notary to tell them you don\u2019t want to engage in trade with the other parties.\n\n\nTrusted Notaries\n\n\nThis is a list of notaries that you\u2019ve trusted. You can also add a notary manually by entering their GUID (the string of numbers and letters under their store name).\n\n\nNotary Details\n\n\nThis section is for notaries to set up their services.\n\n\n\n\nMake me a notary\n. By clicking Yes in this section, you allow others to choose you as a notary. They will see this option when they click on your store front and see the \u201cServices\u201d tab, or by manually entering your GUID into the Trusted Notaries section. The default option is set to No; users aren\u2019t notaries unless they choose to be.\n\n\nFees\n. As a notary, you can charge a percentage fee for providing dispute resolution. If the buyer and seller finish their transaction without needing the notary, there is no payment. If the notary is needed to refund buyer or release payment to merchant, then they will receive the percentage from the multisig that they set in this section. A notaries\u2019 fee is visible in the \u201cServices\u201d tab in their store front.\n\n\nDescription of your services\n. Notaries can explain their terms and conditions in this area, as well as their credentials and any other information they wish to share.\n\n\n\n\nAdvanced\n\n\nObelisk Server\n\n\nThis allows the user to manually select an Obelisk (libbitcoin) server.\n\n\nDeveloper Tools\n\n\nThese allow the user to clear their cache, clear the peers stored in the database, and to stop their own node.\n\n\nLog\n\n\nThe log can be used for troubleshooting and bug reports.\n\n\nBackups\n\n\nYou can create new backups with the \u201cCreate New Backup\u201d button, and they will be displayed below the Backup Name section.\n\n\nHome\n\n\nThe Home tab displays Other Markets, allows the user to search for products, and serves as a simple place to communicate via the Chat Stream.\n\n\nOther Markets\n\n\n\n\nYou can view the other stores connected to you by clicking on them. Stores with a checkmark should be visible. Stores with an X were visible once, but are now offline. The client should automatically pull in new stores as they become available, but occasionally refreshing the page may help.\n\n\nWhen viewing a store, there are three sections.\n\n\n\n\nStore\n. This displays the merchant\u2019s products. Clicking on the image displays more details.\n\n\nDetails\n. This displays information about the merchant, including their OB public key, PGP key, amount of their reputation pledge, and any communication information they\u2019ve displayed.\n\n\nServices\n. This is only visible if the user offers notary services. If they do, it will display their percentage fee, a description of their services, and allow users to select them as notaries by clicking \u201cMake Trusted Notary.\u201d\n\n\n\n\nUsers can also contact the store owner by selecting the \u201cMessage me\u201d or \u201cEmail me\u201d buttons in blue underneath their name.\n\n\nSearch\n\n\nWhen creating an item, merchants tag them with keywords. Buyers can then use the search bar to find items tagged with those keywords. Clicking on an item brings the users to the merchant\u2019s store front.\n\n\nChat Stream\n\n\nThis is a simple chat that any node can use to communicate with all other nodes it is connected to. Note that this feature isn\u2019t likely to scale well and will be removed in future releases.\n\n\nPurchasing a Product\n\n\n\n\nIf you click on an item in a store, a new window opens to give more product details, including the product title, price in Bitcoin, product description, cost of shipping and handling, quantity available, the item\u2019s condition, and up to three photos. There is also a \u201cRaw Contract\u201d button which allows users to view the contract details directly.\n\n\n\n\nClicking on \u201cOrder Details\u201d on the bottom left will bring you to a screen that allows you to purchase the product. You can determine the quantity desired, and attach a comment for the merchant to see along with your order. If you haven\u2019t entered your shipping address in Settings already, a red warning will ask you to do so before proceeding. The price for the product and shipping and handling are displayed again.\n\n\nAt the bottom the user needs to input a Bitcoin Address that they control. This will be used in case of a refund.\n\n\nOnce this section is completed, the user selects \u201cChoose a Notary.\u201d A list of online notaries that the user has trusted is displayed. If the user hasn\u2019t trusted any notaries, or if none of those notaries are online, they must choose another notary in order to continue.\n\n\nThe user then completes the order by selecting \u201cSubmit Order.\u201d This sends the order to the notary and merchant.\n\n\nContracts\n\n\n\nThe contracts tab is where a merchant manages their products. The merchant can create new contracts, edit existing contracts, or delete them.\n\n\nAdd Contract\n\n\n\n\n\n\nClick on the Contract tab.\n\n\nClick Add Contract.\n\n\nInput product details, including a title and description of your product, as well as the price (in Bitcoin), the cost of shipping, how many items are available, and what condition the items are in.\n\n\nAdd up to three externally hosted images in the photos section.\n\n\nMake sure you click on the Keyword section next to Photos and input keywords that describe your product. This is how users find your items through the search function. If you don\u2019t add keywords, your items cannot be found via search.\n\n\nClick Save. This publishes your product to the network.\n\n\n\n\nOrders\n\n\nThe orders tab keeps track of the activity of buyers and merchants through the \u201cMy Sales\u201d and \u201cMy Purchases\u201d sections.\n\n\nMy Sales\n\n\nIf a merchant has a sale, the details of that sale are listed here. An order number is created, along with the time and date of the purchase and the buyer\u2019s details.\n\n\n\n\nA merchant should take the following steps once they\u2019ve received an order.\n\n\n\n\nClick on the order to display details.\n\n\nIf someone purchases your product, the item will display \u201cBuyer Paid.\u201d \nPlease double check\n the linked multisig account in the order description to verify; at this point a buyer can mark an item as paid without actually paying.\n\n\n\n\n\n\n\n\nDetermine if you trust the notary involved\n. Since at this point the buyer chooses the notary, if the two parties are colluding, they can cheat you out of the Bitcoin. You can view the notary involved by clicking \u201cContract Details\u201d in the item description. Early in the beta, we recommend test transactions or small transactions until trusted notaries become established.\n\n\nIf you verify the buyer has sent the funds to multisig, and that you trust the notary, then ship the item to the buyer at the address they provided. This address is displayed in the \u201cShipping Information\u201d tab when viewing the order.\n\n\nOnce you\u2019ve shipped the item, input your Bitcoin address into the Shipping \n Payment section of the order view, where it asks \u201cWhere would you like payment sent to?\u201d\n\n\nOnce the buyer receives the item, they should release payment. If they don\u2019t in a reasonable time, contact the buyer and request they release funds. If they are non-responsive, contact the notary involved in the transaction and request they release funds.\n\n\n\n\nMy Purchases\n\n\nWhen a buyer views \u201cMy Purchases\u201d it will display the status of their orders. If they\u2019ve just submitted an order, the status will indicate \u201cNeed to Pay\u201d and the buyer needs to open the order to complete payment.\n\n\n\n\nA QR code is displayed which, if scanned, will input the multisignature address and amount. If the user selects \u201cPay in your Wallet,\u201d it will open a wallet on their device and pull in the same information. Once the payment is completed, the buyer must manually select \u201cMark as Paid.\u201d This lets the merchant know to ship the item.\n\n\nIf the buyer marked the order as paid, but the merchant didn\u2019t receive this message due to being offline, the buyer can re-open the order and click on \u201cResend Payment Notice\u201d when the merchant is online.\n\n\nOnce the item has arrived or service is provided, the buyer can then release the funds from multisig by opening the order and selecting \u201cRelease Payment to Merchant.\u201d Again, if the merchant didn\u2019t receive this message due to being offline, the buyer can try releasing again when they are online.\n\n\nNotarizations\n\n\nNotaries manage their orders through the notarizations tab. This is the same as the My Purchases and My Sales tabs, except it tracks the contracts which the notary has been selected for.\n\n\nNote that at this point, offering notary services means you automatically accept all transactions which choose you as a notary. In the future, notaries will be able to screen transactions, or only accept them manually.\n\n\nIf a buyer or seller contacts a notary asking for funds to be released, it\u2019s the notary\u2019s responsibility to do their best to determine which party should receive funds. Once they\u2019ve made their decision and contacted the parties, they can release funds by opening up the order in the notarizations tab.\n\n\n\n\nIn the 5.0 beta client, the notary has two options. \u201cRefund the Buyer\u201d releases all the funds from multisig to the buyer, minus the percentage fee which is paid to the notary for dispute resolution. \u201cRelease money to the Merchant\u201d does the same for the merchant. The notary must click \u201cSend Resolution\u201d for the transaction to process.\n\n\nMessages\n\n\n\n\nThe messages tab is a place to communicate with other \nOpenBazaar\n users who are online. You can send simple messages (text only at this point) by clicking the \u201cSend a Message\u201d button and selecting another user from the dropdown list. Messages you\u2019ve received can be read by clicking on them, and replied to by hitting the blue \u201cReply\u201d button on the right.\n\n\nTerminal commands\n\n\nFor Linux and OSX users, you need to use the terminal to configure, start, and stop \nOpenBazaar\n. Here are some common commands to use.\n\n\n\n\n./configure.sh\n This installs \nOpenBazaar\n once the code has been downloaded. After major releases, you may need to run configure again.\n\n\n./openbazaar help\n This gives you a list of arguments you can use when launching OpenBazaar.\n\n\n./openbazaar start\n This launches \nOpenBazaar\n.\n\n\n./openbazaar stop\n This shuts down \nOpenBazaar\n.\n\n\ngit pull\n If git is correctly installed, this will update the software if there are new changes.\n\n\n\n\nTips and Tricks\n\n\n\n\nTry refreshing the page occasionally if things aren\u2019t working correctly.\n\n\nWait a minute or two when first connecting to find peers. It shouldn\u2019t take any longer than this.\n\n\nIf you have connectivity problems, try using \nkillall python -9\n in terminal, then launch \nOpenBazaar\n again.\n\n\nIf you receive a \u201cAddress already in use\u201d error when starting \nOpenBazaar\n, this means the program was already running. Stop it first, then launch again.\n\n\nIf your client crashes or has an obvious error, try looking for /logs/production.log and searching for \u2018Traceback\u2019 to see what the error was. If you don\u2019t see anyone else posting about that error on the \nGithub issues\n and our \nHelp Desk\n then feel free to post along with the error and some context.\n\n\n\n\n2.2.2 Merchant's Guide to \nOpenBazaar\n\n\nStep One: Set up Store\n\n\n\n\n\n\nClick the Settings tab.\n\n\nEnter a new Nickname for your store. This is how other users will see your store.\n\n\nIf you want a unique image for your store, put in a URL for an image in the Avatar URL field.\n\n\nInput a Bitcoin address that you control into the Bitcoin Receiving Address field. This is where you receive funds from multisig if the notary needs to take action manually.\n\n\nDescribe your store in the Store Description field.\n\n\nClick Save.\n\n\n\n\nStep Two: Set Communication Information\n\n\n\n\n\n\nClick on the Communication section.\n\n\nEnter an email address if you want to communicate with other parties via email.\n\n\nIf you have a website that you want displayed, enter the URL in the Your Web Site field.\nEnter a Bitmessage address if you want to communicate with other parties via Bitmessage.\n\n\nClick Save.\n\n\n\n\nStep Three: Create Backup\n\n\n\n\n\n\nClick on the Backup section.\n\n\nClick Create New Backup.\n\n\n\n\nStep Four: List your Goods or Services\n\n\n\n\n\n\nClick on the Contract tab.\n\n\nClick Add Contract.\n\n\nInput product details, including a title and description of your product, as well as the price (in Bitcoin), the cost of shipping, how many items are available, and what condition the items are in.\n\n\nAdd up to three externally hosted images in the photos section.\n\n\nMake sure you click on the Keyword section next to Photos and input keywords that describe your product. This is how users find your items through the search function. If you don\u2019t add keywords, your items cannot be found via search.\n\n\nClick Save. This publishes your product to the network.\n\n\n\n\nStep Five: Manage Trade\n\n\n\n\n\n\nManage your sales by viewing the My Sales section under the Orders tab. If you have an order, click on it to display details.\n\n\nIf someone purchases your product, the item will display \u201cBuyer Paid.\u201d Please double check the linked multisig account in the order description to verify; at this point a buyer can mark an item as paid without actually paying.\n\n\n\n\n\n\n\n\nDetermine if you trust the notary involved. Since at this point the buyer chooses the notary, if the two parties are colluding, they can cheat you out of the Bitcoin. You can view the notary involved by clicking \u201cContract Details\u201d in the item description. Early in the beta, we recommend test transactions or small transactions until trusted notaries become established.\n\n\nIf you verify the buyer has sent the funds to multisig, and that you trust the notary, then ship the item to the buyer at the address they provided. This address is displayed in the \u201cShipping Information\u201d tab when viewing the order.\n\n\nOnce you\u2019ve shipped the item, input your Bitcoin address into the Shipping \n Payment section of the order view, where it asks \u201cWhere would you like payment sent to?\u201d\n\n\nOnce the buyer receives the item, they should release payment. If they don\u2019t in a reasonable time, contact the buyer and request they release funds. If they are non-responsive, contact the notary involved in the transaction and request they release funds.\n\n\n\n\n2.2.2 Buyer's Guide to \nOpenBazaar\n\n\nStep One: Personalize your Client\n\n\n\n\n\n\nClick the Settings tab.\n\n\nEnter a new Nickname for yourself. This is how other users will see you.\n\n\nIf you want a unique image for your avatar, put in a URL for an image in the Avatar URL field.\n\n\nInput a Bitcoin address that you control into the Bitcoin Receiving Address field. This is where you receive funds from multisig if the notary needs to take action manually.\n\n\nClick Save.\n\n\n\n\nStep Two: Set Communication Information\n\n\n\n\n\n\nClick on the Communication section.\nEnter an email address if you want to communicate with other parties via email.\n\n\nIf you have a website that you want displayed, enter the URL in the Your Web Site field.\n\n\nEnter a Bitmessage address if you want to communicate with other parties via Bitmessage.\n\n\nClick Save.\n\n\n\n\nStep Three: Create Backup\n\n\n\n\n\n\nClick on the Backup section.\n\n\nClick Create New Backup.\n\n\n\n\nStep Four: Find \n Trust a Notary\n\n\n\n\nNotaries are a vital part of \nOpenBazaar\n. They are the third key holder in the 2 of 3 multisig, meaning that if there is a dispute between buyer and merchant, only the notary has the power to work with one of the parties to release the funds. As such, it\u2019s important that buyer and merchant trust the notary not to collude with the other party. In beta we recommend smaller transactions until reputable notaries emerge in the market.\n\n\nWhen viewing stores on the Home tab, look for users that offer services. This is only visible if the user offers notary services. If they do, it will display their percentage fee, a description of their services, and allow users to select them as notaries by clicking \u201cMake Trusted Notary.\u201d You can also manually add a notary in Settings if you know their GUID (string of letters and numbers under the store name).\n\n\nStep Five: Find \n Purchase Goods or Services\n\n\n\n\nIf you click on an item in a store in the Home tab, a new window opens to give more product details, including the product title, price in Bitcoin, product description, cost of shipping and handling, quantity available, the item\u2019s condition, and up to three photos. There is also a \u201cRaw Contract\u201d button which allows users to view the contract details directly.\n\n\n\n\nClicking on \u201cOrder Details\u201d on the bottom left will bring you to a screen that allows you to purchase the product. You can determine the quantity desired, and attach a comment for the merchant to see along with your order. If you haven\u2019t entered your shipping address in Settings already, a red warning will ask you to do so before proceeding. The price for the product and shipping and handling are displayed again.\n\n\nAt the bottom the user needs to input a Bitcoin Address that they control. This will be used in case of a refund.\n\n\nOnce this section is completed, the user selects \u201cChoose a Notary.\u201d A list of online notaries that the user has trusted is displayed. If the user hasn\u2019t trusted any notaries, or if none of those notaries are online, they must choose another notary in order to continue.\n\n\nThe user then completes the order by selecting \u201cSubmit Order.\u201d This sends the order to the notary and merchant.\n\n\nStep Six: Finish the Purchase\n\n\nWhen a buyer views \u201cMy Purchases\u201d it will display the status of their orders. If they\u2019ve just submitted an order, the status will indicate \u201cNeed to Pay\u201d and the buyer needs to open the order to complete payment.\n\n\n\n\nA QR code is displayed which, if scanned, will input the multisignature address and amount. If the user selects \u201cPay in your Wallet,\u201d it will open a wallet on their device and pull in the same information. Once the payment is completed, the buyer must manually select \u201cMark as Paid.\u201d This lets the merchant know to ship the item.\n\n\nIf the buyer marked the order as paid, but the merchant didn\u2019t receive this message due to being offline, the buyer can re-open the order and click on \u201cResend Payment Notice\u201d when the merchant is online.\n\n\nOnce the item has arrived or service is provided, the buyer can then release the funds from multisig by opening the order and selecting \u201cRelease Payment to Merchant.\u201d Again, if the merchant didn\u2019t receive this message due to being offline, the buyer can try releasing again when they are online.\n\n\n2.2.3 Notary's Guide to \nOpenBazaar\n\n\nStep One: Personalize your Client\n\n\n1\nSettings Tab\n\n\n\n\nClick the Settings tab.\n\n\nEnter a new Nickname for yourself. This is how other users will see you.\n\n\nIf you want a unique image for your avatar, put in a URL for an image in the Avatar URL field.\n\n\nInput a Bitcoin address that you control into the Bitcoin Receiving Address field. This is where you receive funds from multisig if your services are needed.\n\n\nClick Save.\n\n\n\n\nStep Two: Set Communication Information\n\n\n\n\n\n\nClick on the Communication section.\n\n\nEnter an email address if you want to communicate with other parties via email.\n\n\nIf you have a website that you want displayed, enter the URL in the Your Web Site field.\n\n\nEnter a Bitmessage address if you want to communicate with other parties via Bitmessage.\n\n\nClick Save.\n\n\n\n\nStep Three: Create Backup\n\n\n\n\n\n\nClick on the Backup section.\n\n\nClick Create New Backup.\n\n\n\n\nStep Four: Set up your Notary Details\n\n\nIn Settings, select the Notary section.\n\n\n\n\nMake me a notary\n. By clicking Yes in this section, you allow others to choose you as a notary. They will see this option when they click on your store front and see the \u201cServices\u201d tab, or by manually entering your GUID into the Trusted Notaries section. The default option is set to No; users aren\u2019t notaries unless they choose to be.\n\n\nFees\n. As a notary, you can charge a percentage fee for providing dispute resolution. If the buyer and seller finish their transaction without needing the notary, there is no payment. If the notary is needed to refund buyer or release payment to merchant, then they will receive the percentage from the multisig that they set in this section. A notaries\u2019 fee is visible in the \u201cServices\u201d tab in their store front.\n\n\nDescription of your services\n. Notaries can explain their terms and conditions in this area, as well as their credentials and any other information they wish to share.\n\n\n\n\nStep Five: Manage your Orders\n\n\nNote that at this point, offering notary services means you automatically accept all transactions which choose you as a notary. In the future, notaries will be able to screen transactions, or only accept them manually.\n\n\nIf a buyer or seller contacts a notary asking for funds to be released, it\u2019s the notary\u2019s responsibility to do their best to determine which party should receive funds. Once they\u2019ve made their decision and contacted the parties, they can release funds by opening up the order in the notarizations tab.\n\n\n\n\nIn the 0.5 client, the notary has two options. \u201cRefund the Buyer\u201d releases all the funds from multisig to the buyer, minus the percentage fee which is paid to the notary for dispute resolution. \u201cRelease money to the Merchant\u201d does the same for the merchant. The notary must click \u201cSend Resolution\u201d for the transaction to process.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/02.-Getting-Started/#2-getting-started", 
            "text": "", 
            "title": "2. Getting started"
        }, 
        {
            "location": "/02.-Getting-Started/#21-installation", 
            "text": "Future versions of  OpenBazaar  will be developed using  Electron , which will enable the platform to be easily installed on all platforms. Below are instructions for the current version (beta 5.0) of  OpenBazaar .  Mac OSX and Ubuntu (using configure.sh script)   Install git:  $ sudo apt-get install git  Optionally install package  haveged  for faster entropy creation; refer to  this  section if keypair generation takes too long on Ubuntu/Linux.    Get the latest release:  $ git clone https://github.com/OpenBazaar/OpenBazaar.git    Navigate to the OpenBazaar folder  $ cd OpenBazaar    Run the configuration script:  $ ./configure.sh  Your  OpenBazaar  installation should now be ready to go.    Run the application  $ ./openbazaar start  If the above script executes successfully, you will see a new browser window open automatically. If this doesn't happen after some time, open your web browser and point it to  http://localhost: PORT . You will find the correct  PORT  number in the console output. Of course, in order to run a browser in the GUI you need to have them both installed (e.g.  sudo apt-get install xorg gnome-core gnome-system-tools gnome-app-install firefox ). Otherwise you can try to use SSH tunneling or some other approach.    Test the application.  To shutdown  OpenBazaar  $ ./openbazaar stop     ===  Ubuntu (possibly other versions of Linux, let us know)  Please use the instructions above! The following instructions are for advanced users, and are not up to date.  Native Installation  First at all, we need to create a virtualenv in order to avoid conflictive dependencies from another old/future projects in the same machine:   $ apt-get update  $ sudo apt-get install python-pip  $ sudo pip install virtualenv  $ sudo pip install virtualenvwrapper  $ mkdir ~/.virtualenvs  Add the following lines in your  ~/.zshrc ,  ~/.bashrc  or  ~/.profile :   export WORKON_HOME=~/.virtualenvs  source /usr/local/bin/virtualenvwrapper.sh    source ~/.zshrc  (the file where you put the lines in the previous step).  mkvirtualenv open_bazaar  or whatever name that you like.  With the virtualenv already active, then install  OpenBazaar :    $ apt-get update  $ apt-get install git python-dev python-pip g++ libjpeg-dev zlib1g-dev sqlite3 libssl-dev  $ cd /opt  $ git clone https://github.com/OpenBazaar/OpenBazaar.git  # may need a \"sudo\" before \"git\"  $ cd /opt/OpenBazaar  $ sudo pip install -r requirements.txt  $ ./openbazaar start  - Runs  OpenBazaar  Open your browser and give:  127.0.0.1:8888  Welcome to  OpenBazaar !   ===  Vagrant  These instructions download a VirtualBox image (Ubuntu Trusty) and use Vagrant ( =1.3.0) to configure an  OpenBazaar  node inside the virtual environment. When the node is running, you can navigate to http://localhost:8888 on your local machine to access the client. This setup should take less than 10GB and about an hour. These instructions should include all necessary code for starting  OpenBazaar .   This example is built on an Ubuntu Trusty host. Doesn't work from inside a virtual machine.  sudo apt-get update  sudo apt-get install virtualbox git vagrant    Clone openbazaar:  git clone https://github.com/OpenBazaar/OpenBazaar.git  cd OpenBazaar    Set up vagrant: (this will take a while!)  vagrant up    Log into the vagrant instance:  vagrant ssh    Start the  OpenBazaar  node:  Before running for the first time:  cd /vagrant   ./configure.sh  Production: cd /vagrant   ./openbazaar start   tail -f logs/production.log  Development: cd /vagrant   ./openbazaar -d start   tail -f logs/development.log    Now return to your host and open your web browser to:  http://127.0.0.1:8888     ===  Additional Notes  OSX Users  You can either install natively or use vagrant. If you decide to use vagrant, just follow the instructions above for Linux. If you want to install natively, follow the instructions below.  Install Dependencies   Install  http://brew.sh  brew update  brew upgrade  brew doctor  brew install wget gpg  sudo port install sqlite3  (you don't have macports? you can always do  brew install sqlite3  and manually symlink it, e.g.  ln -s /usr/local/Cellar/sqlite/3.8.5_1/bin/sqlite3 /usr/local/bin/sqlite3 )   Install PIP and Virtualenv   sudo easy_install pip  sudo pip install -U pip    sudo pip install virtualenv  sudo pip install virtualenvwrapper  mkdir ~/.virtualenvs  Then in our ~/.zshrc, ~/.bashrc or ~/.profile, add the following lines:  export WORKON_HOME=~/.virtualenvs  source /usr/local/bin/virtualenvwrapper.sh             source ~/.zshrc  or where you put the lines above     Install  OpenBazaar   git clone https://github.com/OpenBazaar/OpenBazaar.git  cd OpenBazaar  mkvirtualenv open_bazaar  or whatever name that you like  pip install -r requirements.txt  (see note below if you encounter a CLANG error)  bash openbazaar start  - Runs OpenBazaar  Open your browser and go to  127.0.0.1:8888  Start OpenBazaaring!   If you encounter a CLANG error while installing pyzmq or Pillow you can try installing requirements with the following to ignore unused arguments:  CPPFLAGS=-Qunused-arguments CFLAGS=-Qunused-arguments pip install -r requirements.txt  Tests   Install the required dependencies:  $ pip install -r test_requirements.txt  $ npm install -g jshint    Run the tests:  $ make  There are a bunch of behaviour tests on  OpenBazaar/features  folder but these are not functional right now.     Issues   If you are getting a complaint about not having PIL and you're on Ubuntu try:  sudo apt-get install python-imaging    If you are having problems sort of like  this  when you try to run  vagrant up , try these steps:  Open the Virtualbox GUI client, select the  OpenBazaar  machine and select 'Start'.  If this doesn't start the machine, but instead returns an error like  this one , then you'll want to try following the advice in  this thread .   If you're still having the issue, you'll want to try entering your system BIOS to enable Virtualized Hardware.     pyelliptic   On MacOS, you may have issues with your OpenSSL version. You may get an error similar to the following:  AttributeError: dlsym(0x7f9d8b4fbf90, PKCS5_PBKDF2_HMAC): symbol not found    This error is related to a  pyelliptic bug .   You can overcome this issue by running the  openbazaar start  command as follows:  DYLD_LIBRARY_PATH=/usr/local/Cellar/openssl/1.0.1f/lib bash openbazaar start    If this doesn't work a simpler way to fix the \"symbol not found\" issue is to ensure that the Homebrew OpenSSL is correctly linked by running:  brew link openssl --force  then you will be able to use the  openbazaar start  normally.     Generating a PGP Keypair  Ubuntu/Linux: Won't get past 'Generating PGP keypair' or takes way too long to generate key.   When you first run  OpenBazaar  it needs to create a 2048 bit key, this could take a few seconds, but on some Ubuntu systems it takes so long ( 30 min) that you'd give up and try again.  When you do a ps aux, you see this process stuck doing nothing:  gpg --status-fd 2 --no-tty --gen-key --batch    The reason is that to generate the PGP key, the system needs entropy. When you read the  entropy_avail  file ( cat /proc/sys/kernel/random/entropy_avail ) you will probably see a very low number. A solution to having more entropy is to install the  rng-tools .  sudo apt-get install rng-tools    If you have issues starting the rng-tools service like this.  sudo service rng-tools start  This returns:   Starting Hardware RNG entropy gatherer daemon: (failed).    Then you need to set an environment variable:  sudo bash  echo \"HRNGDEVICE=/dev/urandom\"   /etc/default/rng-tools  exit      Now try once again to start it.  sudo service rng-tools start", 
            "title": "2.1 Installation"
        }, 
        {
            "location": "/02.-Getting-Started/#22-user-guide", 
            "text": "2.2.1 Overview of the Client  There are six tabs in the  OpenBazaar  client:   Home  Messages  Orders  Notarizations  Contracts  Settings   Settings   In settings you have six sections to manage your client.   Store Info  Keys  Communication  Notary  Advanced  Backup   Store Info  In the Store Info section, you have the following options.  Store Details   Nickname . This is the name of your store that everyone will see on the network. You must enter a store name or it will display as \u201cDefault.\u201d  Avatar URL . This allows you to choose a personalized image which is displayed along with your store. These images are externally hosted, so choose a link to an image of your choice. Avatars are optional.  Namecoin id . If you have a Namecoin id, you can choose to have it displayed in your profile.  Bitcoin Receiving Address. It is important you put in a Bitcoin address that you control. This is where funds will be released if the third party notary needs to manually release funds from multisig.  Store Description . Give a short description of your store here. Only supports text at the moment.   Reputation Pledge  This section displays the amount of your reputation pledge, and your proof-of-burn address. Reputation pledges are a way to intentionally burn a small amount of Bitcoin tied to your store ID in order to show others you are committed to maintaining your store reputation. In other words, someone who has made a sizeable reputation pledge is unlikely to be a scammer, since it wouldn\u2019t be profitable for a scammer to consistently burn coins for new identities. You can learn more about reputation pledges  here .  Note that during betas we don\u2019t recommend large reputation pledges, since there\u2019s a good chance your store may need to be updated and you will lose the identity associated with the pledge.  To make a pledge, simply send a small amount of Bitcoin to the address listed as \u201cProof-of-burn address.\u201d  Shipping Information  This is where a buyer will input their shipping information. If you intend on using  OpenBazaar  as a buyer as well as a merchant, you should fill this section out as well.  Keys  Bitcoin Public Key (Uncompressed)  This is the uncompressed Bitcoin public key created for signing.  BIP32 Seed  The  OpenBazaar  client uses BIP32 to create HD keys for signing. This increases privacy by ensuring that the same key isn\u2019t used for signing multisignature transactions. This seed should be kept private.  PGP Public Key  In order to encrypt communications over the network, each store creates a PGP key pair. This is the public key which other users\u2019 clients use to encrypt messages sent to you.  Communication   Email . If you\u2019d like to communicate with other users over email, set it here. Your email will be visible to anyone viewing your store.    Your Website . If you\u2019d like to have your website URL displayed in your store, set it here.    Bitmessage . If you\u2019d like to communicate with other users over Bitmessage, set it here.     Notary  Notaries are a vital part of  OpenBazaar . They are the third key holder in the 2-of-3 multisig, meaning that if there is a dispute between buyer and merchant, only the notary has the power to work with one of the parties to release the funds. As such, it\u2019s important that buyer and merchant trust the notary not to collude with the other party. In beta we recommend smaller transactions until reputable notaries emerge in the market. Since in the 5.0 beta buyers choose notaries, the burden is on the merchant to either accept the buyer\u2019s choice of notary or contact the buyer and notary to tell them you don\u2019t want to engage in trade with the other parties.  Trusted Notaries  This is a list of notaries that you\u2019ve trusted. You can also add a notary manually by entering their GUID (the string of numbers and letters under their store name).  Notary Details  This section is for notaries to set up their services.   Make me a notary . By clicking Yes in this section, you allow others to choose you as a notary. They will see this option when they click on your store front and see the \u201cServices\u201d tab, or by manually entering your GUID into the Trusted Notaries section. The default option is set to No; users aren\u2019t notaries unless they choose to be.  Fees . As a notary, you can charge a percentage fee for providing dispute resolution. If the buyer and seller finish their transaction without needing the notary, there is no payment. If the notary is needed to refund buyer or release payment to merchant, then they will receive the percentage from the multisig that they set in this section. A notaries\u2019 fee is visible in the \u201cServices\u201d tab in their store front.  Description of your services . Notaries can explain their terms and conditions in this area, as well as their credentials and any other information they wish to share.   Advanced  Obelisk Server  This allows the user to manually select an Obelisk (libbitcoin) server.  Developer Tools  These allow the user to clear their cache, clear the peers stored in the database, and to stop their own node.  Log  The log can be used for troubleshooting and bug reports.  Backups  You can create new backups with the \u201cCreate New Backup\u201d button, and they will be displayed below the Backup Name section.  Home  The Home tab displays Other Markets, allows the user to search for products, and serves as a simple place to communicate via the Chat Stream.  Other Markets   You can view the other stores connected to you by clicking on them. Stores with a checkmark should be visible. Stores with an X were visible once, but are now offline. The client should automatically pull in new stores as they become available, but occasionally refreshing the page may help.  When viewing a store, there are three sections.   Store . This displays the merchant\u2019s products. Clicking on the image displays more details.  Details . This displays information about the merchant, including their OB public key, PGP key, amount of their reputation pledge, and any communication information they\u2019ve displayed.  Services . This is only visible if the user offers notary services. If they do, it will display their percentage fee, a description of their services, and allow users to select them as notaries by clicking \u201cMake Trusted Notary.\u201d   Users can also contact the store owner by selecting the \u201cMessage me\u201d or \u201cEmail me\u201d buttons in blue underneath their name.  Search  When creating an item, merchants tag them with keywords. Buyers can then use the search bar to find items tagged with those keywords. Clicking on an item brings the users to the merchant\u2019s store front.  Chat Stream  This is a simple chat that any node can use to communicate with all other nodes it is connected to. Note that this feature isn\u2019t likely to scale well and will be removed in future releases.  Purchasing a Product   If you click on an item in a store, a new window opens to give more product details, including the product title, price in Bitcoin, product description, cost of shipping and handling, quantity available, the item\u2019s condition, and up to three photos. There is also a \u201cRaw Contract\u201d button which allows users to view the contract details directly.   Clicking on \u201cOrder Details\u201d on the bottom left will bring you to a screen that allows you to purchase the product. You can determine the quantity desired, and attach a comment for the merchant to see along with your order. If you haven\u2019t entered your shipping address in Settings already, a red warning will ask you to do so before proceeding. The price for the product and shipping and handling are displayed again.  At the bottom the user needs to input a Bitcoin Address that they control. This will be used in case of a refund.  Once this section is completed, the user selects \u201cChoose a Notary.\u201d A list of online notaries that the user has trusted is displayed. If the user hasn\u2019t trusted any notaries, or if none of those notaries are online, they must choose another notary in order to continue.  The user then completes the order by selecting \u201cSubmit Order.\u201d This sends the order to the notary and merchant.  Contracts  \nThe contracts tab is where a merchant manages their products. The merchant can create new contracts, edit existing contracts, or delete them.  Add Contract    Click on the Contract tab.  Click Add Contract.  Input product details, including a title and description of your product, as well as the price (in Bitcoin), the cost of shipping, how many items are available, and what condition the items are in.  Add up to three externally hosted images in the photos section.  Make sure you click on the Keyword section next to Photos and input keywords that describe your product. This is how users find your items through the search function. If you don\u2019t add keywords, your items cannot be found via search.  Click Save. This publishes your product to the network.   Orders  The orders tab keeps track of the activity of buyers and merchants through the \u201cMy Sales\u201d and \u201cMy Purchases\u201d sections.  My Sales  If a merchant has a sale, the details of that sale are listed here. An order number is created, along with the time and date of the purchase and the buyer\u2019s details.   A merchant should take the following steps once they\u2019ve received an order.   Click on the order to display details.  If someone purchases your product, the item will display \u201cBuyer Paid.\u201d  Please double check  the linked multisig account in the order description to verify; at this point a buyer can mark an item as paid without actually paying.     Determine if you trust the notary involved . Since at this point the buyer chooses the notary, if the two parties are colluding, they can cheat you out of the Bitcoin. You can view the notary involved by clicking \u201cContract Details\u201d in the item description. Early in the beta, we recommend test transactions or small transactions until trusted notaries become established.  If you verify the buyer has sent the funds to multisig, and that you trust the notary, then ship the item to the buyer at the address they provided. This address is displayed in the \u201cShipping Information\u201d tab when viewing the order.  Once you\u2019ve shipped the item, input your Bitcoin address into the Shipping   Payment section of the order view, where it asks \u201cWhere would you like payment sent to?\u201d  Once the buyer receives the item, they should release payment. If they don\u2019t in a reasonable time, contact the buyer and request they release funds. If they are non-responsive, contact the notary involved in the transaction and request they release funds.   My Purchases  When a buyer views \u201cMy Purchases\u201d it will display the status of their orders. If they\u2019ve just submitted an order, the status will indicate \u201cNeed to Pay\u201d and the buyer needs to open the order to complete payment.   A QR code is displayed which, if scanned, will input the multisignature address and amount. If the user selects \u201cPay in your Wallet,\u201d it will open a wallet on their device and pull in the same information. Once the payment is completed, the buyer must manually select \u201cMark as Paid.\u201d This lets the merchant know to ship the item.  If the buyer marked the order as paid, but the merchant didn\u2019t receive this message due to being offline, the buyer can re-open the order and click on \u201cResend Payment Notice\u201d when the merchant is online.  Once the item has arrived or service is provided, the buyer can then release the funds from multisig by opening the order and selecting \u201cRelease Payment to Merchant.\u201d Again, if the merchant didn\u2019t receive this message due to being offline, the buyer can try releasing again when they are online.  Notarizations  Notaries manage their orders through the notarizations tab. This is the same as the My Purchases and My Sales tabs, except it tracks the contracts which the notary has been selected for.  Note that at this point, offering notary services means you automatically accept all transactions which choose you as a notary. In the future, notaries will be able to screen transactions, or only accept them manually.  If a buyer or seller contacts a notary asking for funds to be released, it\u2019s the notary\u2019s responsibility to do their best to determine which party should receive funds. Once they\u2019ve made their decision and contacted the parties, they can release funds by opening up the order in the notarizations tab.   In the 5.0 beta client, the notary has two options. \u201cRefund the Buyer\u201d releases all the funds from multisig to the buyer, minus the percentage fee which is paid to the notary for dispute resolution. \u201cRelease money to the Merchant\u201d does the same for the merchant. The notary must click \u201cSend Resolution\u201d for the transaction to process.  Messages   The messages tab is a place to communicate with other  OpenBazaar  users who are online. You can send simple messages (text only at this point) by clicking the \u201cSend a Message\u201d button and selecting another user from the dropdown list. Messages you\u2019ve received can be read by clicking on them, and replied to by hitting the blue \u201cReply\u201d button on the right.  Terminal commands  For Linux and OSX users, you need to use the terminal to configure, start, and stop  OpenBazaar . Here are some common commands to use.   ./configure.sh  This installs  OpenBazaar  once the code has been downloaded. After major releases, you may need to run configure again.  ./openbazaar help  This gives you a list of arguments you can use when launching OpenBazaar.  ./openbazaar start  This launches  OpenBazaar .  ./openbazaar stop  This shuts down  OpenBazaar .  git pull  If git is correctly installed, this will update the software if there are new changes.   Tips and Tricks   Try refreshing the page occasionally if things aren\u2019t working correctly.  Wait a minute or two when first connecting to find peers. It shouldn\u2019t take any longer than this.  If you have connectivity problems, try using  killall python -9  in terminal, then launch  OpenBazaar  again.  If you receive a \u201cAddress already in use\u201d error when starting  OpenBazaar , this means the program was already running. Stop it first, then launch again.  If your client crashes or has an obvious error, try looking for /logs/production.log and searching for \u2018Traceback\u2019 to see what the error was. If you don\u2019t see anyone else posting about that error on the  Github issues  and our  Help Desk  then feel free to post along with the error and some context.   2.2.2 Merchant's Guide to  OpenBazaar  Step One: Set up Store    Click the Settings tab.  Enter a new Nickname for your store. This is how other users will see your store.  If you want a unique image for your store, put in a URL for an image in the Avatar URL field.  Input a Bitcoin address that you control into the Bitcoin Receiving Address field. This is where you receive funds from multisig if the notary needs to take action manually.  Describe your store in the Store Description field.  Click Save.   Step Two: Set Communication Information    Click on the Communication section.  Enter an email address if you want to communicate with other parties via email.  If you have a website that you want displayed, enter the URL in the Your Web Site field.\nEnter a Bitmessage address if you want to communicate with other parties via Bitmessage.  Click Save.   Step Three: Create Backup    Click on the Backup section.  Click Create New Backup.   Step Four: List your Goods or Services    Click on the Contract tab.  Click Add Contract.  Input product details, including a title and description of your product, as well as the price (in Bitcoin), the cost of shipping, how many items are available, and what condition the items are in.  Add up to three externally hosted images in the photos section.  Make sure you click on the Keyword section next to Photos and input keywords that describe your product. This is how users find your items through the search function. If you don\u2019t add keywords, your items cannot be found via search.  Click Save. This publishes your product to the network.   Step Five: Manage Trade    Manage your sales by viewing the My Sales section under the Orders tab. If you have an order, click on it to display details.  If someone purchases your product, the item will display \u201cBuyer Paid.\u201d Please double check the linked multisig account in the order description to verify; at this point a buyer can mark an item as paid without actually paying.     Determine if you trust the notary involved. Since at this point the buyer chooses the notary, if the two parties are colluding, they can cheat you out of the Bitcoin. You can view the notary involved by clicking \u201cContract Details\u201d in the item description. Early in the beta, we recommend test transactions or small transactions until trusted notaries become established.  If you verify the buyer has sent the funds to multisig, and that you trust the notary, then ship the item to the buyer at the address they provided. This address is displayed in the \u201cShipping Information\u201d tab when viewing the order.  Once you\u2019ve shipped the item, input your Bitcoin address into the Shipping   Payment section of the order view, where it asks \u201cWhere would you like payment sent to?\u201d  Once the buyer receives the item, they should release payment. If they don\u2019t in a reasonable time, contact the buyer and request they release funds. If they are non-responsive, contact the notary involved in the transaction and request they release funds.   2.2.2 Buyer's Guide to  OpenBazaar  Step One: Personalize your Client    Click the Settings tab.  Enter a new Nickname for yourself. This is how other users will see you.  If you want a unique image for your avatar, put in a URL for an image in the Avatar URL field.  Input a Bitcoin address that you control into the Bitcoin Receiving Address field. This is where you receive funds from multisig if the notary needs to take action manually.  Click Save.   Step Two: Set Communication Information    Click on the Communication section.\nEnter an email address if you want to communicate with other parties via email.  If you have a website that you want displayed, enter the URL in the Your Web Site field.  Enter a Bitmessage address if you want to communicate with other parties via Bitmessage.  Click Save.   Step Three: Create Backup    Click on the Backup section.  Click Create New Backup.   Step Four: Find   Trust a Notary   Notaries are a vital part of  OpenBazaar . They are the third key holder in the 2 of 3 multisig, meaning that if there is a dispute between buyer and merchant, only the notary has the power to work with one of the parties to release the funds. As such, it\u2019s important that buyer and merchant trust the notary not to collude with the other party. In beta we recommend smaller transactions until reputable notaries emerge in the market.  When viewing stores on the Home tab, look for users that offer services. This is only visible if the user offers notary services. If they do, it will display their percentage fee, a description of their services, and allow users to select them as notaries by clicking \u201cMake Trusted Notary.\u201d You can also manually add a notary in Settings if you know their GUID (string of letters and numbers under the store name).  Step Five: Find   Purchase Goods or Services   If you click on an item in a store in the Home tab, a new window opens to give more product details, including the product title, price in Bitcoin, product description, cost of shipping and handling, quantity available, the item\u2019s condition, and up to three photos. There is also a \u201cRaw Contract\u201d button which allows users to view the contract details directly.   Clicking on \u201cOrder Details\u201d on the bottom left will bring you to a screen that allows you to purchase the product. You can determine the quantity desired, and attach a comment for the merchant to see along with your order. If you haven\u2019t entered your shipping address in Settings already, a red warning will ask you to do so before proceeding. The price for the product and shipping and handling are displayed again.  At the bottom the user needs to input a Bitcoin Address that they control. This will be used in case of a refund.  Once this section is completed, the user selects \u201cChoose a Notary.\u201d A list of online notaries that the user has trusted is displayed. If the user hasn\u2019t trusted any notaries, or if none of those notaries are online, they must choose another notary in order to continue.  The user then completes the order by selecting \u201cSubmit Order.\u201d This sends the order to the notary and merchant.  Step Six: Finish the Purchase  When a buyer views \u201cMy Purchases\u201d it will display the status of their orders. If they\u2019ve just submitted an order, the status will indicate \u201cNeed to Pay\u201d and the buyer needs to open the order to complete payment.   A QR code is displayed which, if scanned, will input the multisignature address and amount. If the user selects \u201cPay in your Wallet,\u201d it will open a wallet on their device and pull in the same information. Once the payment is completed, the buyer must manually select \u201cMark as Paid.\u201d This lets the merchant know to ship the item.  If the buyer marked the order as paid, but the merchant didn\u2019t receive this message due to being offline, the buyer can re-open the order and click on \u201cResend Payment Notice\u201d when the merchant is online.  Once the item has arrived or service is provided, the buyer can then release the funds from multisig by opening the order and selecting \u201cRelease Payment to Merchant.\u201d Again, if the merchant didn\u2019t receive this message due to being offline, the buyer can try releasing again when they are online.  2.2.3 Notary's Guide to  OpenBazaar  Step One: Personalize your Client  1 Settings Tab   Click the Settings tab.  Enter a new Nickname for yourself. This is how other users will see you.  If you want a unique image for your avatar, put in a URL for an image in the Avatar URL field.  Input a Bitcoin address that you control into the Bitcoin Receiving Address field. This is where you receive funds from multisig if your services are needed.  Click Save.   Step Two: Set Communication Information    Click on the Communication section.  Enter an email address if you want to communicate with other parties via email.  If you have a website that you want displayed, enter the URL in the Your Web Site field.  Enter a Bitmessage address if you want to communicate with other parties via Bitmessage.  Click Save.   Step Three: Create Backup    Click on the Backup section.  Click Create New Backup.   Step Four: Set up your Notary Details  In Settings, select the Notary section.   Make me a notary . By clicking Yes in this section, you allow others to choose you as a notary. They will see this option when they click on your store front and see the \u201cServices\u201d tab, or by manually entering your GUID into the Trusted Notaries section. The default option is set to No; users aren\u2019t notaries unless they choose to be.  Fees . As a notary, you can charge a percentage fee for providing dispute resolution. If the buyer and seller finish their transaction without needing the notary, there is no payment. If the notary is needed to refund buyer or release payment to merchant, then they will receive the percentage from the multisig that they set in this section. A notaries\u2019 fee is visible in the \u201cServices\u201d tab in their store front.  Description of your services . Notaries can explain their terms and conditions in this area, as well as their credentials and any other information they wish to share.   Step Five: Manage your Orders  Note that at this point, offering notary services means you automatically accept all transactions which choose you as a notary. In the future, notaries will be able to screen transactions, or only accept them manually.  If a buyer or seller contacts a notary asking for funds to be released, it\u2019s the notary\u2019s responsibility to do their best to determine which party should receive funds. Once they\u2019ve made their decision and contacted the parties, they can release funds by opening up the order in the notarizations tab.   In the 0.5 client, the notary has two options. \u201cRefund the Buyer\u201d releases all the funds from multisig to the buyer, minus the percentage fee which is paid to the notary for dispute resolution. \u201cRelease money to the Merchant\u201d does the same for the merchant. The notary must click \u201cSend Resolution\u201d for the transaction to process.", 
            "title": "2.2 User Guide"
        }, 
        {
            "location": "/03.-OpenBazaar-Protocol/", 
            "text": "3. \nOpenBazaar\n Protocol\n\n\nOpenBazaar\n is a marketplace platform compromised of the following components:\n\n\n\n\nThe Kademlia-style Peer-to-Peer (P2P) Network\n\n\nThe network architecture governing peer-to-peer connections\n \n\n\n\n\n\n\nThe Trade Protocol\n\n\nThe fundamental rules governing the type trade between peers\n\n\n\n\n\n\nThe Application\n\n\nHow a users access the network and executes the trades protocol\n\n\n\n\n\n\n\n\nUsers download the \nOpenBazaar\n \napplication\n to access the \nnetwork\n and execute the \ntrade protocol\n with other users on the network.\n\n\n3.1 Peer-to-Peer Network\n\n\nThe \nOpenBazaar\n network is the backbone of the project. It is designed to be scalable, supporting millions of people finding goods and services offered by fellow peers, who could be located anywhere in the world.\n\n\nThe Kademlia-style architecture theoretically supports this vision, and has a track-record of connecting millions of peers as demonstrated by BitTorrent. The chief engineering difficulty of building \nOpenBazaar\n historically has been implementing this component.\n\n\nThe Kademlia-style P2P network is older and distinct from the Bitcoin blockchain. To create a node, a network identity or global unique identifier (GUID) needs to be created. Firstly, random number is generated between a range of 1 to 2\n256\n to obtain a \nprivate key\n. From this key, a \npublic key\n is derived.\n\n\nThe \npublic key\n is then digitally signed with the the \nprivate key\n (self-signature) and \nsha256\n hashed. The resulting hex is then further hashed by \nRIPEMD160\n to generate the \nGUID\n. This GUID is impossible to forge or spoof without compromising the private key, and is the basis of a node's pseudonymous identity on the network.\n\n\nGUID = RIPEMD160(SHA256(self_signed pubkey))\n\n\nThe GUID is mapped to your dynamic IP address and port on a \ndistributed hash table\n (DHT). This is not a distributed ledger like the blockchain, but a local 'map' of GUIDs (peers) and their IP addresses in your 'bucket' ('bucket' defined as similar GUIDs within a defined range). Each peer's DHT allows anyone on the network to find the location of a specific peer in only a few hops (i.e. think 6 degrees of separation). On this basis, peers can connect to each other to exchange data.\n\n\nThe network allows for a GUID to be associated with more than just an IP address, but other attribute-value pairs that can be searched (i.e. decentralized search).\n\n\nIn \nOpenBazaar\n, the DHT lists GUID hashes of contracts that the a peer (GUID) is selling and keywords that are associated with that contract. This enables other peers to decentrally search the network for specific contracts by their hash and/or keyword, compiling a list of relevant hits and their corresponding GUIDs. The user can then select the peer and directly access their store to commence trade.\n\n\nThe overall features of this architecture are:\n\n\n\n\nMinimal resources are required to run an \nOpenBazaar\n node (relative to Bitcoin)\n\n\nScalable to millions of users\n\n\nUses Bitcoin only as a currency for decentralised trade\n\n\nContracts (listings) are hosted on the merchant's node. \n\n\nEnables rapid listings, as distributed consensus isn't required to list goods/services\n\n\n\n\nThis design does have some drawbacks, which third party services (or future technological innovation) can address:\n\n\n\n\nNodes are required to remain online for listings to be accessible by peers\n\n\nThe project is exploring using the DHT as a temporary cache for listing contracts and placing \nasynchronous encrypted orders\n \n\n\nNodes can be targeted (hackers, spammers, governments) on the basis of what they are listing, although the marketplace and protocol remain censorship-resistant\n\n\n\n\nPresently, both TCP/IP AND rUDP are used to to make connections between peers. The rUDP-based connections tend to overcome NATs (network address translation) and other obstacles preventing peers from accessing the network, and thus avoiding complicated port forwarding requirements beyond the skills of most users. This also means that these connections cannot be easily used through TOR to obfuscate the true IP address of a node.\n\n\n3.2 Trade Protocol\n\n\nThe trade protocol describes a set of fundamental rules that govern decentralised trade on \nOpenBazaar\n between two or more trading partners.\n\n\nThe protocol is made up of two major sub-components:\n\n\n\n\nBitcoin Payments and Escrow\n\n\nPayment with Bitcoin\n\n\nEscrow selection\n\n\n\n\n\n\nRicardian Contracts\n\n\nFormalizes the terms of trade\n\n\n\n\n\n\n\n\n3.2.1 Bitcoin Payments and Escrow\n\n\nAll trade over \nOpenBazaar\n \nexclusively uses Bitcoin\n. \nOpenBazaar\n will support four payment options with Bitcoin:\n\n\n\n\nDirect payment\n\n\nAlice transfers bitcoin to Bob in a simple payment\n\n\n\n\n\n\nDouble-deposit 'MAD' escrow\n\n\nAlice and Bob create a 2-of-2 multisignature escrow address\n\n\nAlice and Bob need to agree to release funds from that address\n\n\n\n\n\n\nNotary escrow\n\n\nAlice, Bob, and Charlie (a third party 'notary') create a 2-of-3 multisignature escrow address\n\n\nTwo members of this party are required to release funds from the address\n\n\n\n\n\n\nNotary pooled escrow\n\n\nAlice, Bob, and others (multiple third party notaries) create a n-of-m multisignature escrow address\n\n\nMultiple parties from the \npool\n of notaries are required to release funds from the address\n\n\n\n\n\n\n\n\n\n\nHierachical Deterministic Wallets\n\n\nIrrespective of the payment option selected, individual bitcoin pubkeys are derived from a \nhierarchical deterministic (HD) seed\n to avoid address reuse and efficiently manage the signing keys. All signing keys can be recovered from the seed if the node is inadvertently destroyed or lost.\n\n\n\n\nOf the three payments options, \ndirect payment\n and \nMAD escrow\n have \nno enforceable dispute resolution\n mechanism and zero redundancy if keys are lost. However, their use in \nOpenBazaar\n is appropriate in following scenarios:\n\n\n\n\nDirect payment\n from well-established merchants and with high reputation; presumption is that the buyer possesses a high degree of trust to the merchant.\n\n\nMAD escrow\n between two parties who want to transact directly without any third party involvement, but do not share a high degree of trust. These users are assumed to have an above average level of technical skill to manage risks such as key loss or incapacitation, and who have a firm understanding of the implications of a failed trade.\n\n\n\n\nMultisignature transactions used are for \nnotary escrow\n payments, which enable an innovative form of \nmultiparty escrow\n. Rather than funds being send into the exclusive custody of a trusted third party, funds are sent to an address that are not in the exclusive custody of any individual. The multisignature address is generated by comining the unique bitcoin pubkeys from the merchant, buyer, and notary. To release funds, cooperation (in the form of digital signatures) between two of the three participants is required. A higher level description of multisignature transactions can be found in the \nBitcoin documentation\n. The overall effect of this system avoids a situation where one party in the trade can run away with the funds. The third party keyholder in these payments is called a \nnotary\n. The role of a notary is further described below.\n\n\n3.2.1.1 Altcoins\n\n\nWhile theoretically other crypto-currencies can be supported in the core code, provided they follow a similar specification to Bitcoin multisignature transactions, altcoin implementations will not be pursed. Third party services (e.g. Shapeshift.io) can be used to either: \n\n\n1) Convert altcoins into bitcoin to fund the multiparty escrow address\n2) Convert bitcoins to altcoins when funds are released from multiparty escrow.\n\n\nIn this model, Bitcoin is being used as the 'backend' transactional currency, while altcoins are used as an onramp and/or offramp from Bitcoin escrow via these exchanges.\n\n\n3.2.1.2 Fiat Payments\n\n\nSimilar to altcoins, fiat payments may be supported using third party services to convert fiat currencies into Bitcoin to fund multisignature escrow addresses, or automatically convert bitcoin payout funds to fiat currency of the merchant's choice.\n\n\n\n\nRole of Third Party Exchanges\n\n\n\n\n\n\n3.2.2 Ricardian contracts\n\n\n\n\nA \nRicardian Contract\n can be defined as a single document that is \na)\n a contract offered by an issuer to holders, \nb)\n for a valuable right held by holders, and managed by the issuer, \nc)\n easily readable by people (like a contract on paper), \nd)\n readable by programs (parsable like a database), \ne)\n digitally signed, \nf)\n carries the keys and server information, and \ng)\n allied with a unique and secure identifier.\n\n\n- Ian Grigg\n\n\n\n\nRicardian contracts (RC) are digital documents that record an agreement between multiple parties, which are signed and cryptographically verified, and formatted to be human and machine-readable. The one-way hash of RC establish a tamper-proof receipt of the terms and conditions of a trade, which eliminates potential disputes that may arise from hearsay claims between counterparties.\n\n\nTo be 'machine readable', the terms and conditions are formatted in JSON with a hierarchy of attribute-value pairs: the contract schema. As there are multiple types of trade that \nOpenBazaar\n aims to support, each will have its own contract schema. Common to all schemas are four modules:\n\n\n\n\nMetadata module\n\n\nID module\n\n\nTrade module\n\n\nLedger module\n\n\n\n\nRicardian contracts in \nOpenBazaar\n will typically have one metadata, trade and ledger module. Multiple ID modules are required to represent each party in the trade (at least 1 merchant, buyer, and notary).\n\n\n3.2.2.1 Metadata module\n\n\nThe \nmetadata module\n is the header of the RC and informs users and the app what type of trade will take place and the period of time the contract is valid. \n\n\n3.2.2.2 ID module\n\n\nThe \nID module\n contains the necessary identifying data for a peer on the network. It will contain the following types of ID:\n\n\n\n\nNetwork ID (minimum ID required for a trade)\n\n\nGUID (global unique identifier)\n\n\nUnique network identifier\n\n\nOne GUID per node on the network \n\n\n\n\n\n\nBitcoin pubkey\n\n\nUsed to create/sign multisignature escrow address\n\n\nGenerated from HD seed\n\n\nOne key per contract\n\n\n\n\n\n\nPGP pubkey\n\n\nUsed to sign contracts\n\n\nEstablishes a 'mobile' identity \n\n\nMultiple nodes can provably belong to 1 PGP key\n\n\n\n\n\n\n\n\n\n\nPasscard ID \n\n\nPasscard\n - Digital identity as per the 'Blockchain Name System'\n\n\nLinks to email and other communication channels\n\n\nVerified links to social networking platforms\n\n\n\n\n\n\n\n\n\n\nLegally accessible ID \n\n\nContact details that are verified by a third party (think certificate authorities), which basically verifies that this identity is legally accessible in the event of some dispute that needs to be resolved in court \n\n\n\n\n\n\n\n\nFor the purposes a basic trade, only the \npseudonymous identity\n is required. Unlike traditional e-commerce platforms, neither the \nmeatspace\n or \nlegally accessible\n identities are required for trade. This point is as much about maintaining privacy as it is about supporting trade for jurisdictions that lack infrastructure to support ID verification. \n\n\n3.2.2.3 Trade module\n\n\nThe \ntrade module\n contains the necessary semantic data to define the good or service to be traded for bitcoin. The structure of this module will vary depending on the type of good or service to be traded. As a result, we will pursue community engagement to evolve categories, standards and templates.\n\n\n3.2.2.4 Ledger module\n\n\nThe \nledger module\n of the Ricardian contract traces the various stages of the trade between the parties involved. The structure of the ledger will dictate the \nsigning order\n. The ledger module is read by the client/app, which enforces signing and forwarding of the contract to the next appropriate party. The final product is a contract that has a completed signing order and transaction history to act as a tamper-proof \ntrade receipt\n. The structure of the ledger module will also vary according to the type of good and service to be traded for bitcoin. \n\n\nThe ledger is formatted according to the step-by-step stages where data and signatures are required from each participating party. As a platform, users will be able to design custom Ricardian contracts with unique signing orders to support new types of markets. \n\n\n3.2.2.5 Example of a full contract\n\n\n{\n    \n01_merchant\n: {\n        \n01_listing\n: {\n            \n01_metadata\n: {\n                \n01_obcv\n: \n,\n                \n02_expiry\n: \n,\n                \n03_category\n: \nphysical good\n,\n                \n04_category_sub\n: \nfixed price\n,\n                \n05_order_flow\n: [\n                    \nmerchant\n,\n                    \nbuyer\n,\n                    \nmerchant\n,\n                    \nbuyer\n\n                ]\n            },\n            \n02_id\n: {\n                \n01_guid\n: \n,\n                \n02_pubkeys\n: {\n                    \nbitcoin\n: \n,\n                    \npgp\n: \n\n                },\n                \n03_handle\n: \n,\n                \n04_passcard\n: \n,\n                \n05_contact\n: {\n                    \nbitmessage\n: \n,\n                    \nemail\n: \n,\n                    \nsubspace\n: \n\n                },\n                \n06_role\n: \nmerchant\n\n            },\n            \n03_item\n: {\n                \n01_title\n: \n,\n                \n02_description\n: \n,\n                \n03_condition\n: \n,\n                \n04_price\n: {\n                    \nbitcoin\n: 0\n                },\n                \n05_shipping\n: {\n                    \nest_delivery\n: \n,\n                    \nregion\n: \n\n                },\n                \n06_images\n: {\n                    \nimage_hashes\n: [\n                        \n,\n                        \n,\n                        \n,\n                        \n,\n                        \n\n                    ],\n                    \nimage_urls\n: [\n                        \n,\n                        \n,\n                        \n,\n                        \n,\n                        \n\n                    ]\n                },\n                \n07_keywords\n: [\n                    \nkeyword1\n,\n                    \nkeyword2\n\n                ]\n            },\n            \n04_notary\n: {\n                \n01_guid\n: \n,\n                \n02_pubkeys\n: {\n                    \npgp\n: \n,\n                    \npubkey\n: \nxxx\n,\n                    \npubkey_selfsig\n: \nXXX\n\n                },\n                \n03_handle\n: \n,\n                \n04_passcard\n: \n\n            }\n        },\n        \n02_signatures\n: {\n            \nbitcoin\n: \n,\n            \npgp\n: \n\n        }\n    },\n    \n02_buyer\n: {\n        \n02_order\n: {\n            \n01_id\n: {\n                \n01_guid\n: \n,\n                \n02_pubkeys\n: {\n                    \nbitcoin\n: \n,\n                    \npgp\n: \n\n                },\n                \n03_handle\n: \n,\n                \n04_passcard\n: \n,\n                \n05_contact\n: {\n                    \nbitmessage\n: \n,\n                    \nemail\n: \n,\n                    \nsubspace\n: \n\n                },\n                \n06_role\n: \nbuyer\n\n            },\n            \n02_item\n: {\n                \n01_semantics\n: {},\n                \n02_shipping_address\n: \n\n            },\n            \n03_multisignature\n: {\n                \n01_chaincode\n: \n,\n                \n02_multisignature_address\n: \n,\n                \n03_redemption_script\n: \n,\n                \n04_txid\n: \n\n            }\n        },\n        \n02_signatures\n: {\n            \nbitcoin\n: \n,\n            \npgp\n: \n\n        }\n    },\n    \n03_merchant\n: {\n        \n01_shipped\n: {\n            \n01_shipping\n: {\n                \n01_tracking_id\n: \n,\n                \n02_shipper\n: \n,\n                \n03_payout\n: {\n                    \n01_payout_address\n: \n,\n                    \n02_signed_tx\n: \n\n                }\n            }\n        },\n        \n02_signatures\n: {\n            \nbitcoin\n: \n,\n            \npgp\n: \n\n        }\n    },\n    \n04_buyer\n: {\n        \n01_delivery\n: {\n            \n01_item\n: {\n                \n01_received\n: true,\n                \n02_dispute\n: false\n            },\n            \n02_payout\n: {\n                \n01_signed_tx\n: \n,\n                \n02_txid\n: \n\n            },\n            \n03_rating\n: {\n                \n01_rate_merchant\n: \n,\n                \n02_rate_item\n: \n,\n                \n03_rate_item_description\n: \n,\n                \n04_rate_shipping\n: \n,\n                \n05_rate_customer_service\n: \n,\n                \n06_feedback\n: \n\n            }\n        },\n        \n02_signatures\n: {\n            \nbitcoin\n: \n,\n            \npgp\n: \n\n        }\n    }\n}\n\n\n\n\nNote: future articles will breakdown the component parts of the contract and how they should be used.\n\n\nWithin the \nledger\n section of the contract, the \nsigning order\n is divided into several stages. Each stage immediately identifies the party responsible for filling the empty data fields. The user signs the contract and forwards it to the next user in the ledger. The user won't be required to manually send it to the user in the ledger. Rather, the client will verify the signatures first before sending the signed contract to the next party. In a loose sense, this enables \nOpenBazaar\n Ricardian contracts to adopt some 'smart' characteristics.\n\n\nAn abstraction of the signing order:\n\n\n\n\nThe \nsigning order\n should be defined in the structure of the JSON contract.\n\n\n3.2.3 Notaries\n\n\n{{Insert something here about notaries}}\n\n\n3.2.3.1 Voting Pools\n\n\nConsider a typical exchange between two parties with an arbiter mediating the transaction, where a 2-of-3 multisignature address is generated. The buyer in this exchange sends bitcoins to the multisignature address, to be released upon the pre-agreed conditions with the seller. While seller or arbiter alone cannot steal these funds, there remains a non-zero risk of collusion between them to defraud the buyer. Unfortunately, soley relying upon reputation systems is not an adequate solution this problem, no matter how well designed. An effective strategy is to minimise the risk of collusion by adding more arbiters to the mix, a \nvoting pool\n. A majority vote by the pool of arbiters makes it more difficult for a corrupted arbiter to defraud the transaction, and is thus a favorable means of managing risk for high value exchanges in \nOpenBazaar\n.\n\n\nVoting pools\n in \nOpenBazaar\n would be created from the list of \npreferred arbiters\n from the buyer and seller's profile. In the case of an uneven number of arbiters within the pool, the benefit of the doubt goes to chance with the client randomly selecting a well-ranked arbiter. The total size of voting pool is limited to the \nmaximum number\n of parties in a multisignature transaction on the Bitcoin network. An important element in forming a \nvoting pool\n is to prevent the risk of a 'sore loser attack', where the multisignature transaction is constructed without the possiblity of the seller and the arbiters recovering the funds if the buyer fails to initiate the transaction, after receiving a good or losing a bet for example.\n\n\nNotary pools decrease the overall risk of collusion and increase the redunancy of transactions, a multisignature escrow address is made up of several additional parties on top of the \nmerchant\n and \nbuyer\n. For example, an 8-of-15 multisignature escrow address can be created made up of:\n\n\n\n\n3 notaries selected by the \nmerchant\n \n\n\n3 notaries selected by the \nbuyer\n\n\n1 notary selected at random\n\n\n4 keys from the \nmerchant\n\n\n4 keys from the \nbuyer\n\n\n\n\nSignatures from 8 keys are required to release funds from the multisignature escrow address. If the \nmerchant\n and \nbuyer\n have any reason to doubt the pool, they can move the keys to a different multisignature address. If there is a dispute, a majority of signatures is required in combination with one of the parties to release funds from the address. No single party can steal the funds, and the likelihood of collusion is reduced with more parties involved.\n\n\nNotary pools can be designed according to the 'Lucas Algorithim':\n\n\n\n\nTwo traders, Alice and Bob, require equal number (\"n\") of keys, as you do not know a priori who will win the trade (or bet). In general, Alice needs \"n\" keys, Bob needs \"n\" keys, and the jury needs \"2n - 1\" keys. The majority of 2n - 1 is always n. In the simplest case, Alice has one key, Bob has one key, and the jury size (2x1 - 1) is one (i.e., the arbiter decides with Alice or with Bob). In the above example, n = 4. Alice has 4 keys, Bob has 4 keys, and the jury size = (2x4 - 1) = 7. The \"best of 7\" is of course 4 (= n). The total number of keys is 4n - 1 = 15. The multisig is therefore 8 of 15, which is achieved with Bob + Alice, or Alice + voting pool (majority thereof), or Bob + voting pool (majority thereof). These numbers should work with any integer n \n 0.\n\n\n\n\nInteraction of the notary pool with the arbiter is managed over the \nOpenBazaar\n application:\n\n\n\n\nThe notary pool will received a digitally signed \nruling\n from the arbiter. The \nruling\n can be \nblinded\n from the notaries (i.e. encrypted with the public keys of the \nmerchant\n and \nbuyer\n), to maintain the privacy of both parties (discussed in more detail below). Aside from the arbitration notes, the ruling will also contain an unsigned bitcoin transaction with:\n\n\n\n\nInput:\n the multisignature escrow address\n\n\nOutput_1:\n the winning party from arbitration\n\n\nOutput_2:\n notary fee\n\n\nOutput_3:\n arbiter fee\n\n\n\n\nIn more complex settlements, where both parties receive a portion of the funds, additional outputs are added to the transaction. The bitcoin transaction is digitally signed by either both parties, or the winning party with the notary pool and broadcast to the Bitcoin network.\n\n\n3.2.3.2 Accredited Notaries\n\n\nEven with a notary pool, the question remains how users will choose notaries within \nOpenBazaar\n? The most direct way is for users to access the storefront of other nodes in the network, select the 'services' tab and manually add them to their list of preferred notaries. Users can also search for nodes on the network that they wish to add on their list. These approach however, assume that the user already knowns what node to trust as a notary.\n\n\nOne approach is for notaries to be \naccredited\n by a voluntary private orgaisation, which creates some open standards for notaries to voluntarily subject themselves to in order to earn an 'endorsement badge'. These open standards may include:\n\n\n\n\nThe notary node has an up-time of \n22 hours per day\n\n\nCommunication response times are \n 12 hours\n\n\nNotaries issue a surety bond held in a multisignature address by the accreditation organisation\n\n\n\n\nThis approach is a form of self-regulation, whereby accreditation is earned after demonstrating compliance. The accrediting organisation can also hold the surety bond in the event that an accredited notary defrauds a client. In this scenario, a corrupt notary is excluded from the organisation, their surety bond is forfeit (perhaps used to compensate a defrauded member), and they lose their public accreditation with the association. A notary may choose to become accredited from several such organisations to bootstrap trust.\n\n\nTechnically this can be achieved by the private organisation keep a public record of accredited notaries, digitally signed, that a notary can link to within their 'notary description' field within the client.\n\n\nFrom a user's perspective, they can search and filter potential notaries according to the presence or absence of accreditation by various organisations. Of course this does not restrict users from finding and using unaccredited notaries that they prefer.\n\n\n3.2.3.3 Contract Blinding\n\n\nData fields within the Ricardian contract can be hashed prior to forwarding to the notary for their digital signature. Nearly all data fields can be hashed with exception to the bitcoin pubkeys necessary to create a multisignature address. Hashing is preferable to encryption with the buyer or seller's public key as the data fields can be easily verified by an arbiter in the event of a dispute, rather than going through additional decryption steps. The goal is to create an immutable record of the product details of the contract while obfuscating them.\n\n\n3.2.3.4 Example\n\n\nFor example, imagine that Alice wants to sell an item to Bob that she should not like the notary to be aware of. The \nunblinded\n contract that both Alice and Bob see is shown below:\n\n\n{\n    \n_OpenBazaar_ Contract\n: {\n        \nOBCv\n: \n0.1\n,\n        \nCategory\n: \nPhysical good\n,\n        \nSub-category,\n: \nAsk price: negotiable\n,\n        \nNonce\n: \n01\n,\n        \nExpiration\n: \n2014-06-29 12:00:00\n\n    },\n    \nSeller\n: {\n        \nNymID\n: \nabc123\n,\n        \nNodeID\n: \nAlice\n,\n        \nBTCuncompressedpubkey\n: \n044448c02963b8f5ba1b8f7019a03b57c80b993313c37b464866efbf61c37098440bcdcc88bedf7f1e9c201e294cf3c064d39e372692a0568c01565b838e06af0b\n,\n        \nPGPpublicKey\n: \nxsBNBFQtSk0BB/98EG2qpRRVJUZ0tjwbT88bzjeJl7rhPRWzewvjZDMjjDK0Q9p2q8xm21g1BAgsNV6fqyM8cpnosT6/jYur3h1c+l5YAAWTGw1LYZ44rArMFZ9yq9XuiKH0NEv5xko1+AAKdMnev1ZbU87iRR5YbQXqWCzS2/M+CZ3cY2d/WpJO50zlhofsC1gprtLaBuRmiFaboEjvj/i+a14BvkpmQhhdFlsVSUkUPKUS96hHQfYkY6uJGNC1SCAISaTJAXTMIgIjDRc0/tORAPqi0NrcCfAZJVQuMKBYrqA5acL2cFnehmIYGaCQpexqpV5Lme2jhiFk8/4Fjtl88kqjBUey2tcdABEBAAHNGkJsdWhoYXVhaGEgPGxhbGFAbGFsYS5jb20+wsByBBABCAAmBQJULUpeBgsJCAcDAgkQwltegB4kwqAEFQgCCgMWAgECGwMCHgEAAKvcB/wPLNVWm6iipqKO4hoY45Kxey23uEjVIqHAfNn5J+RkmKnYhEtAn/Q98flh6v7qnTi/GMvP1kbeGdIBob7S6X7z75ZUEIF72Q76qFI7BmuDme2RuKn/xyXRuQuTH0LD/EhPMGQiSjni5kW8ht1g2GpqFQiBKFMmhC4fwSgBQNXLCeDjYK8JvS5RsxLpfcCrvfWJEqjClwjnzXZySjFtZ3qjyry2CLxcPmiprVW7N9D/xJ1KWx3E+dK0zNiqrtxynlv2ZzfgXdu12WGs1YlAt0M1YAcKOSVtUC8iiyRvZYvgFUsuoYNZLDZhRw7PSua4FidYHZnPxMmt2H1ftVqMM9xGzsBNBFQtSl4BB/9wASUgKisYaE0iwp07R1z4Vp0zN/hO77RPV0QPsGcsjmefy1/bl6391pcMAuL7sLvDNXj91bA6SQ50rel2P12YbSvLGgcRpPoxPccQ4myHYOl0tVR4fJcLCyWDmOnz5rGSctZZhAUJ3FaTkeQd3pgzDtdD7M8hZ1GFwMnsw36IUDuyTRo450kNzZV/y9Ai7rjqqjZ86n6h74dp5cUB/w8FVBxAZaFbZYDYPSAsV+ja5CMxasgDhNZwukjRGX3MR/nJNNM+Oy684mi+iAe7ZEcR4m2fDHo/B7oJSTmSfqO21sK9v/K4lRDmJkPYJDpxUMlB/k+ksAgrjehA2h240NFPABEBAAHCwF8EGAEIABMFAlQtSnYJEMJbXoAeJMKgAhsMAADBWAf9Fqj98anrvWlsbtBFwbFu6LF8uNTrtoHNnFfTMOjIR6+ccTIDeMiOOKhEWkZa7VroS3hJXY9Ps0DGjUXQZ5nP0L4IeZOF5+Oj8SPQX+uJfyZ/Ewq/4lpD/DNz9AWyPkDTFLxUfEFJ9kTm1Uue3cV1KKtqeptaFuIL1l7tgaDOi2nxdVq/C937QAiXY6wEUcocaXUOSaWyWjEoiXA7tBRXrp3gxFFs6hl5ECW5gxFymITVm2WlNeHm6Jn9v786bp0Umz8K5+TcPWu08duuOBDw0qAN6g2alt4Cb0IDOOhxmKenIuEHg3RyhCwQwUOpMLlZXxpTWjUzWZOTLEvR9zciXA===28tV\n\n    },\n    \nPhysical Good Contract\n: {\n        \nItemName\n: \nLittle House on the Prairie DVD Anthology\n,\n        \nCurrency\n: \nBitcoin\n,\n        \nPrice\n: \n0.01\n,\n        \nDescription\n: [\n            \nThe entire collection.\n\n        ],\n        \nDelivery\n: {\n            \nCountry\n: \nUSA\n,\n            \nRegion\n: \nAll States\n,\n            \nEstimatedDelivery\n: \n13 days after triple-signing\n,\n            \nPostagePrice\n: \nIncluded in the item price\n\n        }\n    }\n}\n\n\n\n\nBob accesses the contract via the \nOpenBazaar\n client for signing. However, as both Alice and Bob want to maintain privacy in their transaction, Bob \nblinds\n the transaction first before sending it to the notary.\n\n\nContract blinding requires the following steps to take place:\n\n\n\n\nBob hashes the original seed contract\n\n\nBob prepares a \nblinded\n double-signed contract\n\n\nThis contract includes the hash of the original seed contract from (1). The purpose of this hash to provide an immutable reference to what Alice and Bob are actually trading.\n\n\n\n\nAn example of the blinded contract:\n\n\n{\n    \n_OpenBazaar_ Contract\n: {\n        \nOBCv\n: \n0.1\n,\n        \nCategory\n: \nPhysical good\n,\n        \nSub-category,\n: \nAsk price: negotiable\n,\n        \nNonce\n: \n01\n,\n        \nExpiration\n: \n2014-06-29 12:00:00\n\n    },\n    \nSeller\n: {\n        \nNymID\n: \nabc123\n,\n        \nNodeID\n: \nAlice\n,\n        \nBTCuncompressedpubkey\n: \n044448c02963b8f5ba1b8f7019a03b57c80b993313c37b464866efbf61c37098440bcdcc88bedf7f1e9c201e294cf3c064d39e372692a0568c01565b838e06af0b\n,\n        \nPGPpublicKey\n: \nxsBNBFQtSk0BB/98EG2qpRRVJUZ0tjwbT88bzjeJl7rhPRWzewvjZDMjjDK0Q9p2q8xm21g1BAgsNV6fqyM8cpnosT6/jYur3h1c+l5YAAWTGw1LYZ44rArMFZ9yq9XuiKH0NEv5xko1+AAKdMnev1ZbU87iRR5YbQXqWCzS2/M+CZ3cY2d/WpJO50zlhofsC1gprtLaBuRmiFaboEjvj/i+a14BvkpmQhhdFlsVSUkUPKUS96hHQfYkY6uJGNC1SCAISaTJAXTMIgIjDRc0/tORAPqi0NrcCfAZJVQuMKBYrqA5acL2cFnehmIYGaCQpexqpV5Lme2jhiFk8/4Fjtl88kqjBUey2tcdABEBAAHNGkJsdWhoYXVhaGEgPGxhbGFAbGFsYS5jb20+wsByBBABCAAmBQJULUpeBgsJCAcDAgkQwltegB4kwqAEFQgCCgMWAgECGwMCHgEAAKvcB/wPLNVWm6iipqKO4hoY45Kxey23uEjVIqHAfNn5J+RkmKnYhEtAn/Q98flh6v7qnTi/GMvP1kbeGdIBob7S6X7z75ZUEIF72Q76qFI7BmuDme2RuKn/xyXRuQuTH0LD/EhPMGQiSjni5kW8ht1g2GpqFQiBKFMmhC4fwSgBQNXLCeDjYK8JvS5RsxLpfcCrvfWJEqjClwjnzXZySjFtZ3qjyry2CLxcPmiprVW7N9D/xJ1KWx3E+dK0zNiqrtxynlv2ZzfgXdu12WGs1YlAt0M1YAcKOSVtUC8iiyRvZYvgFUsuoYNZLDZhRw7PSua4FidYHZnPxMmt2H1ftVqMM9xGzsBNBFQtSl4BB/9wASUgKisYaE0iwp07R1z4Vp0zN/hO77RPV0QPsGcsjmefy1/bl6391pcMAuL7sLvDNXj91bA6SQ50rel2P12YbSvLGgcRpPoxPccQ4myHYOl0tVR4fJcLCyWDmOnz5rGSctZZhAUJ3FaTkeQd3pgzDtdD7M8hZ1GFwMnsw36IUDuyTRo450kNzZV/y9Ai7rjqqjZ86n6h74dp5cUB/w8FVBxAZaFbZYDYPSAsV+ja5CMxasgDhNZwukjRGX3MR/nJNNM+Oy684mi+iAe7ZEcR4m2fDHo/B7oJSTmSfqO21sK9v/K4lRDmJkPYJDpxUMlB/k+ksAgrjehA2h240NFPABEBAAHCwF8EGAEIABMFAlQtSnYJEMJbXoAeJMKgAhsMAADBWAf9Fqj98anrvWlsbtBFwbFu6LF8uNTrtoHNnFfTMOjIR6+ccTIDeMiOOKhEWkZa7VroS3hJXY9Ps0DGjUXQZ5nP0L4IeZOF5+Oj8SPQX+uJfyZ/Ewq/4lpD/DNz9AWyPkDTFLxUfEFJ9kTm1Uue3cV1KKtqeptaFuIL1l7tgaDOi2nxdVq/C937QAiXY6wEUcocaXUOSaWyWjEoiXA7tBRXrp3gxFFs6hl5ECW5gxFymITVm2WlNeHm6Jn9v786bp0Umz8K5+TcPWu08duuOBDw0qAN6g2alt4Cb0IDOOhxmKenIuEHg3RyhCwQwUOpMLlZXxpTWjUzWZOTLEvR9zciXA===28tV\n\n    },\n    \nBuyer\n: {\n        \nNymID\n: \ndef456\n,\n        \nNodeID\n: \nBob\n,\n        \nBTCuncompressedpubkey\n: \n04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235\n,\n        \nPGPpublicKey\n: \nxsBNBFQum5sBCACGWTFtJElTxRGG7OnHDfaEnPE5fUx57a5i5q5L7Bk6mG3h6omPO7MhhFFtKjbszdq1WUSogvTF7JTqzblC843i6D0XZOCfNEvj2jbMXu7N6QkX4otEOleVZdiRrSkBK8ubdGcaSXsKEONs37nRAfSCOdVz1JZvCtV7fT/oiaqR47osu2OMYOExpAASwF6f1CfglC6uWLnG34e3use+ILrev2WKREINLU4Z5cuZET59gotfqpfH2l3Wo22SBn+HWJl8yIsK3/QB/7oRtPN4wSTky0jJE7+bzE4/F2qjoXPUiqWMDfdF+ALbFs+GBsv8Gtfsmuawr3ZzzPi3fElAoXirABEBAAHNIE9CVGVzdDIgPG9idGVzdDJAb3BlbmJhemFhci5vcmc+wsByBBABCAAmBQJULpuqBgsJCAcDAgkQKr7omyUpIU8EFQgCCgMWAgECGwMCHgEAACP9B/0cjB3CrF4wARoPblCdWijTKq6MwxG/iUp7zOXiIoxF4cXDzTjtkcVBaDOj5Y5wlL7UQc4zJy4c3NUh7qrOzYxNVfqfF9xTVmOtECTYa+hFP4HAxl1v1KAhrhiHren9jOkAc+LRyyMMmM59JcpjY37VsynzdJrLTz3W6fa4PAdSy9b1Ezmg7svgOzPSz/xwWooQBk/2pKH6AF0+wrCMKbztutnf6KMlZoxkbrMcAYQkiCMaRrvNdGcJevgpsViqQ06f9eKuZrmHAhvpuAkT1Xh/YyYZ26RdPKFmpk5KPEPSQbzl8GcS75TfgNiZCBM+WoT1h7F82Tgo30MHxh/dqewFzsBNBFQum6wBCACEEU6kx2ZhYEI+uSExGlby11hPz4QDLrsNWVH4sHJS6Ln05lt30Le55MEpTNiRXAZa/Q70Dt5konpPiQ9+Y6L7WNL3pTlVnDm0Wl6g2Obf1Brg1xqmFAW44u1p2kr8yc/kNh87L2+y3p5qHd0hFV++ex7Fg5oSeow2lQ1lNwMbCFOgml1ddY9Ls+ZsRCBEbBsWD/gfd4wgBtLZBzokx2QueBh/sZrINtLLqXht8C05MpvTQS1m9G4J+sek12c1R6I/O2lcg9sbntKrclMBX1ZcSWh/dkWtG/fgKqYrLxHF9noPiHFTYUlq+5I0KDJUHle6CLb5dsWUrIBHwqI3rLQzABEBAAHCwF8EGAEIABMFAlQum8YJECq+6JslKSFPAhsMAADNYgf+MeBZIlXWbG1p99LNGJWwOyznqinhvj2FWTJAeBpWz+MT35enq+RG7jTziGW3UdvkojLFgMFFZFU34QXKRBOBwXVwXebOAdFyeO0thB7J7mt2esteJGNy5pEegWma97618ZUCOsBmKhfNGGxOfT0+x5qHLpb4X54neA7LxaF3jSBQTut/TTOZNVWscwM+w4hLLzB5Q/0RC6nmQQ03nCCqScQK8WfRohx/vRnXIDmHRsm4p8FJwGBZbT5clOVkon8Bj0Gkp83y9TfJX0CpGrwmbnuaWXPU4EI6+G14XHu3p9xwo3L2Bc8jli0+GVZ7SJCCRdJ+/66NvJYHIVzzbxlvkQ===7H5F\n\n    },\n    \nPhysical Good Contract\n: {\n        \nBlind_contractHash\n: \n544e7ddb8b5b7771303a9d45449b8de328d331b1c7cc473840017f1d67a35542\n,\n        \nCurrency\n: \nBitcoin\n,\n        \nPrice\n: \n0.01\n\n    }\n}\n\n\n\n\nAs per the standard process, the buyer forwards the contract to the notary who adds a third digital signature to the contract. However, the notary will not be able to determine the contents of the good being sold on OB. \nOpenBazaar\n client, exports and emails it as an attached \n.json\n file directly to Bob. Bob can then who imports it into the \nOpenBazaar\n client. Bob signs the contract and selects a notary.\n\n\n3.3 The \nOpenBazaar\n Application\n\n\nThe client/app enables the user to fulfill any desired role on the network (merchant, buyer, notary, arbiter). The UI/UX will likely vary on the type of trade to be conducted. \n\n\n3.4 Ratings, Reviews and Reputation\n\n\n3.4.1 Introduction\n\n\nIn this article we attempt to design a decentralised rating and review system for the sale of physical goods on the \nOpenBazaar\n network. Ratings and reviews are sometimes considered interchangeable with the challenge to create a global decentralised reputation system. For \nOpenBazaar\n, this is not the case as the system described here is:\n\n\n\n\nPerformance based\n\n\nMade on a per item basis\n\n\nNot applicable to other types of marketplaces built on the \nOpenBazaar\n platform\n\n\n\n\nDecentralised reputation refers to the overall trustworthiness of an identity within a network. In the future, decentralised reputation can be layered over \nOpenBazaar\n if and when it is ever developed. For ratings and reviews, they are strictly concerned with the merchant performance of that identity on the network. Both systems are theoretically compatible and need to be fully developed.\n\n\nRatings and reviews are defined in this article as:\n1. Ratings - scores on the behavior of the merchant, the quality of the item, and shipping time.\n\n2. Reviews - written summary of the trade experience with the merchant  \n\n\nAs mentioned earlier, ratings and reviews are made on a \nper trade\n basis.\n\n\n3.4.2 Ratings\n\n\n\n\nWho are we rating?\n\n\n\n\nThe merchant.\n\n\n\n\nWho is making the rating?\n\n\n\n\nThe buyer.\n\n\n\n\nWhy isn't there a rating of the buyer by the merchant?\n\n\n\n\nThere is very little for the buyer to get wrong in a trade other than failing to release funds from the escrow address, whereby the notary would have to step in to payout the merchant. As a result, a notary can develop internal systems to prevent or mitigate in advance this type of behavior. Also buyer reviews are not common in typical e-commerce platforms for physical goods.\n\n\nSide note:\n\n\nFor trades using mutually-assured destruction escrow addresses (i.e. 'MAD' 2-of-2 multisig), decentralised reputation is a critical metric for users to predict the likelihood of good behavior by the counterparty identity.\n\n\n3.4.2.1 Considerations with Decentralised Ratings\n\n\n\n\nSybil attacks\n - fake ratings made by an attacker using sockpuppets identities\n\n\nDistributed storage\n - ratings must be persistent publicly accessible and immutable\n\n\n\n\nSybil Attacks\n\n\n\n\nSybil attacks can generally be mitigated by increasing the cost in resources or time to perform an action\n\n\nIn \nOpenBazaar\n, this can be achieved in a couple of ways:\n\n\nDemonstrating a \nproof of trade\n\n\nShowing evidence of a trade by a triple-signed Ricardian contract (i.e. signed by merchant, buyer, and notary)\n\n\nBut this approach is not good for the privacy of the buyer\n\n\n\n\n\n\nNotary validation\n\n\nThe notary validates that an anonymous rating and review comes from a valid trade with the merchant\n\n\nPreserves the privacy of the buyer, provided the merchant or notary doesn't reveal this information\n\n\nAssumes that the notary is reputable to begin with\n\n\n\n\n\n\nEither approach does not fully eliminate the possibility of a Sybil attack\n\n\nRather it will significantly increase the cost to perform such an attack perhaps to the point where they are discouraged\n\n\n\n\nDistributed Storage\n\n\n\n\nRatings need to be stored somewhere that can be accessed by anyone at any time\n\n\nAs a result, these ratings cannot be hosted by the buyer or merchant themselves, which may omit negative ratings on top of having a transient presence on the network\n\n\nNotaries may host ratings as a service\n\n\nIf a prominent notary is taken offline, then the rating and review data may be lost forever\n\n\nNotary is hosting is encouraged, but decentralised and distributed redundancy should still be found\n\n\nOptions for persistent distributed storage:\n\n\nBitcoin blockchain\n\n\nBlockstore\n\n\nChainDB\n\n\nNamecoin or other blockchains\n\n\nSubspace\n\n\nOf the above options, the first three leverage the Bitcoin blockchain in different ways\n\n\nAll except the first option require other users to maintain a parallel network to Bitcoin, where the incentive to do so may or may not be clearly defined\n\n\nSpecific application and criticisms:\n\n\nBitcoin blockchain\n\n\nBlockchain bloat\n\n\nLimit to how much you can store in \nOP_RETURN\n\n\n\n\n\n\nOpenBazaar\n or Blockstore DHT\n\n\nThe rating/review data can be embedded into \nOP_RETURN\n in the blockchain, which can then be used as a reference in the \nOpenBazaar\n or Blockstore DHT for the full rating and review data\n\n\nIn the case of \nOpenBazaar\n, data embedded into the DHT can be made to confirm a certain specification to restrict space and counter some Sybil attack vectors\n\n\nThe incentive structure for running a node on the Blockstore DHT is unclear for now\n\n\nAlso unclear how robust and persistent data storage will be on either DHT, or how some Sybil-spam attacks will be mitigated\n\n\n\n\n\n\nChainDB\n\n\nParallel network must be run alongside \nOpenBazaar\n to push ratings into the database\n\n\nIn effect creating a crypto-asset just to make a rating: overkill\n\n\nProject is still a theory for now, nothing implemented or tested\n\n\n\n\n\n\nNamecoin (or another blockchain)\n\n\nRating data is not really permanently hosted, as data storage needs to be renewed periodically\n\n\nAs a result, reputations can disappear if not properly maintained\n\n\nReputation cannot have a statute of limitations!\n\n\nLimit to how much data you can store onto Namecoin\n\n\n\n\n\n\nSubspace\n\n\nStorage must be paid for on the Subspace network over time\n\n\nParallel network to Bitcoin and \nOpenBazaar\n\n\n\n\n\n\n\n\nThere is no magic bullet, any choice is associated with different trade-offs.\n\n\nIn our view, storing merchant ratings is best achieved by directly embedding the rating into the blockchain.\n\n\n3.4.2.2 Storing the Rating Score in the Blockchain\n\n\n\n\nThe rating score is embedded into the blockchain via \nOP_RETURN\n as an extra output of the \npayout transaction\n from the multisignature escrow address\n\n\nThis is the transaction that either release funds from multisig to the merchant (in a successful trade), or to the buyer as a refund (in an unsuccessful trade)\n\n\nThe rating score follows a standardised format with the following components:\n\n\nOpenBazaar\n rating tag\n\n\nConcise tag to identify a transaction containing an \nOpenBazaar\n rating\n\n\n\n\n\n\nMerchant rating score - [-1,0,1] overall rating of the merchant\n\n\n-1\n: Negative rating\n\n\n0\n: Neutral rating\n\n\n1\n: Positive rating\n\n\n\n\n\n\nItem rating score - [1-5; lowest-highest rating] for each category\n\n\nItem description\n: Was the item delivered in the condition and quality described in the contract?\n\n\nDelivery time\n: Was the item delivered within the time specified in the contract?\n\n\nCustomer experience\n: What was the interaction with the merchant like?\n\n\n\n\n\n\nGlobal unique identifier (GUID) of the merchant being rated\n\n\nItem unique identifier (IUID) of the item being sold\n\n\nSimilar to \nshort ID\n\n\n\n\n\n\n\n\nIn plain text, the rating score would look like this:\n\n\nOBR 1 5 5 5 b20c6947b11ac5bdb4b4338bc196df0b0f3f452d 23TplPdS\n\n(tag, merchant rating, item rating (description, delivery time, customer experience, merchant GUID, IUID)\n\n\nAs a hex value, it looks like this:\n\n\n4f4252202b31203520352035206232306336393437623131616335626462346234333338626331393664663062306633663435326420323354706c506453\n\n\nThe overall size of the rating score should be around \n62 bytes\n, well under the new 80 byte limit for \nOP_RETURN\n.\n\n\n3.4.2.3 Validating Legitimate Ratings\n\n\n\n\nHow do we determine whether a reputation score is valid, as anyone can create 100 transactions to give themselves a positive rating?\n\n\n\n\n\n\nThe notary is in the best position to validate whether a rating is from a valid \nOpenBazaar\n transaction\n\n\nThe buyer can add an extra output to the payout transaction sending a microtransaction to the notary\n\n\nThe address can be called the 'rating validation address'\n\n\nThe client can validate that the address is associated with the notary on the \nOpenBazaar\n network\n\n\nThe notary can host an open record of valid \nOpenBazaar\n transactions using \nOP_RETURN\n and \nTXID\n as the references (tied into Reviews, described below)\n\n\nBitcoin transactions that have tagged the notary erroneously can be ignored\n\n\nThese only enrich the notary as a transaction needs to be made to their address  \n\n\n\n\n3.4.3 Reviews\n\n\n\n\nWhere and how are reviews stored decentrally?\n\n\n\n\n\n\nOP_RETURN\n is not large enough to store reviews, unless they are restricted to being \n ~75 characters (which isn't very practical)\n\n\nA transaction with multiple \nOP_RETURN\n outputs are not standard, so you'd have to store the rating and review within a single \nOP_RETURN\n output\n\n\nEither the \nOpenBazaar\n or Blockstore DHT appears to be the best solution to store item reviews\n\n\nOP_RETURN\n hex containing the rating (described above) will be used as the reference hash\n\n\nA full outline of the Blockstore protocol can be \nfound here\n.\n\n\n\n\n\n(\nBlockstore Schematic\n)\n\n\n\n\nA similar model would be taken to store reviews within the \nOpenBazaar\n DHT with the following features:\n\n\nRestrictions on the maximum size of the written review\n\n\nEasier to embed within the process of executing a transaction on the network\n\n\nLeverages financial motivation of users on the network to indirectly incentivise nodes storing rating/review data in the DHT\n\n\n\n\nIrrespective of the DHT, the data structure for \nOpenBazaar\n rating and review may appear this way:\n\n\n{\n    \n_OpenBazaar__opreturn_ref\n: \n4f4252202b31203520352035206232306336393437623131616335626462346234333338626331393664663062306633663435326420323354706c506453\n,\n    \ntrade_ref\n:{\n        \nmerchant_guid\n: \nb20c6947b11ac5bdb4b4338bc196df0b0f3f452d\n,\n        \nnotary_guid\n: \nf4b5c505fd5abe9d9c631be65dfa52c9df34ae3c\n,\n        \ncontract_hash\n: \n3dbb901141c71351bcafee94274a9c67f0b3e9065531fbc7c6f9d0abd70c641a\n,\n        \nitem_code\n: \n23TplPdS\n\n    },\n    \nratings\n: {\n        \nmerchant_rating\n: 1,\n        \nitem_description\n: 5,\n        \ndelivery_time\n: 5,\n        \ncustomer_exp\n: 5\n    },\n    \nreview\n: \nThat bucket of nuts was amazing. Loved the free funnel!\n\n}\n\n\n\n\n\n\nAs mentioned earlier, it is important that the \nBuyer\n details are omitted from this rating to preserve their privacy as much as possible.\n\n\n\n\n3.4.4 Attack Vectors\n\n\n\n\nSybil rating attack\n\n\nA user creates multiple nodes to cover multiple merchant, buyer, and notaries to issue fake positive or negative ratings\n\n\nAn underlying assumption is that a few notaries will have a large market share, thus positive/negative ratings from an obscure notary may not be taken seriously\n\n\nBlockchain bloat\n\n\nThe use of \nOP_RETURN\n will contribute to blockchain bloat, resulting in nodes automatically pruning this data from the blockchain\n\n\nMay result in the increased trend towards centralisation\n\n\n\n\n\n\nHowever, \nOP_RETURN\n is such a valuable utility, we consider it unlikely that this data storage entry will be closed.\n\n\nWe already have a small centralisation risk by using Obelisk servers as block explorers.\n\n\n\n\n3.5 A Pseudonymous Trust System in \nOpenBazaar\n\n\n\n\nDionysis Zindros, National Technical University of Athens \n\n\n\n\n3.5.1 Keywords\n\n\npseudonymous anonymous web-of-trust identity trust bitcoin namecoin proof-of-burn timelock decentralized anonymous marketplace _OpenBazaar_\n\n\n3.5.2 Abstract\n\n\nWebs-of-trust historically have provided a setting for ensuring correct identity association with asymmetric cryptographic keys. Traditional webs-of-trust are not applicable to networks where anonymity is a desired benefit. We propose a pseudonymous web-of-trust where agents vote for the trust of others. By disclosing\nonly partial topological information, anonymity is maintained. An inductive multiplicative property allows propagation of trust through the network without\nfull disclosure.  We introduce additional global trust measures through proof-of-burn and proof-of-timelock to thwart Sybil attacks through an artificial cost of\nidentity creation and maintenance and to bootstrap the network. Existing blockchains are used to provide friendly names to identities, and the network\nis applied to a commercial setting to manage risk.  Finally, we highlight certain attacks that can compromise the trust of the network under certain assumptions.\n\n\n3.5.3 History\n\n\nWebs-of-trust are traditionally a means to verify ownership of encryption and signing keys by a particular individual whose real-world identity is known. The first widely deployed web-of-trust is the GPG/PGP web-of-trust [Zimmermann][Feisthammel]. In these webs-of-trust, a digital signature on a public key is employed to indicate a binding between a digital cryptographic key and an identity. Such a digital signature does not designate trust, but only signifies that a particular real-world individual is the owner of a digital key.\n\n\nWebs-of-trust have also been utilized for different purposes in various experimental settings. In Freenet [Clarke], it is used to guard against spam [Freenet WoT]. In a commercial setting, the Bitcoin OTC web-of-trust successfully attempts a centralized approach to establish a true trust network [OTC], contrasting identity-only verification webs-of-trust of the past.\n\n\n3.5.4 Introduction\n\n\nThe aim of our web-of-trust is to construct a means to measure trustworthiness between individuals in a commercial setting where goods can be exchanged between agents. The goal of such a measure is to limit, as much as possible, the risk of traders in an online decentralized anonymous marketplace. We are proposing a system to be used in production code as a module of \nOpenBazaar\n [\nOpenBazaar\n], a peer-to-peer decentralized anonymous marketplace that uses bitcoin [Nakamoto] to enable transactions.\n\n\nRisk management in \nOpenBazaar\n is based on two pillars: On one hand, Ricardian contracts are used to limit risk through mediators, surety bonds, and other means which can be encoded in contract format [Washington]. On the other hand, the identity system is used to establish trust towards individuals. In this paper, we introduce the latter and explore its underpinnings.\n\n\nTrust management in \nOpenBazaar\n is established through two different types of mutually supporting systems; projected trust and global trust. Projected trust is trust towards a particular individual which may be different for each user of the network; hence, trust is \"projected\" from a viewer onto a target. Global trust is trust towards a particular individual which is seen as the same from all members of the network. Projected trust is established through a pseudonymous partial knowledge web-of-trust, while global trust is established through proof-of-burn and proof-of-timelock\nmechanisms.\n\n\n3.5.5 Threat model\n\n\nThe identity system is threat modelled against various adversaries. We are particularly concerned about the malicious agents highlighted in this paragraph, with their respective abilities.\n\n\nFirst, we wish to guard against malicious agents within the network. If there are malicious buyers, sellers, or mediators, the goal is to disallow them from gaming the network and obtaining undeserved trust.\n\n\nSecond, we wish to guard against malicious developers of the software. If a developer tries to create a bad patch or influence the network, this should be detectable, and the honest agents should be able to thwart against such an attack by choosing not to upgrade by inspecting the code. The system must not rely on the good faith of developers; it is open source and decentralized.\n\n\nThird, we wish to guard against governments and powerful corporations that wish to game or shut down the network. These agents are not always modelled as rational, as their objectives may involve spending considerable amounts of money and processing power to game the system, with no obvious benefit within the system bounds. Their benefits may be legal, economical, or political, but cannot be simply modelled. Their power may be legal and can defeat possible single points-of-failure on the network.\n\n\nHowever, we assume that the malicious agents have limited power in the following areas. We assume that the bitcoin, namecoin, and tor networks are secure. We assume that malicious agents have limited processing power, bandwidth, monetary power and connectivity compared to the rest of the network. As long as malicious agents control a small portion of such power, the network must remain relatively secure.\n\n\nThe limited connectivity assumption requires additional explanation. We assume that a malicious agent will not be able to find and control a graph separator for any non-trivial induced graph between any two parties on the web-of-trust. This assumption is detailed in the sections below.\n\n\nOur trust metrics are heuristic; some trust deviation for malicious agents who try to game the system with a lot of power is acceptable. However, it is imperative that trust remains \"more or less\" unaffected by local decisions of agents, unless these decisions truly indicate trustworthiness or untrustworthiness. Trust should be primarily affected by trading behavior, and not by technical influence on the network.\n\n\n3.5.6 Web-of-trust\n\n\nThe \nOpenBazaar\n web-of-trust maintains three important factors: First, it maintains strict pseudonymity through anonymizing mechanisms; second, it establishes true trust instead of identity verification; and third, it is completely decentralized.\n\n\nThe \nOpenBazaar\n web-of-trust is used in a commercial setting. Trust is used to leverage commercial risk, which involves losing money. Traditional identity-verifying webs-of-trust such as GPG are in purpose agnostic about the trustworthiness of the web-of-trust participants. That type of web-of-trust verifies the identity of its members with varying certainty. However, it remains to the individual to associate trust with a particular person for a particular purpose: Whether they can be trusted with money, for example [GPG identity].\n\n\nIn \nOpenBazaar\n, the participants are inherently pseudonymous. In this setting, we wish to maintain an identity for each node. This identity is strictly distinct from the operator's real-world identity. While the operator may choose to disclose the association of their real-world identity with their pseudonymous node identity, the network gives certain assurances that such pseudonymity will not be broken. Hence, pseudonymity is closely related to anonymity: Pseudonymity allows the creation and maintenance of an online \"persona\" identity with a certain history; anonymity ensures the real-world identity of the persona operator remains unassociated with the persona. Hence, our goal is to provide both pseudonymity and anonymity.\n\n\nA true web-of-trust is a directed graph where nodes are individuals and edges signify trust relationships. In contrast to identity-verifying webs-of-trust, in a true web-of-trust, edges do not signify identity verification; they signify that the edge target can be trusted in a commercial setting. For example, when trust is given to a vendor, it signifies that the vendor is trustworthy and will not scam buyers by not delivering goods. When given to a mediator, it signifies that the mediator is trustworthy will resolve conflicts between transacting parties with a neutral point of view judgment. And when given to a buyer, it signifies that the buyer is trustworthy and will pay the money she owes. Clearly, trust is not symmetric.\n\n\nWhile identity verification is a concept successfully leveraged by individuals for secure communications and other transactions, it is meaningless to try to verify the identity of a pseudonymous entity, because a pseudonymous entity is the cryptographic key in and of itself, and therefore identity verification would constitute a tautology. It is therefore required to adopt a different meaning of \"trust\" than in a traditional setting of real-world identities. Hence, trust in this case signifies the trustworthiness of an individual in a commercial setting, their financial dependability, their reliability as mediators, and their credibility as trust issuers [1] [2].\n\n\n3.5.7 Pseudonymity\n\n\nEach node in \nOpenBazaar\n is identified by its GUID, which uniquely corresponds to an asymmetric ECDSA key pair. This GUID is the cryptographically secure hash of the public key. The anonymity goal is to ensure this GUID remains unassociated for any real-world identity-revealing information such as IP addresses. \n\n\nEach GUID is associated with a user-friendly name. These user-friendly names can be used as mnemonic names: If someone loses their trust network by reinstalling the node without first exporting, they know that certain agents remain trustworthy. Furthermore, user-friendly names are used in the trust bootstrapping procedure in which it becomes easier to peer-review that the bootstrapped nodes are the correct ones. Finally, user-friendly names can be exchanged between users out of the software usage scope; for example, a user can directly recommend a vendor by their user-friendly name to one of their friends via e-mail.\n\n\nTo maintain a cryptographically secure association between node GUIDs and user-friendly names, we utilize the Namecoin [Gilson] blockchain. A node can opt-in for a user-friendly name if they so choose. To create a user-friendly name for their GUID, they must register in the \"id/\" namecoin namespace [Namecoin ID] with their user-friendly name. For example, if one wishes to use the name \"dionyziz\", they must register the \"id/dionyziz\" name on Namecoin. The value of this registration is a JSON dictionary containing the key \"\nOpenBazaar\n\" which has the GUID as its value. As Namecoin ids are used for multiple purposes, this JSON may contain additional keys for other services. The namecoin blockchain ensures unforgeable cryptographic ownership of the identity. When a node broadcasts its information over the \nOpenBazaar\n network, they include their user-friendly name if it exists. If a node claims a user-friendly name, each client verifies its ownership by performing a lookup on the namecoin blockchain. If the lookup succeeds, the name is displayed on the \nOpenBazaar\n GUI and the information is relayed; otherwise the information is discarded.\n\n\nAs namecoin names can be transferred, this allows for participants to transfer their identity to other parties if they so desire; for example, a vendor can  transfer the ownership of their store by selling it.\n\n\n3.5.8 A naive solution\n\n\nThe most obvious and naive choice for a trust system in a commercial setting is a global voting system. While this solution is obviously flawed, it constitutes an important foundation upon which the next ideas are built. In this section we describe this idea in order to determine its flaws, which are solved in our next proposal.\n\n\nIn typical centralized systems, including eBay and Bitcoin OTC, there is a global rating which is determined as the sum of the individual ratings of others towards an individual. Attacks of fake ratings are taken care in the system in an ad hoc fashion which is enabled by the centralized nature of the system.\n\n\nIn decentralized systems, Sybil attacks [Douceur] make this situation particularly more challenging and without an easy way to resolve. Hence, this naive solution is undesirable. The solution to this problem is to first introduce a cost of identity creation and maintenance for global trust, and allow for the trust through edges to be projected. We explore these solutions below.\n\n\n3.5.9 Partial topological knowledge\n\n\nIt is a conclusive result in the literature that, by analyzing graph relationships between several nodes, given certain associations between nodes and real identities, it becomes possible to deduce the real identities behind other nodes. In particular, if an attacker is given only global topological information about a web-of-trust as well as some pseudonymous identity associations with real-world identities, they can deduce the real-world identities of other nodes [Narayanan]. Hence, by revealing the complete topology of the web-of-trust graph between pseudonymous identities, an important loss of anonymity arises. For this reason, we propose a web-of-trust with partial topological knowledge for each node. Under this notion, every node only has knowledge of its direct graph neighbourhood \u00e2\u20ac\u201c they are aware of the direct trust edges that begin from them and end in any target. This does not disclose any information about the total graph, as they are arbitrarily selected by each node. These ideas have been explored previously in the literature as friend-to-friend networks [Popescu].\n\n\n3.5.10 Trust association\n\n\nIn the pseudonymous [3] web-of-trust, each node indicates their trust towards other nodes that they understand are trustworthy. This understanding can come from real-life associations among friends who know the real identity of the pseudonymous entity. An indication of trust does not harm anonymity in this context. This understanding can also come from external recommendations about vendors using friendly names. For instance, under a threat model that trusts some centralized third parties, it is possible to establish trust in this manner. As an example, if a vendor is popular on eBay, and a buyer trusts eBay, the vendor can disclose their \nOpenBazaar\n user-friendly name on their eBay profile, and the buyer may opt to trust that identity directly.\n\n\nTrust is indicated as edges with a source, a target, and a weight. The weight is a floating-point number from -1 to 1, inclusive, with 0 indicating a neutral opinion, -1 indicating complete distrust, and 1 indicating complete trust. These can be displayed in a graphical user interface in a more simplistic manner; for example, the canonical client may opt to present a star-based interface for positive trust, and flagging for negative trust; or, alternatively, it may choose to present a simple thumbs-up and thumbs-down option, indicating discrete trust of 1 or -1 if employed, or 0 if not used [4]. These trust edges remain local and are not disclosed to third parties. We call the direct edges \"direct trust\" and the weights will be denoted as \nw(A, B)\n to indicate the direct trust from node \nA\n to node \nB\n.\n\n\n3.5.11 Trust transitivity\n\n\nAs topological knowledge is partial, we resolve the projected trust between nodes through induction. Let \nt(A, B)\n denote the projected trust as seen by node \nA\n towards node \nB\n. Projected trust is then defined as follows:\n\n\nt(A, B) = w(A, B), if w(A, B) is defined\nt(A, B) = a \u00ce\u00a3 w(A, C) t(C, B) / |N(A)|, for C in N(A), if w(A, B) is undefined and w(A, C) \n 0\n\n\n\n\nWhere:\n\n \nt(A, B)\n denotes the projected trust from A to B.\n\n \nw(A, B)\n denotes the direct trust from A to B.\n\n \nN(A)\n denotes the neighbourhood of A; the set of nodes to which A has direct trust edges.\n\n \n|N(A)|\n denotes the size of the neighbourhood of A.\n* \n\u00ce\u00b1\n is an attenuation factor which is constant throughout the network.\n\n\nThe meaning of the above equation is very simple: If Alice trusts Bob directly, then Alice's trust towards Bob is clear. If Alice does not trust Bob directly, then, since we wish to retain only partial topological knowledge, Alice can deduce how much to indirectly trust Bob from her friends. She asks her friends how much they trust Bob, directly or indirectly; the trust from each friend is then added together to produce the projected trust. However, the trust contributed by each friend is weighted based on the local direct trust towards them; if Alice trusts Charlie directly and Charlie trusts Bob (directly or indirectly) then the projected trust that Alice sees towards Bob is weighted based on her trust towards Charlie; for example, if Alice trusts Charlie a little, he's not allowed to vouch for Bob a lot. Finally, the projected trust is normalized based on the number of friends one has, so that it remains within the range from -1 to 1.\n\n\nThe condition \nw(A, C) \n 0\n is imposed so that negatively trusted neighbours are unable to vouch for their trust towards others \u00e2\u20ac\u201c otherwise they would be able to lie about their trust towards others if they knew they were negatively trusted and impose onto them the opposite trust from what they claim.\n\n\nThe attenuation factor \n\u00ce\u00b1\n is used to attenuate trust as it propagates through the network. Thereby, nodes further away from the source gain less trust if more hops are traversed. We recommend a network-wide parameter of \n\u00ce\u00b1 = 0.4\n as is used by Freenet, but this can be tweaked based on the network's needs.\n\n\nThis simple[5] algorithm assumes that trust is transitive; if Alice trusts Charlie and Charlie trusts Bob, then Alice trusts Bob[7]. This is a strong assumption and may not always hold in the real world. Nevertheless, we believe it constitutes a strong heuristic that allows a network to deduce trust with partial topological knowledge.\n\n\n3.5.12 A comparison to other webs-of-trust\n\n\nIt seems worthy to compare this approach to existing webs-of-trust to point out their differences. In contrast to GPG [GPG identity], our proposal maintains both anonymity and true trust. In contrast to Freenet, trust is used for commercial purposes and not just to fight spam. In contrast to Bitcoin OTC, the network is decentralized, the topology is only partially known, and the trust is only projected and not global.\n\n\nCertain services provide webs-of-trust in a centralized way, but they do not advertise them as such. eBay ratings provide webs-of-trust, but the topology is globally known and the platform is centralized. Facebook's social graph provides trust through friendships. Interestingly, Facebook's social graph allows partial topological knowledge depending on the privacy settings of the participants. However, centralization is still a problem. In centralized solutions, pseudonymous identities through user-friendly names can also be maintained without a blockchain. The simplicity of implementation benefit is also a strong one.\n\n\nCentralized solutions have the drawback of a single-point-of-failure. As one of the goals of \nOpenBazaar\n is to avoid Achilles' heels (single points of failure), centralized solutions become unacceptable. The purpose is, for instance, to eliminate the ability for government intervention in the web-of-trust through secret warrants served to the administrators of such a centralized system that may require the handover of private encryption and signing keys.\n\n\n3.5.13 Man-in-the-middle vendors\n\n\nThis framework is susceptible to a man-in-the-middle attack which is unavoidable in pseudonymous settings. The attack works as follows: A malicious agent wishes to gain trust as a vendor without really being a trustworthy vendor. They first create an \nOpenBazaar\n vendor identity. Next, they choose one other vendor that they want to impersonate. They subsequently replicate their product listing as their own. They also monitor the actual vendor's catalog for product changes, and they relay messages between buyers and the actual vendor when buyers message them. When a buyer purchases a product for them, the rogue vendor also forwards the purchase to the real vendor. Notice that this problem does not directly apply to mediators.\n\n\nIf, after the purchase, the buyer and seller rate each other positively, this rating will not impact the actual parties, but will only be reflected on the rogue vendor. Hence, the rogue vendor will gain trust as both a seller and a buyer without actually being either. This process can be automated. At a later time, the rogue vendor can use the man-in-the-middle position to read encrypted messages between buyers and sellers and may sacrifice their maliciously gained reputation to cheat on a desired buyer or seller. Continuous operation of such rogue nodes can undermine the network.\n\n\nIt is difficult to guard against such attacks. The question of whether someone \"really\" knows a pseudonymous vendor becomes philosophical; what does it mean to know someone who is pseudonymous to you? And if a man-in-the-middle vendor is always delivering goods, are they not also a trustworthy agent? It is recommended that users establish direct trust only with pseudonymous vendors whose real identity they already know, or have signals that the pseudonymous vendor is not being man-in-the-middled. The latter is difficult to establish, but may be possible through independent verification on different networks and a continued trustworthy history. If we assume that the delivery of products will not be intercepted, the product delivery itself may be used as a mechanism to include a physical copy of key fingerprints in order to establish that no man-in-the-middle is being present.\n\n\nNevertheless, negative trust is semantically a different notion from positive trust. Negative trust can be attached to vendors whose identity is unknown; if a man-in-the-middle behaves in an untrustworthy manner, it is imperative to rate them negatively. This distinction between positive and negative trust is made clear in the condition for \nw(A, C) \n 0\n to be positive in the equations above. It is a challenging problem to communicate this difference to the user via a clear user interface.\n\n\n3.5.14 Feedback\n\n\nFeedback can be given by buyers to vendors, by vendors to buyers, and by buyers and vendors to mediators in text form. Feedback is a piece of text from a particular source pertaining to a particular target. Keeping the above man-in-the-middle vendor attack in mind, it may in cases not make sense to rate vendors or buyers directly if their real identity is unknown by the rater, even if they trade fairly, unless they can establish an existing trust relationship towards them in order to at least determine their legitimacy.\n\n\nTo avoid fake feedback, feedback must only be relayed by the \nOpenBazaar\n client if it is from a node that has transacted with the target. Therefore, feedback must be digitally signed and include a reference to the transaction that took place \u00e2\u20ac\u201c the hash of the final Ricardian contract in question, as well as the bitcoin transaction where it was realized.\n\n\nHowever, given that transactions are free to execute, to avoid Sybil attacks from vendors or buyers who transact with themselves, feedback must only be trusted when it is given from parties that are already trusted using the total trust metric defined below. Otherwise, it must not be displayed or relayed.\n\n\n3.5.15 Bootstrapping the web-of-trust\n\n\nIt is hard to establish trust targeting a new node on the network with no web-of-trust connections to it. This issue is addressed in the Global Trust section. However, it is easier to allow new users entering the network to trust individuals who have established some trust through the web-of-trust. Bootstrapping trust is widespread practice in the literature [Clarke].\n\n\nThis bootstrap can be achieved by including a hard-coded set of \nOpenBazaar\n node key fingerprints that are known to be good in the distribution. At the beginning, these can be the \nOpenBazaar\n developers. It is crucial that the number of nodes included is wide so that no individual can influence the bootstrapped trust. Advanced users are advised to further diminish the weights of the direct edges to the bootstrap-trusted nodes and to include higher-weighted edges to people they physically trust.\n\n\nThe special bootstrapping nodes must be configured to always respond to trust queries, regardless of whether they trust the query initiator.\n\n\nThis practice in particularly useful to guard against illicit uses of the network, which have been experienced in similar, centralized but anonymous solutions [Barratt]. By ensuring the bootstrap-trusted nodes highly rate only non-illicit traders, it is expected that the network will promote legitimate uses of trade. While black market goods can still be traded, the user will be required to opt-in for such behavior by manually introducing trust to nodes who highly rate trusted black market vendors.\n\n\n3.5.16 Graph separator attack\n\n\nThe web-of-trust security strongly depends on the size of graph separators. Let us examine the trust as seen from a node \nA\n to a node \nB\n. Let \nG'\n be the graph induced from the web-of-trust graph \nG\n as follows: Take all the acyclic paths from \nA\n to \nB\n in \nG\n whose every non-final edge is positive. These contain nodes and edges. Remove all nodes and edges that are not included in any such path to construct graph \nG'\n. Then \nG'\n is the induced trust graph from \nA\n to \nB\n. An \n(A, B)\n separator is a set of nodes of \nG'\n which, if removed from the graph, make the nodes \nA\n and \nB\n disconnected.\n\n\nWe define an entity \"controlling\" a set of graph nodes as being able to arbitrarily manipulate the reported \nt\n and \nw\n functions when the controlled nodes are inquired about their trust beliefs.\n\n\nWe will prove the following theorem for any separator. The smallest separator, mentioned below, is simply easier to manipulate by a malicious party, as they are required to control a smaller set of nodes.\n\n\nTheorem\n: A malicious entity controlling the smallest \n(A, B)\n separator on the induced graph \nG'\n will be able to change a negative projected trust to a positive projected trust towards the target as seen on the original graph \nG\n.\n\n\nProof\n: Let \nS\n be any \n(A, B)\n separator on \nG'\n.\n\n\n\n\nSince the trust from \nA\n to \nB\n was originally negative, this means that \nA\n and \nB\n are connected on the induced graph \nG'\n. As the projected trust is negative, this means that there are direct negative edges in \nG'\n from some intermediate parties \nB1, B2, ..., Bn\n to \nB\n; these edges cannot be indirect, as indirect edges are not traversed for trust discovery.\n\n\nWe will show that the trust through any of \nBi\n can be manipulated to be positive. Indeed, take some arbitrary \nBi\n. Then there will exist some paths from \nA\n to \nB\n with \nCi\n as their penultimate node. Take some arbitrary path \nP_i,j\n from \nA\n to \nB\n through \nBi\n. We will show that this path can be manipulated to produce positive trust. Since \nS\n separates \nA\n and \nB\n, then there must exist some element \ns\n in \nS\n that is also in \nP_i,j\n. Since \ns\n is controlled by the malicious entity, they can modify their claimed direct trust towards \nB\n and set it to \n1\n. They can also completely ignore any indirect trust, including \nBi\n's opinion:\n\n\nw(s, B) = 1\n\n\n\n\nThrough this mechanism, every path can be manipulated through the control of \nS\n. Therefore, all paths ending in a negative edge can be eliminated. Since \nA\n and\n\nB\n were originally connected, they will remain connected through this trust manipulation. Finally, at least one path ending in a positive edge will exist.\nTherefore, since \nt(A, B)\n will be a sum of positive terms, \nA\n's projected trust towards \nB\n will be bounded from below as follows:\n\n\nt(A, B) \n= \u00ce\u00b1 t(A, s) / |N(s)|\n\n\n\n\nBut \nt(A, s)\n must be necessarily positive. Therefore, \nt(A, B)\n must also be positive on the induced graph. However, projected trust on \nG\n is only based on results on the \n(A, B)\n induced graph \nG'\n, and the value of \nt(A, B)\n will necessarily be the same as seen on \nG\n. QED.\n\n\nWe have shown that a determined attacker can manipulate trust if they control some separator on the network. Therefore, it is crucial to avoid hub nodes in the network, and especially the existence of trust through only non-disjoint paths. As the web-of-trust develops, it is important to form trust relationships that connect nodes from regions with long distance.\n\n\nThis result is expected; a separator of size 1 is essentially an Achilles' heel for the system. Such single-points-of-failure necessarily centralize the web-of-trust architecture and completely undermine the decentralized design.\n\n\n3.5.17 Topology detection through queries\n\n\nAs one of the web-of-trust goals is to disallow malicious agents to learn the global network topology, it is crucial that the default node configuration is to not respond to trust queries initiated by nodes they do not trust. If this mechanism is not employed, a malicious entity can query all known network nodes and eventually deduce the global network topology easily.\n\n\nThe exception to this is bootstrapping nodes, which, due to necessity, must be configured to answer all trust queries. Some \u00ce\u00b5-positive trust can be used as the minimum threshold of trust below which the canonical client does not respond to queries. To ensure queries are authenticated, imagine a query from \nA\n to \nC\n about whether \nB\n is trustworthy. The query must be signed with \nA\n's \nOpenBazaar\n private key to ensure topological information is not revealed to unauthorized parties asking for it. The query must be encrypted with \nC\n's \nOpenBazaar\n public key to ensure that nobody else can read it, even if the inquirer is authorised. Finally, the response must be signed with \nC\n's private key, to ensure that trust is not manipulated as it travels the network, and encrypted with \nA\n's public key, again to ensure topological confidentiality.\n\n\nIn this sense, most trust must necessarily be mutual. However, the topology of the graph still remains directed, as the trust weights can be different in either direction.\n\n\n3.5.18 Association with other identity systems\n\n\nIt is worthy to attempt an association of the web-of-trust network with other identity management systems. However, given the highlighted differences in the previous section, such an association would compromise some of the security assumptions of the model. It is therefore mandatory that interconnection with other networks is an opt-in option for users who wish to forfeit some of our security goals.\n\n\nAn interconnection with the GPG web-of-trust may be achieved by allowing \nOpenBazaar\n nodes to be associated with GPG keys. A particular \nOpenBazaar\n node can have a one-to-one association with a GPG identity through the following technical mechanism: The GPG identity can provide additive trust to the existing trust of the system. To indicate that a GPG key is associated with an \nOpenBazaar\n identity and that the GPG key owner wishes to transfer the GPG trust to an \nOpenBazaar\n node, the GPG key owner cryptographically signs a binding contract which contains the \nOpenBazaar\n GUID of the target node, and potentially a time frame for which the signature is valid. The GPG-signed contract can then be signed with the \nOpenBazaar\n cryptographic key to indicate that the \nOpenBazaar\n node operator authorizes GPG trust to be used for their node. The double signed contract can then be included in the metadata associated with the \nOpenBazaar\n node and distributed through the \nOpenBazaar\n distributed hash table. Each client can inter-process communicate with the GPG software instance installed on the same platform to obtain access to existing keys and signatures.\n\n\nNevertheless, it is advised not to include such an implementation in the canonical client, as traditional GPG webs-of-trust are identity-verifying, not trust-verifying, as explored in the section above. Furthermore, the GPG web-of-trust does not offer any assurances on pseudonymity. While it is possible to exchange GPG signatures anonymously, the GPG web-of-trust is typically based on global topological knowledge of the GPG graph and is distributed through public keyservers. If a user opts-in to interconnect with the GPG web-of-trust, they are forfeiting these benefits of the \nOpenBazaar\n network.\n\n\nAn interconnection with the Bitcoin OTC web-of-trust is also possible. Existing trust relationships can be imported to the \nOpenBazaar\n client manually through a file, or automatically downloaded from the Bitcoin OTC IRC bot dynamically upon request, as the Bitcoin OTC website is an insecure distribution channel and does not offer HTTPS. In the dynamic downloading case, the threat model is reduced to trusting the TLS IRC PKI, which is known to be attackable by powerful third parties [DigiNotar].\n\n\nThis web-of-trust has the benefit of being a true-trust web-of-trust, and has a history of support by the Bitcoin community. A double signature is again required to interconnect two identities. The GPG key associated with the Bitcoin OTC network is used to cryptographically sign a binding contract similar to the one described above, and the rest of the procedure is identical to GPG identity binding.\n\n\nIn this case, an Achilles' heel is introduced to the software, as the user is required to trust the Bitcoin OTC web-of-trust operator and the distribution operator, both of which identities can possibly be compromised by a malicious third party. The situation can be improved if the Bitcoin OTC operator begins GPG signing the trust network, or by requiring the Bitcoin OTC trust edges to include GPG signatures by the users involved. However, the topology of the network is again public, forfeiting pseudonymity requirements. Therefore, an implementation is again not advised for the canonical \nOpenBazaar\n client at this time.\n\n\nIf the user is not concerned with single-points-of-failure and centralization, the web-of-trust can be temporarily bootstrapped by binding identities to existing social networking services which include edges between identities as \"friendships\" or \"follows\". For example, the Twitter and Facebook networks can be used. Such bindings can be weighted with a low score in addition to existing scores as described in the Total Trust section below [6].\n\n\nFurther research is required to determine how such interconnections will impact the security of the network.\n\n\n3.5.19 Global trust\n\n\nIn addition to the projected trust system provided by the web-of-trust, it is desired to provide some global trust in the network. This serves to allow the network to function with nodes that need to receive trust, but are not associates with other users of the network, or wish to remain pseudonymous even to their friends. In addition, this allows to bootstrap the network for someone who wishes to use it without explicitly trusting any entities.\n\n\nGlobal trust mimics the trust given in real-world transactions towards vendors that have invested money in their business, something that can be physically verified. When a buyer visits a physical shop to purchase some item, they trust that the shop will still be there the next day in case their item is faulty; they do not expect the shop to disappear overnight. The reason for this expectation is that it would clearly be unprofitable for the vendor to open and close shops every day, as it costs money to establish a store, and the money needed to establish a store is more than the money a vendor could gain by selling a faulty product.\n\n\nSimilarly, hotels ask for the passport of their residents in order to be able to legally hold them accountable to limit financial risk. While it is possible to create counterfeit passports every other day, it is economically irrational to do so, as building a new identity is more costly than a couple of hotel nights.\n\n\nIn these situations, rational agents are economically incentivised not to cheat on transactions through physical verification of proof that it would be costly to forfeit their identity \u00e2\u20ac\u201c either to create a counterfeit passport or to shut down a physical store overnight. However, in a pseudonymous digital network, such mechanisms need to be established artificially. We start by exploring some approaches to the problem that do not meet our goal: Proof-of-donation and proof-to-miner. Subsequently, we introduce two mechanisms that solve the problem, proof-of-burn and proof-of-timelock, which are combined to form the global trust score.\n\n\nIn all schemes, the person wishing to create trust for a pseudonymous node pays a particular amount of money, which can be provably associated with the node in question. The differentiation comes from whom the payment is addressed to.\n\n\n3.5.20 Proof-of-donation\n\n\nIn a proof-of-donation (also called  \"proof-of-charity\" in the community) scheme, the pseudonym owner pays any desired amount to some organization, which is hopefully used for philanthropic or other non-profit purposes. The addresses of organizations that are allowed to receive donations would be hard-coded in the canonical \nOpenBazaar\n client and payments towards them would have been verified by direct bitcoin blockchain inspection by each client. A proof-of-donation first seems desirable, as money is transferred to organizations for good. One possible scenario could include funding the \nOpenBazaar\n project itself through this scheme.\n\n\nThe technical way to achieve proof-of-donation is to simply make a regular bitcoin transaction with a donation target as its output. The transaction must also include the GUID of the target \nOpenBazaar\n identity that the donation is used for.\n\n\nNevertheless, a proof-of-donation scheme is inadequate for our purposes, as it introduces an Achilles' heel. In particular, if a malicious agent is able to access the private cryptographic keys of one of the donation targets, they are able to game the system and manipulate trust arbitrarily. Compromising the private cryptographic keys can be achieved through various ways by powerful agents; for example, a secret warrant can be issued by a government ordering that the private keys are handed to the court.\n\n\nThis attack would work as follows: The malicious agent first generates a new \nOpenBazaar\n identity. Subsequently, they donate a small amount of bitcoin to the donation target organization they have compromised, including their \nOpenBazaar\n node as their target identity in the proof-of-donation, thereby gaining a certain amount of trust. They then use the private keys they control to give the money back to themselves, potentially through a certain number of intermediaries to avoid trackability. Finally, they repeat the process an arbitrary amount of times to gain any amount of trust desired, thereby gaming the system.\n\n\n3.5.21 Proof-to-miner\n\n\nIn a proof-to-miner scheme, the payment to create trust for an identity is paid to the miner that first confirms the bitcoin transaction which is the proof. This scheme initially seems desirable, as there is no single entity which can be compromised, and it incentivizes the network to mine more, thereby making bitcoin more secure and, in turn, \nOpenBazaar\n more secure.\n\n\nTechnically, proof-to-miner can be achieved by including an \nOP_TRUE\n in the output script of the transaction. While anyone is, in principle, able to spend the output of the given transaction, a miner is incentivized to only include their own spending in their confirmation. Alternatively, a 0-output bitcoin transaction can be made, so that all the inputs are given to the next miner as fees. Again it is important to include the GUID of the \nOpenBazaar\n identity in the transaction.\n\n\nUnfortunately, it is again possible to game this system. This attack would work as follows: The malicious agent first generates a new \nOpenBazaar\n identity. Subsequently, they make a proof-to-miner bitcoin transaction with any amount they desire, but they keep the transaction secret. They then perform regular bitcoin mining as usual, but include their secret proof-to-miner transaction in their block confirmation. Including an additional transaction does not increase the cost of mining; therefore this approach can be employed by existing rational miners. If they succeed in generating a block, they publish the secret transaction and they gain identity trust in the \nOpenBazaar\n network, and can use the money again in the same scheme to increase their trust arbitrarily. If they do not succeed in generating a block, they  keep the transaction secret and double-spend the money in a future transaction in the same scheme, until they are able to generate a block.\n\n\n3.5.22 Proof-of-burn\n\n\nProof-of-burn schemata have been in use by the cryptocurrency community in various settings [CounterParty]. In proof-of-burn, the payment to create trust for an identity is paid in a way that remains unspendable. Because it is unspendable, the system cannot be easily gamed as in the previous approaches.\n\n\nTechnically, proof-of-burn makes a regular bitcoin transaction including an OP_FALSE in the output script of the transaction. Again, the GUID of the \nOpenBazaar\n identity is included in the transaction to enable blockchain validation.\n\n\nProof-of-burn makes Sybil attacks infeasible, as it requires the attacker to create multiple high trust entities in the network, which is costly. In essence, this is equivalent to bitcoin's proof-of-work scheme and leverages the existing blockchain for the proof.\n\n\nGlobal trust based on proof-of-burn is based on how much money was burned to establish a particular identity. We use \ng(x)\n to denote the global trust derived from the fact that an amount \nx\n has been spent to establish the trust of the identity. We notice that \nx\n is the sum of all the amounts that has been provably burned for this particular identity. In addition, we notice that when a particular transaction output is used to establish trust towards some identity, this output is necessarily only associated with one identity. Verification of this proof can be done by the canonical \nOpenBazaar\n client through direct bitcoin blockchain inspection. \nx(B)\n is a function of the person whose proof-of-burn is to be determined, \nB\n. For simplicity, we will for now denote it as \nx\n.\n\n\nTo determine the numerical trust for the global trust associated with a particular identity, we work as follows. First, we calculate \nx\n as the sum of verified proof-of-burn amounts, in bitcoin, associated with the target identity.\n\n\nNext, we use the following function to evaluate the trust towards the identity:\n\n\ng(x) = 1 - (1/2)^(x/c)\n\n\n\n\nWhere:\n\n \nx\n denotes the amount spent for the proof-of-burn\n\n \ng\n denotes the global trust associated with the identity\n\n \nc\n is the \nbase trust cost* of the system\n\n\nThe \nbase trust cost\n is a hard-coded value in the canonical client which is the amount of money required to establish basic trust in the system. The value can be determined based on the current exchange rate of bitcoin, and can be updated in the future depending on the network's needs. As the value of bitcoin is expected to rise, it is expected that the value for \nc\n will drop. This has the additional side benefit that historically older accounts accumulate more trust as time goes by, as long as the price of bitcoin rises.\n\n\nTo clarify the rationale of the above equation, note its following values:\n\n \ng(0) = 0\n. A pseudonymous identity that has not provably burned coins has no global trust.\n\n \ng(c) = 1/2\n. A pseudonymous identity that has spent the base trust cost easily establishes a 50% global trust.\n* \nlim g(x) = 1\n, as \nx\n approaches infinity. Notice that it takes exponentially more money to approach 100% global trust.\n\n\nWe recommend that the base trust cost is a very small affordable amount for any human user. This will make the cost to enter the network small, but still avoid Sybil attacks. Such schemes have long been used in the literature as proof-of-work to avoid denial of service attacks [Back]. Proof-of-burning has the same benefits as proof-of-working, as it delegates the proof-of-work to the bitcoin blockchain.\n\n\n3.5.23 Proof-of-timelock\n\n\nWhile proof-of-burn is equivalent to proof-of-work [CounterParty], we propose an additional mechanism that can be used separately or in combination with proof-of-burn. In proof-of-timelock, the proof-of-stake ability of a blockchain is leveraged to produce a system that eliminates Sybil attacks without having to resort to the destruction of money or, equivalently, CPU power.\n\n\nIn proof-of-timelock, the individual interested in establishing trust towards a pseudonymous identity provably locks a specific amount of money in a transaction that gives the money back to them. This transaction has the property that it remains unexecuted for a specific predefined amount of time. However, the fact that the transaction is going to take place in the future, the exact amount, and the amount of time of the lock are publicly verifiable.\n\n\nWhile proof-of-burn allows identities to be created in a way that is costly to recreate, proof-of-timelock ensures it is impossible that an enormous amount of identities associated with one real-world individual can co-exist at a specific moment in time. Proof-of-timelock is a weaker insurance than proof-of-burn; proof-of-burn can be thought as proof-of-timelock, but for an infinite amount of time.\n\n\nWe predict that people will feel considerably more comfortable ensuring their identities through proof-of-timelock rather than proof of burn. The psychological burden associated with money destruction may not be an easy one to overcome.\n\n\nUnfortunately, it is currently impossible to create a technical mechanism for proof-of-timelock on the bitcoin blockchain. Bitcoin supports the \nnLockTime\n value at the protocol level. However, this mechanism is not currently honoured by running nodes [nLockTime] and the transaction will not be broadcast in a way that is verifiable.\n\n\nA Turing-complete blockchain such as Ethereum [Wood] allows an implementation of this mechanism. Nevertheless, we are reluctant in using this scheme, as Turing-complete blockchains are yet to be proven feasible in practice and may pose problems in terms of scalability, performance, and fees.\n\n\nAs such, we recommend proof-of-timelock as an alternative mechanism, but further research is needed to conclude whether it is feasible as an underlying mechanism for a decentralized anonymous market.\n\n\n3.5.24 Total trust\n\n\nBased on the projected and global trust metrics presented above, we propose the following measure as the total trust towards a network node:\n\n\ns(A, B) = (1/2) * t(A, B) + (1/2) * g(x(B))\n\n\n\n\nThe projected and global trusts are added together to produce the total trust as seen from \nA\n to \nB\n. The weights used here are 50% for each, but it is advised to tweak these weights based on empirical evidence during development. For advanced users, the weights can be customizable.\n\n\nThe total trust can then be displayed in the user interface of the node of user \nA\n when she is viewing the profile of user \nB\n. Additional interface elements that are possible to include can be the exact amount of money spent in the proof-of-burn scheme, as well as the direct links yielding the cumulative projected trust for the particular target through induction.\n\n\n3.5.24 Conclusion\n\n\nWe have introduced a new mechanism to allow for fully pseudonymous webs-of trust. The web-of-trust is developed in a way that allows conveying true trust and not simple identity verification. Furthermore, anonymity is preserved through only partial topological disclosure. The notion of graph distance is maintained through an attenuation factor. The web-of-trust is designed to be used in a commercial setting, where trust is an indispensable tool for trade.\n\n\nThe web-of-trust is bootstrapped through trust to a seed set of nodes, which requires the user to explicitly opt-in if they wish to trade illicitly.\n\n\nIntroduction to the trust system is obtained through global trust, which is weighted along with projected trust. Global trust is achieved through a proof-of-burn mechanism, and an alternative proof-of-timelock mechanism is explored. Together, these mechanisms allow a calculation of total trust between nodes.\n\n\nIn parallel with our proposals, we illustrated security concerns on mechanisms that are not appropriate for such an implementation, such as proof-of-donation and proof-to-miner, and we developed an attack on the web-of-trust through\ngraph separator control.\n\n\nOverall, this pseudonymous trust system can be used in a commercial setting such as \nOpenBazaar\n. It is strengthened when supported by Ricardian contracts\nto create binding agreements between parties through the security of the Bitcoin blockchain and should not be used alone.\n\n\n3.5.25 Notes\n\n\n\n\n\n\nIt may be meaningful to distinguish trustworthiness of a pseudonymous individual in different roles; for example, a person who is a trustworthy\n   merchant may not be a trustworthy judge. Hence, trust to buy from a person may be different from trust to mediate. However, for now, we are assuming\n   that this trust is the same under our projection mechanism.\n\n\n\n\n\n\nGPG distinguishes between trusting the identity binding between a real-world individual and a key and the trust directly given to an individual\n   as far as they are concerned about \nsigning\n other keys. In a similar setting as blurring the trust between different roles, we consider these to be the same.\n   In the \nOpenBazaar\n web-of-trust, trust is an intuitive concept and there need to be no formal rules followed when trust is given to others. The every-day\n   statement \"I trust this person\" corresponds to actually giving trust to an individual. This is in contrast to the GPG web-of-trust in which signing keys\n   requires a certain procedure of identity verification with which individuals may not be familiar with, and hence this differentiation is in order.\n\n\n\n\n\n\nThe use of the word \"pseudonymous\" as a qualifier of the web-of-trust is mistaken. The web-of-trust itself is not pseudonymous, nor are the edges,\n   in the sense that there is no pseudonym associated with the web-of-trust or the edges themselves. The web-of-trust and edges are \"pseudonymious\"; that is, related\n   to the concept of pseudonymity. However, the word pseudonymous is more understood in the literature, and we are opting for its use in this context,\n   while understanding this subtle distinction.\n\n\n\n\n\n\nWe do not distinguish between uncertainty of trust and certainty in neutral trust as other authors [J\u00c3\u00b8sang]. It may be helpful to employ such distinction\n   in future versions of the web-of-trust.\n\n\n\n\n\n\nThis algorithm is a draft. Please leave your comment on potential attacks and vulnerabilities it may have. It seems too simplistic to be able to work in\n   the real world and may need considerable tweaks.\n\n\n\n\n\n\nThe author strongly advises against such interconnections. The threat model of the \nOpenBazaar\n network is completely forfeited if such trust relationships\n   are used. Centralized, non-anonymous services for trade such as eBay are widespread and can be used in \nOpenBazaar\n's stead if these assurances are of no\n   concern to the user.\n\n\n\n\n\n\nThis simple transitivity scheme is flawed and it must be reworked. Currently, trust is impossible to calculate if cycles exist in the network graph. As\n   the topology is only partially known, it is not trivial to detect cycles. Furthermore, basic cycle detection mechanisms used in routing protocols may\n   easily compromise the anonymity of the network by revealing non-local topological information. The formulae to deduce trust must be reworked to take\n   this important issue into consideration. It may be possible to avoid cycle detection and employ a mechanism which converges to the actual trust with good\n   probability if some randomness factor is used to decide responding to queries whose answer is not known.\n\n\n\n\n\n\n3.5.26 References\n\n\n\n\nP.R. Zimmermann. The Of\u00ef\u00ac\u0081cial PGP User\u00e2\u20ac\u2122s Guide. MIT Press, 1995\n\n\nPatrick Feisthammel, 7 Oct 2004, http://www.rubin.ch/pgp/weboftrust.en.html\n\n\nOpenBazaar\n: http://\nOpenBazaar\n.org/\n\n\nSatoshi Nakamoto, Bitcoin: A Peer-to-Peer Electronic Cash System, 2008\n\n\nSanchez Washington, 23 June 2014, https://github.com/\nOpenBazaar\n/\nOpenBazaar\n/wiki/Contracts-and-Listings\n\n\nI. Clarke, O. Sandberg, B. Wiley, and T.W. Hong. Freenet: A distributed anonymous information storage and retrieval system. In Proc. Int. Work- shop on Design Issues in Anonymity and Unobservability, volume 2009 of LNCS, pages 46\u00e2\u20ac\u201c66, 2001.\n\n\nFreenet WoT: https://wiki.freenetproject.org/Web_of_Trust\n\n\nOTC: http://wiki.bitcoin-otc.com/wiki/OTC_Rating_System\n\n\nGPG identity: http://lists.gnupg.org/pipermail/gnupg-users/2013-March/046364.html\n\n\nGilson, David (2013-06-18). \"What are Namecoins and .bit domains?\". CoinDesk, http://www.coindesk.com/what-are-namecoins-and-bit-domains/\n\n\nNamecoin ID: https://wiki.namecoin.info/?title=Identity\n\n\nA. Narayanan, V. Shmatikov, De-anonymizing Social Networks, IEEE Security and Privacy 2009.\n\n\nJ. Douceur. The Sybil Attack. In Proc. of the IPTPS \u00e2\u20ac\u212202 Workshop, Mar. 2002.\n\n\nA. J\u00c3\u00b8sang. An Algebra for Assessing Trust in Certification Chains. Proceedings of the Network and Distributed Systems Security Symposium, 1999.\n\n\nCounterParty, Why proof-of-burn: https://www.counterparty.co/why-proof-of-burn/\n\n\nA. Back, Hashcash - A Denial of Service Counter-Measure, Aug. 2002.\n\n\nnTimeLock: https://bitcointalk.org/index.php?topic=321550.0\n\n\nG. Wood. Ethereum: A Secure Decentralised Generalised Transaction Ledger.\n\n\nJ. R. Prins, DigiNotar Certificate Authority breach, Sep. 2011.\n\n\nM. J. Barratt, Silk Road: eBay for drugs. Addiction, Volume 107, Issue 3, page 683, Mar. 2012.\n\n\nB.C. Popescu, B. Crispo, and A.S. Tanenbaum. \"Safe and Private Data Sharing with Turtle: Friends Team-Up and Beat the System.\" In 12th International Workshop on Security Protocols, Cambridge, UK, April 2004.\n\n\n\n\n3.6 Dispute Resolution\n\n\nMultisignature escrow addresses are the key to managing risk for trades between peers on \nOpenBazaar\n. These addresses mathematically ensure that a single agent is incapable of stealing funds from an address using their private key alone. Furthermore, multisignature addresses can be designed to accommodate several parties within a voting pool as \npreviously discussed\n. \n\n\nIn a typical 2-of-3 multisignature transaction in \nOpenBazaar\n, the first two signers are the buyer and seller. The third signature is a 'trusted' third party who has the power to sign a transaction in combination with the buyer or seller in the event of an accident, key theft, or dispute. The third party signer, a notary, in \nOpenBazaar\n also acts as the third signer of Ricardian contracts for the sale of goods and services, to leverage the many strengths of \ntriple-entry accounting\n particularly for settling \ndisputes\n.\n\n\nDispute resolution is a fundamental component to success of \nOpenBazaar\n. As the goal of \nOpenBazaar\n is to create a decentralised and censorship-resistant marketplace, State-mediated dispute resolution is out of the question. Thus, our model should follow non-State services, also known as alternative dispute resolution (ADR). \n\n\nMany forms of ADR exist in the \nlegacy\n marketplace. ADR aims to avoid final adjudication by the State in order to reduce overall costs, save time, and potentially prevent an adversarial outcome between the contending parties after the dispute has been resolved. Rather, \nOpenBazaar\n aims to create a marketplace for ADR, alongside goods and services, to settle disputes between peers. \n\n\n3.6.1 Dispute Resolution\n\n\n3.6.1.1 Notaries\n\n\nThus far the proposals for various market implementations within \nOpenBazaar\n (and other decentralised marketplace proposals) have assumed that a third party in a transaction (i.e. the third signer in a 2-of-3 multisignature escrow address) performs two roles:\n\n\n\n\nNotarising\n contracts and transactions \n\n\nArbitrating\n disputes between two or more in parties\n\n\n\n\nThe \nnotary\n aspect of their service includes digitally signing contracts and transactions in the event of a dispute between the buyer and seller. The arbitration aspect of their role is to decide who the winning side is in a dispute between the buyer and seller. However, this overlapping notary-arbiter model is prone to several weaknesses:\n\n\n\n\nThere is a conflict of interest between the arbiter and disputing parties\n\n\nThere is a practical burden on a single agent to perform all of these tasks simultaneously for potentially dozens/hundreds of transactions/trades\n\n\nThere is a slight disincentive for the buyer and seller to carefully choose a suitable arbiter prior to a dispute arising \n\n\n\n\nA possible solution is to divide these services, to be provided by separate agents: \n\n\n\n\nA notary, to focus exclusively on signing Ricardian contracts and creating/signing multisignature transactions\n\n\nAn arbiter, dispute resolution as an independent and exclusive service on \nOpenBazaar\n\n\n\n\nPamela Morgan expands on this concept:\n\n\n\n\nThe ideal third party will be professional, knowledgeable about the technology and security protocols, and independent of business operations. Why are these characteristics important? Professionalism is important because the third party will be your backup to access funds in the event a signer becomes unavailable. \n\n\nThe third party should be reliable, available upon short notice, communicative, and responsive. The third party must be knowledgeable in the technology, have a thorough understanding of how to use multi-signature accounts, and best practices for security \u00e2\u20ac\u201c such as offline key generation and storage. \n\n\nThey should understand principles of conflict of interest and be able to maintain a distance from operations, so that they will not be subject to coercion or other undue influence. A disinterested third party also provides investors, employees, and the community with an increased level of protection thereby justifying an increased confidence in operations as evidence of good corporate governance.\n\n\n\n\nSource:\n \nMultisignature accounts for corporate governance\n\n\n3.6.1.2 Notary Responsibilities\n\n\nA notary's responsibilities include:\n\n\n\n\nDigitally signing the Ricardian contract between two or more parties\n\n\nThe notary serves as a witness to the contract and independent auditor as per triple-entry accounting\n\n\nThe notary offers the final bitcoin pubkey for the creation of the multisignature escrow address\n\n\n\n\n\n\nReleasing funds from a multisignature escrow address as a result of:\n\n\nA late-signing buyer (\nlazy transactions\n)\n\n\nA dispute between the buyer and seller, releasing funds according to the arbiter's judgement\n\n\nSelecting a tie-breaking arbiter for an arbiter pool\n\n\n'Hand-holding' new users in using \nOpenBazaar\n for the first time\n\n\n\n\nGiven the role that notaries will play in exchanges in \nOpenBazaar\n, \ntheir services would need to be available essentially 24/7\n. Of the responsibilities listed above, the first can be entirely \nautomated\n and capped according to the notary's preference. The second responsibility requires the attention of the notary in order to sign the transactions. After successfully receiving the good, the buyer may be delayed in signing a transaction to release funds from the multisignature escrow address to the seller. In this case, the notary is involved to release these funds. In the event of a dispute, the notary prepares a transaction according to the arbiter's judgement for signing in combination with the 'winning' party. Of course, the notary doesn't need to fulfill this role if both the buyer and seller perform this function themselves. If a dispute arises where an arbitration pool is requested from the buyer and seller, the notary can be called upon to choose a tie-breaking arbiter according to their preference prior to the \nhearing\n of the dispute. Finally, the notary can offer to supervise new users through a transaction, explaining each step of the process and troubleshooting potential issues.\n\n\n3.6.1.2 Notary Fees\n\n\nWhile the market will ultimately determine the fee structure, we assume that automated services such as contract signing (role #1 above) would be offered freely, subsidised by other services requiring the notary's directly involvement. As for the appropriate value of the fee, we expect it to be equal to or lesser than a typical bitcoin transaction fee. This fee can either be paid as a refundable deposit from both parties, or deducted from the price of the good being sold.\n\n\n3.6.1.3 Advantages and Challenges\n\n\nThere are several advantages to using a dedicated notary service for 3rd party contract and transaction signing. Firstly, and perhaps most importantly, there is an effective separation between the power to release funds from a multisignature escrow address, and dispute resolution between two parties. As a result, notary and arbitration services can be independently assessed and rated for their efficiency. \n\n\nSecondly, there is a market created for notary services for the timely fulfilment of their obligations in a trade, especially triple-signing Ricardian contracts. In the event of a dispute, the final cost in fees and time is slightly higher than in a role where notary and arbitration services overlap within a single agent. However, the increase in dispute costs may incentivise greater care in arranging exchanges within \nOpenBazaar\n to specifically avoid these fees.\n\n\n3.6.1.4 Practical Implementation into \nOpenBazaar\n\n\nHow will the separation of notary and arbitration services into separate agents affect the end-user experience and overall mechanics of a transactions? Firstly, similar to the original model, the end-user begins their \nOpenBazaar\n experience by selecting preferred notary service providers for all future transactions. In selecting a notary, a user should prefer services that are automated with 24 hour response time when 'human interaction' is required.\n\n\nIdeally, the client will select a notary service provider that is present on both the buyer and seller's 'preferred list', or an overlapping notary up to X degrees of freedom from the buyer and seller's Web of trust. For example, the buyer has a friend who shares a preference for a notary with the seller's friend of a friend (2 degrees of freedom). Failing this, the client can either randomly select a notary agent based on their reputation metrics. \n\n\nFinally, while it is the recommendation of this author for users to separate notaries from arbiters, the client will not impose this model. As the notary/arbitration market is a specialised service for \nOpenBazaar\n, users will be able to browse through various users offering notary and/or arbitration services. Ultimately the market will pick an approach that seems to be the most efficient.\n\n\n3.6.1.5 Notary Inclusion into Contracts\n\n\nWe predict that there will be two ways notaries will be included into the contract formation process. The first way is \noffline\n, which requires the contract to be digitally signed and passed along to the next party after inclusion of new information (demonstrated below):\n\n\n\n\nThis process is somewhat tedious, but necessary to establish the proper authentication chain to avoid possible attacks/disputes. Alternatively, \nonline\n contract formation requires all parties to be online simulatneously to rapidly establish the terms of the contract and attach their digital signatures only once:\n\n\n\n\nIt is important to note that the client isn't required to create these contracts, which can be made externally and imported into the client to streamline the digital signing and notary/arbitration process.\n\n\n3.6.2 Negotiation\n\n\nFor dispute resolution between peers on \nOpenBazaar\n, the two major forms of ADR to be implemented are:\n\n\n\n\nNegotiation:\n where both parties directly arrive at a resolution of a dispute.\n\n\nArbitration:\n where a third party is invited to resolve a dispute\n\n\n\n\nNegotiation\n is a preferable approach to dispute resolution as it does not involve intervention by a third party, not even the notary of the transaction. Negotiation between the buyer and seller seeks to resolve the conflict by discourse between the parties. The transfer of bitcoins from the multisignature address can be accomplished by both parties after a successful negotiation.\n\n\nNegotiation on \nOpenBazaar\n can take place over any communication platform inside or outside of the client software. The client currently supports encrypted communication from node to node, and also integrates BitMessage. For real-time negotiation, platforms such as CryptoCat may be an easy to use messaging platform that supports off-the-record encryption. In addition, the DarkWallet client also supports private communication channels. \n\n\nThe details and outcome of a negotiation do not need to be written down or formalised in any way. Every effort should be made by both parties to resolve disputes between themselves to preserve favorable reputations and avoid arbitration fees. However, not every dispute can be resolved peer to peer negotiation; an outside party is required to arbitrate.\n\n\n3.6.3 Arbitration\n\n\nArbitration\n involves an independent party, made up of a single or multiple agents, reviewing the details of a dispute and deciding where the fair allocation of property titles should be awarded to. As explored previously, the arbitrating agent shouldn't be the third signer in a multisignature escrow address. Rather, the tgiry signer (a notary) should be a neutral party that can be contractually subject to the outcome of the arbiter's decision.\n\n\n3.6.3.1 Arbiter Selection\n\n\nIn the event of a dispute between a buyer and seller, if negotiation has failed to resolve the dispute, an arbiter must be employed. To begin the process, both parties inform the notary that a dispute has arisen. The notary's primary role in the event of a dispute is to create and sign a transaction according to the judgement of the arbiter(s). However, this function can be performed by the disputing parties in order to avoid notary fees. \n\n\nThere are three possible ways for an appropriate arbiter to be selected:\n\n\n\n\nClient matching\n\n\nAs with notaries, the client attempts to select an arbiter automatically based upon the 'preferred arbiter' list from both parties.\n\n\nAn extention of this concept is to the use the web of trust to find overlapping preferred arbiters from the buyer/seller's trusted and/or positively rates peers\n\n\nConsensus selection\n\n\nThe buyer and seller agree upon an arbiter based on their examination of the arbitration market\n\n\nIn the event that the buyer or seller is \ninactive\n in making a decision within a reasonable amount of time (which may need to be stated in the contract), the notary and the other \nactive\n party can select an arbiter.\n\n\nIf the buyer and seller cannot agree on a single arbiter that they both prefer, they can form an arbitration pool make up of the buyer, seller, and notary's preferred arbiter.\n\n\nNotary-Arbiter servicing\n\n\nHere, the notary and the arbiter are the same agent. As this agent is selected before the exchange takes place, the notary-arbiter simple proceeds to judge the dispute immediately.\n\n\nWhile this is the most efficient approach in terms of time, there are drawbacks to this approach we are explained above. However, users will not be restricted from excercising this option.\n\n\n\n\n3.6.3.2 Arbitration Contracts\n\n\nAs arbitration is fundamentally a service, a service contract can be drawn up between all interested parties that will need to include:\n\n\n\n\nArbiter's details\n\n\nGUID\n\n\nBitcoin pubkey\n\n\nPGP key\n\n\nFee\n\n\n\n\n\n\nDispute details\n\n\nNonce of the contract in dispute\n\n\nHash of the contract\n\n\nEstimate arbitration time\n\n\n\n\n\n\nDispute claims from both parties\n\n\nDecision conditions (applicable only to multiple arbiters, indicating if a majority or consensus decision is required) \n\n\n\n\nFormatted correctly, the arbitration contract may look something like this:\n\n\n{\n        \narbiter\n: {\n            \narbiter_GUID\n: \ndrwasho_abc123\n,\n            \narbiter_BTCuncompressedpubkey\n: \n04d09c05c84a73344ee3b03d03fdf4a6bff2b1c4e15ffeb7403b91b0815be8b03ee50ade6b28d27aabc7c56cf679f74acec3d8e760595f5878caec12edd32938ea\n,\n            \narbiter_pgp\n: [\n                \nmQENBFMKYTUBCADD6kIAjBlJ2Q0NEd97aia0BSBibO1C2lVemWig5cNATeob1McWoEo3QznZ\n,\n                \nf9LaRsuo+ryyqEeXx4p9m9FG/TDeeZvOaiSo2Pg5MtgAdxwJK3ZQ+6b6DjrfYRZplD4qVsQd\n,\n                \n/GhxDr733NBdTpfvE8rYrAttNeU8P9vZpJuU+ESSRNb8Sbgfrym2i7xeMP6/xnyfTunXti7x\n,\n                \nsJzFkGIoF1dc+HntP2b9oSy1y0P5n0FdGt7IaEEtN1AZwAfFJ0obSlXiVdWdPwyambAzj93V\n,\n                \nXD//KxXyxAHjqFD+sdqDzqxBTZ/MC/YCMU1UQ5hvWsx7FRqubLhyMB1p1ycvdnX6nqdTABEB\n,\n                \nAAG0KFNhbSBQYXR0ZXJzb24gPHNhbUBzYW11ZWxycGF0dGVyc29uLmNvbT6JATkEEwECACMF\n,\n                \nAlMKYTUCGwMHCwkIBwMCAQYVCAIJCgsEFgIDAQIeAQIXgAAKCRCI0UoG/7KgjtsoCACaiEO1\n,\n                \n0u22dGDSuBLvFV2UIhyh2Cj9+KEGe7qHlohwbFHqwT+/6B7P5CmBggqL0abMqEqkUCOxk7g4\n,\n                \nrBdCSMeqGe+7VdsXVnNAlEYGd6AqQxfcIPV/r/E0qCUQcJbBxjO8rr7il2o4b98AeU8GB6qU\n,\n                \n8YFblsCv0KlFRYhDngHVfRMpvsTm9NMcm99P6n/UVn2mrhk50EqJMHB7T+b4n0fWQj5M9340\n,\n                \nlmVWnn1i1w3+yDC0v4yLS9UuSuL3UsnC6CP7XPA2z5iVqoTH+i0WguGgGgyUpPIQexGm/IKx\n,\n                \nb5Bb/rRsKpcXtdIT7Vr5US4XtCBe9zWvSWyEAz3llYA/OGx+uQENBFMKYTUBCACToWiWhjWI\n,\n                \naJM1pD0TXTk/IbNWZPhJpfAiYy3EsYwckvAY1Q6yOSWydakimpr+93oBpJpY9y6Aj8GDBNyv\n,\n                \neaAomK2jYV0cqxhOzAH2UgSLptFQawxwR/8+rLz5KDZQGT8SNNDwV7FtFT4ubzeH+ILugnJp\n,\n                \nJo83IjoU5Vg3g1d75Tc38KLd8VbwZ52QcxNaoxoEHQoF8Q+2rRNPwRRr5NX71jQPA6Pxuzpd\n,\n                \nmTogQ5gIA3Zr4cDrxAAPCZAo/bDJF3jhd9lpZXFudlyCwbRNF3qfG9L0S7ES+zIfXFWmryQb\n,\n                \nCUg4pcRfbaN9OY6GWzjOLOzXzEehd7sNbNCKEP3tWqbjABEBAAGJAR8EGAECAAkFAlMKYTUC\n,\n                \nGwwACgkQiNFKBv+yoI4kHQgAiz6mQz0GeOfB60ILe1R/9fkYtejFTTb5P8H/w19S2WM+gFyb\n,\n                \nR4BTg0OSN0YhcmzIzgy1zF1/J+noxEVUS5zbGLytVgLFECyOinFZUc0A/b0nuermvKFuF7GJ\n,\n                \nQcV3Gz1HCNrfaWK7LW5hGTdQZtaFtEmla6Wk+v1MHWWW2K9Ez0KXCqrK5b0Oji2MUh8LRh2p\n,\n                \nmmciki/R0pXXMYMJpeb9IPwOlbIqm8xT4Z93rPYyOwmgii1Dy3Gop/Ofq4yU7GGxjjALR+JM\n,\n                \nyebij7AblNTCSgWXm/QV+ejZH0bR91FbtjdVKoFo6qrL04zuRbBFm2wHv+CYNKwRR2PPcCB/\n,\n                \ndQaGpQ==\n,\n                \n=IB1U\n\n            ],\n            \narbiter_fee\n: \n0.01 BTC\n\n        },\n        \narbitration\n: {\n            \ncontract_nonce\n: \n01\n,\n            \ncontract_hash\n: \nf22fee51c64dd36afb158769d6dacf95a982777997f96f5e9a25b97da64d9457\n,\n            \ncontract_arbitration_time\n: \n7 days\n\n        },\n        \nbuyer_claim\n: [\n            \nThe seller never sent me the turtles!\n\n        ],\n        \nseller+claim\n: [\n            \nThe buyer hasn't paid for the wee turtles even though I sent them.\n\n        ]\n}\n\n\n\n\nThe digital signatures of the buyer, seller, and notary are appended to the contract and sent to the arbiter for their approval. If the arbiter agrees to hear the case, he/she appends their details and digital signature to the contract, sending back to the interested parties. The case can now be considered open, with the format and presentation of the evidence to be arranged between them.\n\n\n3.6.3.3 Arbitration Market and Precedents\n\n\nThe \narbitration market\n is a dedicated marketplace featured in the client listing agents offering notary and/or arbitration services in \nOpenBazaar\n. These agents will list the duties they perform, the estimated response-time for their services, and fees. In addition to these, arbitration service providers can also display a list \nprecedents\n that they themselves have established or other arbiters have published in order to give an expectation of service \nprocess\n and \nquality\n.\n\n\nPrecedents\n, the legal standards formed due the application of consistent rulings on similar cases, will become a key performance predictor and indicator of an arbiter's capacity to fairly administer justice on \nOpenBazaar\n. It is difficult to predict how precents will be formatted, but some considerations are most likely:\n\n\n\n\nConsent\n\n\nBoth parties must consent to their case being published as a precedent for the arbiter\n\n\nAnonymisation of disputing parties\n\n\nAll traces of the identities (pseudonyms, bitcoin addresses etc) of the disputing parties is \nremoved\n\n\nDispute cateogrisation\n\n\nWhat type of dispute is \nclaimed\n (i.e. failure to deliver physical good, failure to perform service etc)\n\n\nProcess\n\n\nThe objective of a precedent is to demonstrate to potential clients the process they can expect from the arbiter (i.e. what evidence needs to be provided, timeframes, what the outcomes are if a party fails to demonstrate necessary evidence, what consitutes as evidence)\n\n\nProcess for strictly anonymous transactions will be important for certain types of sensitive transactions\n\n\nResolution\n\n\nIf the arbiter rules in favor of the buyer or seller (a specific claim), what was the outcome of the resolution in terms of payment\n\n\nFees\n\n\nWhat were the fees for resolving this type of dispute? \n\n\nIf the dispute took extra time than expected, what was charged?\n\n\n\n\nArbiters may offer their services \npro-bono\n in order to build up a case history of precedents to market themselves for future employment. Alternatively, new arbiters may cite \nprecedents\n from other well-known and highly rated arbiters to indicate a pattern arbitration for similar cases. Ultimately, through the use of precedents and an arbitration market, a polycentric merchant law is expected to arise in \nOpenBazaar\n.\n\n\n3.6.3.4 Appeals\n\n\nA later innovation of market arbitration can be the formation of an appeals process to resolving disputes. Prior to the initial round of arbitration, both parties can agree to establish a 3-tier appeal process. Each arbitration tier may consist of arbiters of increasing quality and/or quantity, and therefore price. In the outcome of a first-tier arbitration decision that leaves the losing party dissatisfied, the losing party may appeal to the second-tier arbiter. The contract and dispute records are all forwarded to the second-tier arbiter who first determines whether the case should be heard. Consideration of the case may attract a fee, which could be paid by the appealer. If the case is heard, a second round of arbitration begins; if not, the standing judgement of the first arbiter remains and the notary prepare and signs a transaction accordingly.", 
            "title": "Protocol"
        }, 
        {
            "location": "/03.-OpenBazaar-Protocol/#3-openbazaar-protocol", 
            "text": "OpenBazaar  is a marketplace platform compromised of the following components:   The Kademlia-style Peer-to-Peer (P2P) Network  The network architecture governing peer-to-peer connections      The Trade Protocol  The fundamental rules governing the type trade between peers    The Application  How a users access the network and executes the trades protocol     Users download the  OpenBazaar   application  to access the  network  and execute the  trade protocol  with other users on the network.", 
            "title": "3. OpenBazaar Protocol"
        }, 
        {
            "location": "/03.-OpenBazaar-Protocol/#31-peer-to-peer-network", 
            "text": "The  OpenBazaar  network is the backbone of the project. It is designed to be scalable, supporting millions of people finding goods and services offered by fellow peers, who could be located anywhere in the world.  The Kademlia-style architecture theoretically supports this vision, and has a track-record of connecting millions of peers as demonstrated by BitTorrent. The chief engineering difficulty of building  OpenBazaar  historically has been implementing this component.  The Kademlia-style P2P network is older and distinct from the Bitcoin blockchain. To create a node, a network identity or global unique identifier (GUID) needs to be created. Firstly, random number is generated between a range of 1 to 2 256  to obtain a  private key . From this key, a  public key  is derived.  The  public key  is then digitally signed with the the  private key  (self-signature) and  sha256  hashed. The resulting hex is then further hashed by  RIPEMD160  to generate the  GUID . This GUID is impossible to forge or spoof without compromising the private key, and is the basis of a node's pseudonymous identity on the network.  GUID = RIPEMD160(SHA256(self_signed pubkey))  The GUID is mapped to your dynamic IP address and port on a  distributed hash table  (DHT). This is not a distributed ledger like the blockchain, but a local 'map' of GUIDs (peers) and their IP addresses in your 'bucket' ('bucket' defined as similar GUIDs within a defined range). Each peer's DHT allows anyone on the network to find the location of a specific peer in only a few hops (i.e. think 6 degrees of separation). On this basis, peers can connect to each other to exchange data.  The network allows for a GUID to be associated with more than just an IP address, but other attribute-value pairs that can be searched (i.e. decentralized search).  In  OpenBazaar , the DHT lists GUID hashes of contracts that the a peer (GUID) is selling and keywords that are associated with that contract. This enables other peers to decentrally search the network for specific contracts by their hash and/or keyword, compiling a list of relevant hits and their corresponding GUIDs. The user can then select the peer and directly access their store to commence trade.  The overall features of this architecture are:   Minimal resources are required to run an  OpenBazaar  node (relative to Bitcoin)  Scalable to millions of users  Uses Bitcoin only as a currency for decentralised trade  Contracts (listings) are hosted on the merchant's node.   Enables rapid listings, as distributed consensus isn't required to list goods/services   This design does have some drawbacks, which third party services (or future technological innovation) can address:   Nodes are required to remain online for listings to be accessible by peers  The project is exploring using the DHT as a temporary cache for listing contracts and placing  asynchronous encrypted orders    Nodes can be targeted (hackers, spammers, governments) on the basis of what they are listing, although the marketplace and protocol remain censorship-resistant   Presently, both TCP/IP AND rUDP are used to to make connections between peers. The rUDP-based connections tend to overcome NATs (network address translation) and other obstacles preventing peers from accessing the network, and thus avoiding complicated port forwarding requirements beyond the skills of most users. This also means that these connections cannot be easily used through TOR to obfuscate the true IP address of a node.", 
            "title": "3.1 Peer-to-Peer Network"
        }, 
        {
            "location": "/03.-OpenBazaar-Protocol/#32-trade-protocol", 
            "text": "The trade protocol describes a set of fundamental rules that govern decentralised trade on  OpenBazaar  between two or more trading partners.  The protocol is made up of two major sub-components:   Bitcoin Payments and Escrow  Payment with Bitcoin  Escrow selection    Ricardian Contracts  Formalizes the terms of trade     3.2.1 Bitcoin Payments and Escrow  All trade over  OpenBazaar   exclusively uses Bitcoin .  OpenBazaar  will support four payment options with Bitcoin:   Direct payment  Alice transfers bitcoin to Bob in a simple payment    Double-deposit 'MAD' escrow  Alice and Bob create a 2-of-2 multisignature escrow address  Alice and Bob need to agree to release funds from that address    Notary escrow  Alice, Bob, and Charlie (a third party 'notary') create a 2-of-3 multisignature escrow address  Two members of this party are required to release funds from the address    Notary pooled escrow  Alice, Bob, and others (multiple third party notaries) create a n-of-m multisignature escrow address  Multiple parties from the  pool  of notaries are required to release funds from the address      Hierachical Deterministic Wallets  Irrespective of the payment option selected, individual bitcoin pubkeys are derived from a  hierarchical deterministic (HD) seed  to avoid address reuse and efficiently manage the signing keys. All signing keys can be recovered from the seed if the node is inadvertently destroyed or lost.   Of the three payments options,  direct payment  and  MAD escrow  have  no enforceable dispute resolution  mechanism and zero redundancy if keys are lost. However, their use in  OpenBazaar  is appropriate in following scenarios:   Direct payment  from well-established merchants and with high reputation; presumption is that the buyer possesses a high degree of trust to the merchant.  MAD escrow  between two parties who want to transact directly without any third party involvement, but do not share a high degree of trust. These users are assumed to have an above average level of technical skill to manage risks such as key loss or incapacitation, and who have a firm understanding of the implications of a failed trade.   Multisignature transactions used are for  notary escrow  payments, which enable an innovative form of  multiparty escrow . Rather than funds being send into the exclusive custody of a trusted third party, funds are sent to an address that are not in the exclusive custody of any individual. The multisignature address is generated by comining the unique bitcoin pubkeys from the merchant, buyer, and notary. To release funds, cooperation (in the form of digital signatures) between two of the three participants is required. A higher level description of multisignature transactions can be found in the  Bitcoin documentation . The overall effect of this system avoids a situation where one party in the trade can run away with the funds. The third party keyholder in these payments is called a  notary . The role of a notary is further described below.  3.2.1.1 Altcoins  While theoretically other crypto-currencies can be supported in the core code, provided they follow a similar specification to Bitcoin multisignature transactions, altcoin implementations will not be pursed. Third party services (e.g. Shapeshift.io) can be used to either:   1) Convert altcoins into bitcoin to fund the multiparty escrow address\n2) Convert bitcoins to altcoins when funds are released from multiparty escrow.  In this model, Bitcoin is being used as the 'backend' transactional currency, while altcoins are used as an onramp and/or offramp from Bitcoin escrow via these exchanges.  3.2.1.2 Fiat Payments  Similar to altcoins, fiat payments may be supported using third party services to convert fiat currencies into Bitcoin to fund multisignature escrow addresses, or automatically convert bitcoin payout funds to fiat currency of the merchant's choice.   Role of Third Party Exchanges", 
            "title": "3.2 Trade Protocol"
        }, 
        {
            "location": "/03.-OpenBazaar-Protocol/#322-ricardian-contracts", 
            "text": "A  Ricardian Contract  can be defined as a single document that is  a)  a contract offered by an issuer to holders,  b)  for a valuable right held by holders, and managed by the issuer,  c)  easily readable by people (like a contract on paper),  d)  readable by programs (parsable like a database),  e)  digitally signed,  f)  carries the keys and server information, and  g)  allied with a unique and secure identifier.  - Ian Grigg   Ricardian contracts (RC) are digital documents that record an agreement between multiple parties, which are signed and cryptographically verified, and formatted to be human and machine-readable. The one-way hash of RC establish a tamper-proof receipt of the terms and conditions of a trade, which eliminates potential disputes that may arise from hearsay claims between counterparties.  To be 'machine readable', the terms and conditions are formatted in JSON with a hierarchy of attribute-value pairs: the contract schema. As there are multiple types of trade that  OpenBazaar  aims to support, each will have its own contract schema. Common to all schemas are four modules:   Metadata module  ID module  Trade module  Ledger module   Ricardian contracts in  OpenBazaar  will typically have one metadata, trade and ledger module. Multiple ID modules are required to represent each party in the trade (at least 1 merchant, buyer, and notary).  3.2.2.1 Metadata module  The  metadata module  is the header of the RC and informs users and the app what type of trade will take place and the period of time the contract is valid.   3.2.2.2 ID module  The  ID module  contains the necessary identifying data for a peer on the network. It will contain the following types of ID:   Network ID (minimum ID required for a trade)  GUID (global unique identifier)  Unique network identifier  One GUID per node on the network     Bitcoin pubkey  Used to create/sign multisignature escrow address  Generated from HD seed  One key per contract    PGP pubkey  Used to sign contracts  Establishes a 'mobile' identity   Multiple nodes can provably belong to 1 PGP key      Passcard ID   Passcard  - Digital identity as per the 'Blockchain Name System'  Links to email and other communication channels  Verified links to social networking platforms      Legally accessible ID   Contact details that are verified by a third party (think certificate authorities), which basically verifies that this identity is legally accessible in the event of some dispute that needs to be resolved in court      For the purposes a basic trade, only the  pseudonymous identity  is required. Unlike traditional e-commerce platforms, neither the  meatspace  or  legally accessible  identities are required for trade. This point is as much about maintaining privacy as it is about supporting trade for jurisdictions that lack infrastructure to support ID verification.   3.2.2.3 Trade module  The  trade module  contains the necessary semantic data to define the good or service to be traded for bitcoin. The structure of this module will vary depending on the type of good or service to be traded. As a result, we will pursue community engagement to evolve categories, standards and templates.  3.2.2.4 Ledger module  The  ledger module  of the Ricardian contract traces the various stages of the trade between the parties involved. The structure of the ledger will dictate the  signing order . The ledger module is read by the client/app, which enforces signing and forwarding of the contract to the next appropriate party. The final product is a contract that has a completed signing order and transaction history to act as a tamper-proof  trade receipt . The structure of the ledger module will also vary according to the type of good and service to be traded for bitcoin.   The ledger is formatted according to the step-by-step stages where data and signatures are required from each participating party. As a platform, users will be able to design custom Ricardian contracts with unique signing orders to support new types of markets.   3.2.2.5 Example of a full contract  {\n     01_merchant : {\n         01_listing : {\n             01_metadata : {\n                 01_obcv :  ,\n                 02_expiry :  ,\n                 03_category :  physical good ,\n                 04_category_sub :  fixed price ,\n                 05_order_flow : [\n                     merchant ,\n                     buyer ,\n                     merchant ,\n                     buyer \n                ]\n            },\n             02_id : {\n                 01_guid :  ,\n                 02_pubkeys : {\n                     bitcoin :  ,\n                     pgp :  \n                },\n                 03_handle :  ,\n                 04_passcard :  ,\n                 05_contact : {\n                     bitmessage :  ,\n                     email :  ,\n                     subspace :  \n                },\n                 06_role :  merchant \n            },\n             03_item : {\n                 01_title :  ,\n                 02_description :  ,\n                 03_condition :  ,\n                 04_price : {\n                     bitcoin : 0\n                },\n                 05_shipping : {\n                     est_delivery :  ,\n                     region :  \n                },\n                 06_images : {\n                     image_hashes : [\n                         ,\n                         ,\n                         ,\n                         ,\n                         \n                    ],\n                     image_urls : [\n                         ,\n                         ,\n                         ,\n                         ,\n                         \n                    ]\n                },\n                 07_keywords : [\n                     keyword1 ,\n                     keyword2 \n                ]\n            },\n             04_notary : {\n                 01_guid :  ,\n                 02_pubkeys : {\n                     pgp :  ,\n                     pubkey :  xxx ,\n                     pubkey_selfsig :  XXX \n                },\n                 03_handle :  ,\n                 04_passcard :  \n            }\n        },\n         02_signatures : {\n             bitcoin :  ,\n             pgp :  \n        }\n    },\n     02_buyer : {\n         02_order : {\n             01_id : {\n                 01_guid :  ,\n                 02_pubkeys : {\n                     bitcoin :  ,\n                     pgp :  \n                },\n                 03_handle :  ,\n                 04_passcard :  ,\n                 05_contact : {\n                     bitmessage :  ,\n                     email :  ,\n                     subspace :  \n                },\n                 06_role :  buyer \n            },\n             02_item : {\n                 01_semantics : {},\n                 02_shipping_address :  \n            },\n             03_multisignature : {\n                 01_chaincode :  ,\n                 02_multisignature_address :  ,\n                 03_redemption_script :  ,\n                 04_txid :  \n            }\n        },\n         02_signatures : {\n             bitcoin :  ,\n             pgp :  \n        }\n    },\n     03_merchant : {\n         01_shipped : {\n             01_shipping : {\n                 01_tracking_id :  ,\n                 02_shipper :  ,\n                 03_payout : {\n                     01_payout_address :  ,\n                     02_signed_tx :  \n                }\n            }\n        },\n         02_signatures : {\n             bitcoin :  ,\n             pgp :  \n        }\n    },\n     04_buyer : {\n         01_delivery : {\n             01_item : {\n                 01_received : true,\n                 02_dispute : false\n            },\n             02_payout : {\n                 01_signed_tx :  ,\n                 02_txid :  \n            },\n             03_rating : {\n                 01_rate_merchant :  ,\n                 02_rate_item :  ,\n                 03_rate_item_description :  ,\n                 04_rate_shipping :  ,\n                 05_rate_customer_service :  ,\n                 06_feedback :  \n            }\n        },\n         02_signatures : {\n             bitcoin :  ,\n             pgp :  \n        }\n    }\n}  Note: future articles will breakdown the component parts of the contract and how they should be used.  Within the  ledger  section of the contract, the  signing order  is divided into several stages. Each stage immediately identifies the party responsible for filling the empty data fields. The user signs the contract and forwards it to the next user in the ledger. The user won't be required to manually send it to the user in the ledger. Rather, the client will verify the signatures first before sending the signed contract to the next party. In a loose sense, this enables  OpenBazaar  Ricardian contracts to adopt some 'smart' characteristics.  An abstraction of the signing order:   The  signing order  should be defined in the structure of the JSON contract.  3.2.3 Notaries  {{Insert something here about notaries}}  3.2.3.1 Voting Pools  Consider a typical exchange between two parties with an arbiter mediating the transaction, where a 2-of-3 multisignature address is generated. The buyer in this exchange sends bitcoins to the multisignature address, to be released upon the pre-agreed conditions with the seller. While seller or arbiter alone cannot steal these funds, there remains a non-zero risk of collusion between them to defraud the buyer. Unfortunately, soley relying upon reputation systems is not an adequate solution this problem, no matter how well designed. An effective strategy is to minimise the risk of collusion by adding more arbiters to the mix, a  voting pool . A majority vote by the pool of arbiters makes it more difficult for a corrupted arbiter to defraud the transaction, and is thus a favorable means of managing risk for high value exchanges in  OpenBazaar .  Voting pools  in  OpenBazaar  would be created from the list of  preferred arbiters  from the buyer and seller's profile. In the case of an uneven number of arbiters within the pool, the benefit of the doubt goes to chance with the client randomly selecting a well-ranked arbiter. The total size of voting pool is limited to the  maximum number  of parties in a multisignature transaction on the Bitcoin network. An important element in forming a  voting pool  is to prevent the risk of a 'sore loser attack', where the multisignature transaction is constructed without the possiblity of the seller and the arbiters recovering the funds if the buyer fails to initiate the transaction, after receiving a good or losing a bet for example.  Notary pools decrease the overall risk of collusion and increase the redunancy of transactions, a multisignature escrow address is made up of several additional parties on top of the  merchant  and  buyer . For example, an 8-of-15 multisignature escrow address can be created made up of:   3 notaries selected by the  merchant    3 notaries selected by the  buyer  1 notary selected at random  4 keys from the  merchant  4 keys from the  buyer   Signatures from 8 keys are required to release funds from the multisignature escrow address. If the  merchant  and  buyer  have any reason to doubt the pool, they can move the keys to a different multisignature address. If there is a dispute, a majority of signatures is required in combination with one of the parties to release funds from the address. No single party can steal the funds, and the likelihood of collusion is reduced with more parties involved.  Notary pools can be designed according to the 'Lucas Algorithim':   Two traders, Alice and Bob, require equal number (\"n\") of keys, as you do not know a priori who will win the trade (or bet). In general, Alice needs \"n\" keys, Bob needs \"n\" keys, and the jury needs \"2n - 1\" keys. The majority of 2n - 1 is always n. In the simplest case, Alice has one key, Bob has one key, and the jury size (2x1 - 1) is one (i.e., the arbiter decides with Alice or with Bob). In the above example, n = 4. Alice has 4 keys, Bob has 4 keys, and the jury size = (2x4 - 1) = 7. The \"best of 7\" is of course 4 (= n). The total number of keys is 4n - 1 = 15. The multisig is therefore 8 of 15, which is achieved with Bob + Alice, or Alice + voting pool (majority thereof), or Bob + voting pool (majority thereof). These numbers should work with any integer n   0.   Interaction of the notary pool with the arbiter is managed over the  OpenBazaar  application:   The notary pool will received a digitally signed  ruling  from the arbiter. The  ruling  can be  blinded  from the notaries (i.e. encrypted with the public keys of the  merchant  and  buyer ), to maintain the privacy of both parties (discussed in more detail below). Aside from the arbitration notes, the ruling will also contain an unsigned bitcoin transaction with:   Input:  the multisignature escrow address  Output_1:  the winning party from arbitration  Output_2:  notary fee  Output_3:  arbiter fee   In more complex settlements, where both parties receive a portion of the funds, additional outputs are added to the transaction. The bitcoin transaction is digitally signed by either both parties, or the winning party with the notary pool and broadcast to the Bitcoin network.  3.2.3.2 Accredited Notaries  Even with a notary pool, the question remains how users will choose notaries within  OpenBazaar ? The most direct way is for users to access the storefront of other nodes in the network, select the 'services' tab and manually add them to their list of preferred notaries. Users can also search for nodes on the network that they wish to add on their list. These approach however, assume that the user already knowns what node to trust as a notary.  One approach is for notaries to be  accredited  by a voluntary private orgaisation, which creates some open standards for notaries to voluntarily subject themselves to in order to earn an 'endorsement badge'. These open standards may include:   The notary node has an up-time of  22 hours per day  Communication response times are   12 hours  Notaries issue a surety bond held in a multisignature address by the accreditation organisation   This approach is a form of self-regulation, whereby accreditation is earned after demonstrating compliance. The accrediting organisation can also hold the surety bond in the event that an accredited notary defrauds a client. In this scenario, a corrupt notary is excluded from the organisation, their surety bond is forfeit (perhaps used to compensate a defrauded member), and they lose their public accreditation with the association. A notary may choose to become accredited from several such organisations to bootstrap trust.  Technically this can be achieved by the private organisation keep a public record of accredited notaries, digitally signed, that a notary can link to within their 'notary description' field within the client.  From a user's perspective, they can search and filter potential notaries according to the presence or absence of accreditation by various organisations. Of course this does not restrict users from finding and using unaccredited notaries that they prefer.  3.2.3.3 Contract Blinding  Data fields within the Ricardian contract can be hashed prior to forwarding to the notary for their digital signature. Nearly all data fields can be hashed with exception to the bitcoin pubkeys necessary to create a multisignature address. Hashing is preferable to encryption with the buyer or seller's public key as the data fields can be easily verified by an arbiter in the event of a dispute, rather than going through additional decryption steps. The goal is to create an immutable record of the product details of the contract while obfuscating them.  3.2.3.4 Example  For example, imagine that Alice wants to sell an item to Bob that she should not like the notary to be aware of. The  unblinded  contract that both Alice and Bob see is shown below:  {\n     _OpenBazaar_ Contract : {\n         OBCv :  0.1 ,\n         Category :  Physical good ,\n         Sub-category, :  Ask price: negotiable ,\n         Nonce :  01 ,\n         Expiration :  2014-06-29 12:00:00 \n    },\n     Seller : {\n         NymID :  abc123 ,\n         NodeID :  Alice ,\n         BTCuncompressedpubkey :  044448c02963b8f5ba1b8f7019a03b57c80b993313c37b464866efbf61c37098440bcdcc88bedf7f1e9c201e294cf3c064d39e372692a0568c01565b838e06af0b ,\n         PGPpublicKey :  xsBNBFQtSk0BB/98EG2qpRRVJUZ0tjwbT88bzjeJl7rhPRWzewvjZDMjjDK0Q9p2q8xm21g1BAgsNV6fqyM8cpnosT6/jYur3h1c+l5YAAWTGw1LYZ44rArMFZ9yq9XuiKH0NEv5xko1+AAKdMnev1ZbU87iRR5YbQXqWCzS2/M+CZ3cY2d/WpJO50zlhofsC1gprtLaBuRmiFaboEjvj/i+a14BvkpmQhhdFlsVSUkUPKUS96hHQfYkY6uJGNC1SCAISaTJAXTMIgIjDRc0/tORAPqi0NrcCfAZJVQuMKBYrqA5acL2cFnehmIYGaCQpexqpV5Lme2jhiFk8/4Fjtl88kqjBUey2tcdABEBAAHNGkJsdWhoYXVhaGEgPGxhbGFAbGFsYS5jb20+wsByBBABCAAmBQJULUpeBgsJCAcDAgkQwltegB4kwqAEFQgCCgMWAgECGwMCHgEAAKvcB/wPLNVWm6iipqKO4hoY45Kxey23uEjVIqHAfNn5J+RkmKnYhEtAn/Q98flh6v7qnTi/GMvP1kbeGdIBob7S6X7z75ZUEIF72Q76qFI7BmuDme2RuKn/xyXRuQuTH0LD/EhPMGQiSjni5kW8ht1g2GpqFQiBKFMmhC4fwSgBQNXLCeDjYK8JvS5RsxLpfcCrvfWJEqjClwjnzXZySjFtZ3qjyry2CLxcPmiprVW7N9D/xJ1KWx3E+dK0zNiqrtxynlv2ZzfgXdu12WGs1YlAt0M1YAcKOSVtUC8iiyRvZYvgFUsuoYNZLDZhRw7PSua4FidYHZnPxMmt2H1ftVqMM9xGzsBNBFQtSl4BB/9wASUgKisYaE0iwp07R1z4Vp0zN/hO77RPV0QPsGcsjmefy1/bl6391pcMAuL7sLvDNXj91bA6SQ50rel2P12YbSvLGgcRpPoxPccQ4myHYOl0tVR4fJcLCyWDmOnz5rGSctZZhAUJ3FaTkeQd3pgzDtdD7M8hZ1GFwMnsw36IUDuyTRo450kNzZV/y9Ai7rjqqjZ86n6h74dp5cUB/w8FVBxAZaFbZYDYPSAsV+ja5CMxasgDhNZwukjRGX3MR/nJNNM+Oy684mi+iAe7ZEcR4m2fDHo/B7oJSTmSfqO21sK9v/K4lRDmJkPYJDpxUMlB/k+ksAgrjehA2h240NFPABEBAAHCwF8EGAEIABMFAlQtSnYJEMJbXoAeJMKgAhsMAADBWAf9Fqj98anrvWlsbtBFwbFu6LF8uNTrtoHNnFfTMOjIR6+ccTIDeMiOOKhEWkZa7VroS3hJXY9Ps0DGjUXQZ5nP0L4IeZOF5+Oj8SPQX+uJfyZ/Ewq/4lpD/DNz9AWyPkDTFLxUfEFJ9kTm1Uue3cV1KKtqeptaFuIL1l7tgaDOi2nxdVq/C937QAiXY6wEUcocaXUOSaWyWjEoiXA7tBRXrp3gxFFs6hl5ECW5gxFymITVm2WlNeHm6Jn9v786bp0Umz8K5+TcPWu08duuOBDw0qAN6g2alt4Cb0IDOOhxmKenIuEHg3RyhCwQwUOpMLlZXxpTWjUzWZOTLEvR9zciXA===28tV \n    },\n     Physical Good Contract : {\n         ItemName :  Little House on the Prairie DVD Anthology ,\n         Currency :  Bitcoin ,\n         Price :  0.01 ,\n         Description : [\n             The entire collection. \n        ],\n         Delivery : {\n             Country :  USA ,\n             Region :  All States ,\n             EstimatedDelivery :  13 days after triple-signing ,\n             PostagePrice :  Included in the item price \n        }\n    }\n}  Bob accesses the contract via the  OpenBazaar  client for signing. However, as both Alice and Bob want to maintain privacy in their transaction, Bob  blinds  the transaction first before sending it to the notary.  Contract blinding requires the following steps to take place:   Bob hashes the original seed contract  Bob prepares a  blinded  double-signed contract  This contract includes the hash of the original seed contract from (1). The purpose of this hash to provide an immutable reference to what Alice and Bob are actually trading.   An example of the blinded contract:  {\n     _OpenBazaar_ Contract : {\n         OBCv :  0.1 ,\n         Category :  Physical good ,\n         Sub-category, :  Ask price: negotiable ,\n         Nonce :  01 ,\n         Expiration :  2014-06-29 12:00:00 \n    },\n     Seller : {\n         NymID :  abc123 ,\n         NodeID :  Alice ,\n         BTCuncompressedpubkey :  044448c02963b8f5ba1b8f7019a03b57c80b993313c37b464866efbf61c37098440bcdcc88bedf7f1e9c201e294cf3c064d39e372692a0568c01565b838e06af0b ,\n         PGPpublicKey :  xsBNBFQtSk0BB/98EG2qpRRVJUZ0tjwbT88bzjeJl7rhPRWzewvjZDMjjDK0Q9p2q8xm21g1BAgsNV6fqyM8cpnosT6/jYur3h1c+l5YAAWTGw1LYZ44rArMFZ9yq9XuiKH0NEv5xko1+AAKdMnev1ZbU87iRR5YbQXqWCzS2/M+CZ3cY2d/WpJO50zlhofsC1gprtLaBuRmiFaboEjvj/i+a14BvkpmQhhdFlsVSUkUPKUS96hHQfYkY6uJGNC1SCAISaTJAXTMIgIjDRc0/tORAPqi0NrcCfAZJVQuMKBYrqA5acL2cFnehmIYGaCQpexqpV5Lme2jhiFk8/4Fjtl88kqjBUey2tcdABEBAAHNGkJsdWhoYXVhaGEgPGxhbGFAbGFsYS5jb20+wsByBBABCAAmBQJULUpeBgsJCAcDAgkQwltegB4kwqAEFQgCCgMWAgECGwMCHgEAAKvcB/wPLNVWm6iipqKO4hoY45Kxey23uEjVIqHAfNn5J+RkmKnYhEtAn/Q98flh6v7qnTi/GMvP1kbeGdIBob7S6X7z75ZUEIF72Q76qFI7BmuDme2RuKn/xyXRuQuTH0LD/EhPMGQiSjni5kW8ht1g2GpqFQiBKFMmhC4fwSgBQNXLCeDjYK8JvS5RsxLpfcCrvfWJEqjClwjnzXZySjFtZ3qjyry2CLxcPmiprVW7N9D/xJ1KWx3E+dK0zNiqrtxynlv2ZzfgXdu12WGs1YlAt0M1YAcKOSVtUC8iiyRvZYvgFUsuoYNZLDZhRw7PSua4FidYHZnPxMmt2H1ftVqMM9xGzsBNBFQtSl4BB/9wASUgKisYaE0iwp07R1z4Vp0zN/hO77RPV0QPsGcsjmefy1/bl6391pcMAuL7sLvDNXj91bA6SQ50rel2P12YbSvLGgcRpPoxPccQ4myHYOl0tVR4fJcLCyWDmOnz5rGSctZZhAUJ3FaTkeQd3pgzDtdD7M8hZ1GFwMnsw36IUDuyTRo450kNzZV/y9Ai7rjqqjZ86n6h74dp5cUB/w8FVBxAZaFbZYDYPSAsV+ja5CMxasgDhNZwukjRGX3MR/nJNNM+Oy684mi+iAe7ZEcR4m2fDHo/B7oJSTmSfqO21sK9v/K4lRDmJkPYJDpxUMlB/k+ksAgrjehA2h240NFPABEBAAHCwF8EGAEIABMFAlQtSnYJEMJbXoAeJMKgAhsMAADBWAf9Fqj98anrvWlsbtBFwbFu6LF8uNTrtoHNnFfTMOjIR6+ccTIDeMiOOKhEWkZa7VroS3hJXY9Ps0DGjUXQZ5nP0L4IeZOF5+Oj8SPQX+uJfyZ/Ewq/4lpD/DNz9AWyPkDTFLxUfEFJ9kTm1Uue3cV1KKtqeptaFuIL1l7tgaDOi2nxdVq/C937QAiXY6wEUcocaXUOSaWyWjEoiXA7tBRXrp3gxFFs6hl5ECW5gxFymITVm2WlNeHm6Jn9v786bp0Umz8K5+TcPWu08duuOBDw0qAN6g2alt4Cb0IDOOhxmKenIuEHg3RyhCwQwUOpMLlZXxpTWjUzWZOTLEvR9zciXA===28tV \n    },\n     Buyer : {\n         NymID :  def456 ,\n         NodeID :  Bob ,\n         BTCuncompressedpubkey :  04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235 ,\n         PGPpublicKey :  xsBNBFQum5sBCACGWTFtJElTxRGG7OnHDfaEnPE5fUx57a5i5q5L7Bk6mG3h6omPO7MhhFFtKjbszdq1WUSogvTF7JTqzblC843i6D0XZOCfNEvj2jbMXu7N6QkX4otEOleVZdiRrSkBK8ubdGcaSXsKEONs37nRAfSCOdVz1JZvCtV7fT/oiaqR47osu2OMYOExpAASwF6f1CfglC6uWLnG34e3use+ILrev2WKREINLU4Z5cuZET59gotfqpfH2l3Wo22SBn+HWJl8yIsK3/QB/7oRtPN4wSTky0jJE7+bzE4/F2qjoXPUiqWMDfdF+ALbFs+GBsv8Gtfsmuawr3ZzzPi3fElAoXirABEBAAHNIE9CVGVzdDIgPG9idGVzdDJAb3BlbmJhemFhci5vcmc+wsByBBABCAAmBQJULpuqBgsJCAcDAgkQKr7omyUpIU8EFQgCCgMWAgECGwMCHgEAACP9B/0cjB3CrF4wARoPblCdWijTKq6MwxG/iUp7zOXiIoxF4cXDzTjtkcVBaDOj5Y5wlL7UQc4zJy4c3NUh7qrOzYxNVfqfF9xTVmOtECTYa+hFP4HAxl1v1KAhrhiHren9jOkAc+LRyyMMmM59JcpjY37VsynzdJrLTz3W6fa4PAdSy9b1Ezmg7svgOzPSz/xwWooQBk/2pKH6AF0+wrCMKbztutnf6KMlZoxkbrMcAYQkiCMaRrvNdGcJevgpsViqQ06f9eKuZrmHAhvpuAkT1Xh/YyYZ26RdPKFmpk5KPEPSQbzl8GcS75TfgNiZCBM+WoT1h7F82Tgo30MHxh/dqewFzsBNBFQum6wBCACEEU6kx2ZhYEI+uSExGlby11hPz4QDLrsNWVH4sHJS6Ln05lt30Le55MEpTNiRXAZa/Q70Dt5konpPiQ9+Y6L7WNL3pTlVnDm0Wl6g2Obf1Brg1xqmFAW44u1p2kr8yc/kNh87L2+y3p5qHd0hFV++ex7Fg5oSeow2lQ1lNwMbCFOgml1ddY9Ls+ZsRCBEbBsWD/gfd4wgBtLZBzokx2QueBh/sZrINtLLqXht8C05MpvTQS1m9G4J+sek12c1R6I/O2lcg9sbntKrclMBX1ZcSWh/dkWtG/fgKqYrLxHF9noPiHFTYUlq+5I0KDJUHle6CLb5dsWUrIBHwqI3rLQzABEBAAHCwF8EGAEIABMFAlQum8YJECq+6JslKSFPAhsMAADNYgf+MeBZIlXWbG1p99LNGJWwOyznqinhvj2FWTJAeBpWz+MT35enq+RG7jTziGW3UdvkojLFgMFFZFU34QXKRBOBwXVwXebOAdFyeO0thB7J7mt2esteJGNy5pEegWma97618ZUCOsBmKhfNGGxOfT0+x5qHLpb4X54neA7LxaF3jSBQTut/TTOZNVWscwM+w4hLLzB5Q/0RC6nmQQ03nCCqScQK8WfRohx/vRnXIDmHRsm4p8FJwGBZbT5clOVkon8Bj0Gkp83y9TfJX0CpGrwmbnuaWXPU4EI6+G14XHu3p9xwo3L2Bc8jli0+GVZ7SJCCRdJ+/66NvJYHIVzzbxlvkQ===7H5F \n    },\n     Physical Good Contract : {\n         Blind_contractHash :  544e7ddb8b5b7771303a9d45449b8de328d331b1c7cc473840017f1d67a35542 ,\n         Currency :  Bitcoin ,\n         Price :  0.01 \n    }\n}  As per the standard process, the buyer forwards the contract to the notary who adds a third digital signature to the contract. However, the notary will not be able to determine the contents of the good being sold on OB.  OpenBazaar  client, exports and emails it as an attached  .json  file directly to Bob. Bob can then who imports it into the  OpenBazaar  client. Bob signs the contract and selects a notary.", 
            "title": "3.2.2 Ricardian contracts"
        }, 
        {
            "location": "/03.-OpenBazaar-Protocol/#33-the-openbazaar-application", 
            "text": "The client/app enables the user to fulfill any desired role on the network (merchant, buyer, notary, arbiter). The UI/UX will likely vary on the type of trade to be conducted.", 
            "title": "3.3 The OpenBazaar Application"
        }, 
        {
            "location": "/03.-OpenBazaar-Protocol/#34-ratings-reviews-and-reputation", 
            "text": "3.4.1 Introduction  In this article we attempt to design a decentralised rating and review system for the sale of physical goods on the  OpenBazaar  network. Ratings and reviews are sometimes considered interchangeable with the challenge to create a global decentralised reputation system. For  OpenBazaar , this is not the case as the system described here is:   Performance based  Made on a per item basis  Not applicable to other types of marketplaces built on the  OpenBazaar  platform   Decentralised reputation refers to the overall trustworthiness of an identity within a network. In the future, decentralised reputation can be layered over  OpenBazaar  if and when it is ever developed. For ratings and reviews, they are strictly concerned with the merchant performance of that identity on the network. Both systems are theoretically compatible and need to be fully developed.  Ratings and reviews are defined in this article as:\n1. Ratings - scores on the behavior of the merchant, the quality of the item, and shipping time. \n2. Reviews - written summary of the trade experience with the merchant    As mentioned earlier, ratings and reviews are made on a  per trade  basis.  3.4.2 Ratings   Who are we rating?   The merchant.   Who is making the rating?   The buyer.   Why isn't there a rating of the buyer by the merchant?   There is very little for the buyer to get wrong in a trade other than failing to release funds from the escrow address, whereby the notary would have to step in to payout the merchant. As a result, a notary can develop internal systems to prevent or mitigate in advance this type of behavior. Also buyer reviews are not common in typical e-commerce platforms for physical goods.  Side note:  For trades using mutually-assured destruction escrow addresses (i.e. 'MAD' 2-of-2 multisig), decentralised reputation is a critical metric for users to predict the likelihood of good behavior by the counterparty identity.  3.4.2.1 Considerations with Decentralised Ratings   Sybil attacks  - fake ratings made by an attacker using sockpuppets identities  Distributed storage  - ratings must be persistent publicly accessible and immutable   Sybil Attacks   Sybil attacks can generally be mitigated by increasing the cost in resources or time to perform an action  In  OpenBazaar , this can be achieved in a couple of ways:  Demonstrating a  proof of trade  Showing evidence of a trade by a triple-signed Ricardian contract (i.e. signed by merchant, buyer, and notary)  But this approach is not good for the privacy of the buyer    Notary validation  The notary validates that an anonymous rating and review comes from a valid trade with the merchant  Preserves the privacy of the buyer, provided the merchant or notary doesn't reveal this information  Assumes that the notary is reputable to begin with    Either approach does not fully eliminate the possibility of a Sybil attack  Rather it will significantly increase the cost to perform such an attack perhaps to the point where they are discouraged   Distributed Storage   Ratings need to be stored somewhere that can be accessed by anyone at any time  As a result, these ratings cannot be hosted by the buyer or merchant themselves, which may omit negative ratings on top of having a transient presence on the network  Notaries may host ratings as a service  If a prominent notary is taken offline, then the rating and review data may be lost forever  Notary is hosting is encouraged, but decentralised and distributed redundancy should still be found  Options for persistent distributed storage:  Bitcoin blockchain  Blockstore  ChainDB  Namecoin or other blockchains  Subspace  Of the above options, the first three leverage the Bitcoin blockchain in different ways  All except the first option require other users to maintain a parallel network to Bitcoin, where the incentive to do so may or may not be clearly defined  Specific application and criticisms:  Bitcoin blockchain  Blockchain bloat  Limit to how much you can store in  OP_RETURN    OpenBazaar  or Blockstore DHT  The rating/review data can be embedded into  OP_RETURN  in the blockchain, which can then be used as a reference in the  OpenBazaar  or Blockstore DHT for the full rating and review data  In the case of  OpenBazaar , data embedded into the DHT can be made to confirm a certain specification to restrict space and counter some Sybil attack vectors  The incentive structure for running a node on the Blockstore DHT is unclear for now  Also unclear how robust and persistent data storage will be on either DHT, or how some Sybil-spam attacks will be mitigated    ChainDB  Parallel network must be run alongside  OpenBazaar  to push ratings into the database  In effect creating a crypto-asset just to make a rating: overkill  Project is still a theory for now, nothing implemented or tested    Namecoin (or another blockchain)  Rating data is not really permanently hosted, as data storage needs to be renewed periodically  As a result, reputations can disappear if not properly maintained  Reputation cannot have a statute of limitations!  Limit to how much data you can store onto Namecoin    Subspace  Storage must be paid for on the Subspace network over time  Parallel network to Bitcoin and  OpenBazaar     There is no magic bullet, any choice is associated with different trade-offs.  In our view, storing merchant ratings is best achieved by directly embedding the rating into the blockchain.  3.4.2.2 Storing the Rating Score in the Blockchain   The rating score is embedded into the blockchain via  OP_RETURN  as an extra output of the  payout transaction  from the multisignature escrow address  This is the transaction that either release funds from multisig to the merchant (in a successful trade), or to the buyer as a refund (in an unsuccessful trade)  The rating score follows a standardised format with the following components:  OpenBazaar  rating tag  Concise tag to identify a transaction containing an  OpenBazaar  rating    Merchant rating score - [-1,0,1] overall rating of the merchant  -1 : Negative rating  0 : Neutral rating  1 : Positive rating    Item rating score - [1-5; lowest-highest rating] for each category  Item description : Was the item delivered in the condition and quality described in the contract?  Delivery time : Was the item delivered within the time specified in the contract?  Customer experience : What was the interaction with the merchant like?    Global unique identifier (GUID) of the merchant being rated  Item unique identifier (IUID) of the item being sold  Similar to  short ID     In plain text, the rating score would look like this:  OBR 1 5 5 5 b20c6947b11ac5bdb4b4338bc196df0b0f3f452d 23TplPdS \n(tag, merchant rating, item rating (description, delivery time, customer experience, merchant GUID, IUID)  As a hex value, it looks like this:  4f4252202b31203520352035206232306336393437623131616335626462346234333338626331393664663062306633663435326420323354706c506453  The overall size of the rating score should be around  62 bytes , well under the new 80 byte limit for  OP_RETURN .  3.4.2.3 Validating Legitimate Ratings   How do we determine whether a reputation score is valid, as anyone can create 100 transactions to give themselves a positive rating?    The notary is in the best position to validate whether a rating is from a valid  OpenBazaar  transaction  The buyer can add an extra output to the payout transaction sending a microtransaction to the notary  The address can be called the 'rating validation address'  The client can validate that the address is associated with the notary on the  OpenBazaar  network  The notary can host an open record of valid  OpenBazaar  transactions using  OP_RETURN  and  TXID  as the references (tied into Reviews, described below)  Bitcoin transactions that have tagged the notary erroneously can be ignored  These only enrich the notary as a transaction needs to be made to their address     3.4.3 Reviews   Where and how are reviews stored decentrally?    OP_RETURN  is not large enough to store reviews, unless they are restricted to being   ~75 characters (which isn't very practical)  A transaction with multiple  OP_RETURN  outputs are not standard, so you'd have to store the rating and review within a single  OP_RETURN  output  Either the  OpenBazaar  or Blockstore DHT appears to be the best solution to store item reviews  OP_RETURN  hex containing the rating (described above) will be used as the reference hash  A full outline of the Blockstore protocol can be  found here .   \n( Blockstore Schematic )   A similar model would be taken to store reviews within the  OpenBazaar  DHT with the following features:  Restrictions on the maximum size of the written review  Easier to embed within the process of executing a transaction on the network  Leverages financial motivation of users on the network to indirectly incentivise nodes storing rating/review data in the DHT   Irrespective of the DHT, the data structure for  OpenBazaar  rating and review may appear this way:  {\n     _OpenBazaar__opreturn_ref :  4f4252202b31203520352035206232306336393437623131616335626462346234333338626331393664663062306633663435326420323354706c506453 ,\n     trade_ref :{\n         merchant_guid :  b20c6947b11ac5bdb4b4338bc196df0b0f3f452d ,\n         notary_guid :  f4b5c505fd5abe9d9c631be65dfa52c9df34ae3c ,\n         contract_hash :  3dbb901141c71351bcafee94274a9c67f0b3e9065531fbc7c6f9d0abd70c641a ,\n         item_code :  23TplPdS \n    },\n     ratings : {\n         merchant_rating : 1,\n         item_description : 5,\n         delivery_time : 5,\n         customer_exp : 5\n    },\n     review :  That bucket of nuts was amazing. Loved the free funnel! \n}   As mentioned earlier, it is important that the  Buyer  details are omitted from this rating to preserve their privacy as much as possible.   3.4.4 Attack Vectors   Sybil rating attack  A user creates multiple nodes to cover multiple merchant, buyer, and notaries to issue fake positive or negative ratings  An underlying assumption is that a few notaries will have a large market share, thus positive/negative ratings from an obscure notary may not be taken seriously  Blockchain bloat  The use of  OP_RETURN  will contribute to blockchain bloat, resulting in nodes automatically pruning this data from the blockchain  May result in the increased trend towards centralisation    However,  OP_RETURN  is such a valuable utility, we consider it unlikely that this data storage entry will be closed.  We already have a small centralisation risk by using Obelisk servers as block explorers.", 
            "title": "3.4 Ratings, Reviews and Reputation"
        }, 
        {
            "location": "/03.-OpenBazaar-Protocol/#35-a-pseudonymous-trust-system-in-openbazaar", 
            "text": "Dionysis Zindros, National Technical University of Athens    3.5.1 Keywords  pseudonymous anonymous web-of-trust identity trust bitcoin namecoin proof-of-burn timelock decentralized anonymous marketplace _OpenBazaar_  3.5.2 Abstract  Webs-of-trust historically have provided a setting for ensuring correct identity association with asymmetric cryptographic keys. Traditional webs-of-trust are not applicable to networks where anonymity is a desired benefit. We propose a pseudonymous web-of-trust where agents vote for the trust of others. By disclosing\nonly partial topological information, anonymity is maintained. An inductive multiplicative property allows propagation of trust through the network without\nfull disclosure.  We introduce additional global trust measures through proof-of-burn and proof-of-timelock to thwart Sybil attacks through an artificial cost of\nidentity creation and maintenance and to bootstrap the network. Existing blockchains are used to provide friendly names to identities, and the network\nis applied to a commercial setting to manage risk.  Finally, we highlight certain attacks that can compromise the trust of the network under certain assumptions.  3.5.3 History  Webs-of-trust are traditionally a means to verify ownership of encryption and signing keys by a particular individual whose real-world identity is known. The first widely deployed web-of-trust is the GPG/PGP web-of-trust [Zimmermann][Feisthammel]. In these webs-of-trust, a digital signature on a public key is employed to indicate a binding between a digital cryptographic key and an identity. Such a digital signature does not designate trust, but only signifies that a particular real-world individual is the owner of a digital key.  Webs-of-trust have also been utilized for different purposes in various experimental settings. In Freenet [Clarke], it is used to guard against spam [Freenet WoT]. In a commercial setting, the Bitcoin OTC web-of-trust successfully attempts a centralized approach to establish a true trust network [OTC], contrasting identity-only verification webs-of-trust of the past.  3.5.4 Introduction  The aim of our web-of-trust is to construct a means to measure trustworthiness between individuals in a commercial setting where goods can be exchanged between agents. The goal of such a measure is to limit, as much as possible, the risk of traders in an online decentralized anonymous marketplace. We are proposing a system to be used in production code as a module of  OpenBazaar  [ OpenBazaar ], a peer-to-peer decentralized anonymous marketplace that uses bitcoin [Nakamoto] to enable transactions.  Risk management in  OpenBazaar  is based on two pillars: On one hand, Ricardian contracts are used to limit risk through mediators, surety bonds, and other means which can be encoded in contract format [Washington]. On the other hand, the identity system is used to establish trust towards individuals. In this paper, we introduce the latter and explore its underpinnings.  Trust management in  OpenBazaar  is established through two different types of mutually supporting systems; projected trust and global trust. Projected trust is trust towards a particular individual which may be different for each user of the network; hence, trust is \"projected\" from a viewer onto a target. Global trust is trust towards a particular individual which is seen as the same from all members of the network. Projected trust is established through a pseudonymous partial knowledge web-of-trust, while global trust is established through proof-of-burn and proof-of-timelock\nmechanisms.  3.5.5 Threat model  The identity system is threat modelled against various adversaries. We are particularly concerned about the malicious agents highlighted in this paragraph, with their respective abilities.  First, we wish to guard against malicious agents within the network. If there are malicious buyers, sellers, or mediators, the goal is to disallow them from gaming the network and obtaining undeserved trust.  Second, we wish to guard against malicious developers of the software. If a developer tries to create a bad patch or influence the network, this should be detectable, and the honest agents should be able to thwart against such an attack by choosing not to upgrade by inspecting the code. The system must not rely on the good faith of developers; it is open source and decentralized.  Third, we wish to guard against governments and powerful corporations that wish to game or shut down the network. These agents are not always modelled as rational, as their objectives may involve spending considerable amounts of money and processing power to game the system, with no obvious benefit within the system bounds. Their benefits may be legal, economical, or political, but cannot be simply modelled. Their power may be legal and can defeat possible single points-of-failure on the network.  However, we assume that the malicious agents have limited power in the following areas. We assume that the bitcoin, namecoin, and tor networks are secure. We assume that malicious agents have limited processing power, bandwidth, monetary power and connectivity compared to the rest of the network. As long as malicious agents control a small portion of such power, the network must remain relatively secure.  The limited connectivity assumption requires additional explanation. We assume that a malicious agent will not be able to find and control a graph separator for any non-trivial induced graph between any two parties on the web-of-trust. This assumption is detailed in the sections below.  Our trust metrics are heuristic; some trust deviation for malicious agents who try to game the system with a lot of power is acceptable. However, it is imperative that trust remains \"more or less\" unaffected by local decisions of agents, unless these decisions truly indicate trustworthiness or untrustworthiness. Trust should be primarily affected by trading behavior, and not by technical influence on the network.  3.5.6 Web-of-trust  The  OpenBazaar  web-of-trust maintains three important factors: First, it maintains strict pseudonymity through anonymizing mechanisms; second, it establishes true trust instead of identity verification; and third, it is completely decentralized.  The  OpenBazaar  web-of-trust is used in a commercial setting. Trust is used to leverage commercial risk, which involves losing money. Traditional identity-verifying webs-of-trust such as GPG are in purpose agnostic about the trustworthiness of the web-of-trust participants. That type of web-of-trust verifies the identity of its members with varying certainty. However, it remains to the individual to associate trust with a particular person for a particular purpose: Whether they can be trusted with money, for example [GPG identity].  In  OpenBazaar , the participants are inherently pseudonymous. In this setting, we wish to maintain an identity for each node. This identity is strictly distinct from the operator's real-world identity. While the operator may choose to disclose the association of their real-world identity with their pseudonymous node identity, the network gives certain assurances that such pseudonymity will not be broken. Hence, pseudonymity is closely related to anonymity: Pseudonymity allows the creation and maintenance of an online \"persona\" identity with a certain history; anonymity ensures the real-world identity of the persona operator remains unassociated with the persona. Hence, our goal is to provide both pseudonymity and anonymity.  A true web-of-trust is a directed graph where nodes are individuals and edges signify trust relationships. In contrast to identity-verifying webs-of-trust, in a true web-of-trust, edges do not signify identity verification; they signify that the edge target can be trusted in a commercial setting. For example, when trust is given to a vendor, it signifies that the vendor is trustworthy and will not scam buyers by not delivering goods. When given to a mediator, it signifies that the mediator is trustworthy will resolve conflicts between transacting parties with a neutral point of view judgment. And when given to a buyer, it signifies that the buyer is trustworthy and will pay the money she owes. Clearly, trust is not symmetric.  While identity verification is a concept successfully leveraged by individuals for secure communications and other transactions, it is meaningless to try to verify the identity of a pseudonymous entity, because a pseudonymous entity is the cryptographic key in and of itself, and therefore identity verification would constitute a tautology. It is therefore required to adopt a different meaning of \"trust\" than in a traditional setting of real-world identities. Hence, trust in this case signifies the trustworthiness of an individual in a commercial setting, their financial dependability, their reliability as mediators, and their credibility as trust issuers [1] [2].  3.5.7 Pseudonymity  Each node in  OpenBazaar  is identified by its GUID, which uniquely corresponds to an asymmetric ECDSA key pair. This GUID is the cryptographically secure hash of the public key. The anonymity goal is to ensure this GUID remains unassociated for any real-world identity-revealing information such as IP addresses.   Each GUID is associated with a user-friendly name. These user-friendly names can be used as mnemonic names: If someone loses their trust network by reinstalling the node without first exporting, they know that certain agents remain trustworthy. Furthermore, user-friendly names are used in the trust bootstrapping procedure in which it becomes easier to peer-review that the bootstrapped nodes are the correct ones. Finally, user-friendly names can be exchanged between users out of the software usage scope; for example, a user can directly recommend a vendor by their user-friendly name to one of their friends via e-mail.  To maintain a cryptographically secure association between node GUIDs and user-friendly names, we utilize the Namecoin [Gilson] blockchain. A node can opt-in for a user-friendly name if they so choose. To create a user-friendly name for their GUID, they must register in the \"id/\" namecoin namespace [Namecoin ID] with their user-friendly name. For example, if one wishes to use the name \"dionyziz\", they must register the \"id/dionyziz\" name on Namecoin. The value of this registration is a JSON dictionary containing the key \" OpenBazaar \" which has the GUID as its value. As Namecoin ids are used for multiple purposes, this JSON may contain additional keys for other services. The namecoin blockchain ensures unforgeable cryptographic ownership of the identity. When a node broadcasts its information over the  OpenBazaar  network, they include their user-friendly name if it exists. If a node claims a user-friendly name, each client verifies its ownership by performing a lookup on the namecoin blockchain. If the lookup succeeds, the name is displayed on the  OpenBazaar  GUI and the information is relayed; otherwise the information is discarded.  As namecoin names can be transferred, this allows for participants to transfer their identity to other parties if they so desire; for example, a vendor can  transfer the ownership of their store by selling it.  3.5.8 A naive solution  The most obvious and naive choice for a trust system in a commercial setting is a global voting system. While this solution is obviously flawed, it constitutes an important foundation upon which the next ideas are built. In this section we describe this idea in order to determine its flaws, which are solved in our next proposal.  In typical centralized systems, including eBay and Bitcoin OTC, there is a global rating which is determined as the sum of the individual ratings of others towards an individual. Attacks of fake ratings are taken care in the system in an ad hoc fashion which is enabled by the centralized nature of the system.  In decentralized systems, Sybil attacks [Douceur] make this situation particularly more challenging and without an easy way to resolve. Hence, this naive solution is undesirable. The solution to this problem is to first introduce a cost of identity creation and maintenance for global trust, and allow for the trust through edges to be projected. We explore these solutions below.  3.5.9 Partial topological knowledge  It is a conclusive result in the literature that, by analyzing graph relationships between several nodes, given certain associations between nodes and real identities, it becomes possible to deduce the real identities behind other nodes. In particular, if an attacker is given only global topological information about a web-of-trust as well as some pseudonymous identity associations with real-world identities, they can deduce the real-world identities of other nodes [Narayanan]. Hence, by revealing the complete topology of the web-of-trust graph between pseudonymous identities, an important loss of anonymity arises. For this reason, we propose a web-of-trust with partial topological knowledge for each node. Under this notion, every node only has knowledge of its direct graph neighbourhood \u00e2\u20ac\u201c they are aware of the direct trust edges that begin from them and end in any target. This does not disclose any information about the total graph, as they are arbitrarily selected by each node. These ideas have been explored previously in the literature as friend-to-friend networks [Popescu].  3.5.10 Trust association  In the pseudonymous [3] web-of-trust, each node indicates their trust towards other nodes that they understand are trustworthy. This understanding can come from real-life associations among friends who know the real identity of the pseudonymous entity. An indication of trust does not harm anonymity in this context. This understanding can also come from external recommendations about vendors using friendly names. For instance, under a threat model that trusts some centralized third parties, it is possible to establish trust in this manner. As an example, if a vendor is popular on eBay, and a buyer trusts eBay, the vendor can disclose their  OpenBazaar  user-friendly name on their eBay profile, and the buyer may opt to trust that identity directly.  Trust is indicated as edges with a source, a target, and a weight. The weight is a floating-point number from -1 to 1, inclusive, with 0 indicating a neutral opinion, -1 indicating complete distrust, and 1 indicating complete trust. These can be displayed in a graphical user interface in a more simplistic manner; for example, the canonical client may opt to present a star-based interface for positive trust, and flagging for negative trust; or, alternatively, it may choose to present a simple thumbs-up and thumbs-down option, indicating discrete trust of 1 or -1 if employed, or 0 if not used [4]. These trust edges remain local and are not disclosed to third parties. We call the direct edges \"direct trust\" and the weights will be denoted as  w(A, B)  to indicate the direct trust from node  A  to node  B .  3.5.11 Trust transitivity  As topological knowledge is partial, we resolve the projected trust between nodes through induction. Let  t(A, B)  denote the projected trust as seen by node  A  towards node  B . Projected trust is then defined as follows:  t(A, B) = w(A, B), if w(A, B) is defined\nt(A, B) = a \u00ce\u00a3 w(A, C) t(C, B) / |N(A)|, for C in N(A), if w(A, B) is undefined and w(A, C)   0  Where:   t(A, B)  denotes the projected trust from A to B.   w(A, B)  denotes the direct trust from A to B.   N(A)  denotes the neighbourhood of A; the set of nodes to which A has direct trust edges.   |N(A)|  denotes the size of the neighbourhood of A.\n*  \u00ce\u00b1  is an attenuation factor which is constant throughout the network.  The meaning of the above equation is very simple: If Alice trusts Bob directly, then Alice's trust towards Bob is clear. If Alice does not trust Bob directly, then, since we wish to retain only partial topological knowledge, Alice can deduce how much to indirectly trust Bob from her friends. She asks her friends how much they trust Bob, directly or indirectly; the trust from each friend is then added together to produce the projected trust. However, the trust contributed by each friend is weighted based on the local direct trust towards them; if Alice trusts Charlie directly and Charlie trusts Bob (directly or indirectly) then the projected trust that Alice sees towards Bob is weighted based on her trust towards Charlie; for example, if Alice trusts Charlie a little, he's not allowed to vouch for Bob a lot. Finally, the projected trust is normalized based on the number of friends one has, so that it remains within the range from -1 to 1.  The condition  w(A, C)   0  is imposed so that negatively trusted neighbours are unable to vouch for their trust towards others \u00e2\u20ac\u201c otherwise they would be able to lie about their trust towards others if they knew they were negatively trusted and impose onto them the opposite trust from what they claim.  The attenuation factor  \u00ce\u00b1  is used to attenuate trust as it propagates through the network. Thereby, nodes further away from the source gain less trust if more hops are traversed. We recommend a network-wide parameter of  \u00ce\u00b1 = 0.4  as is used by Freenet, but this can be tweaked based on the network's needs.  This simple[5] algorithm assumes that trust is transitive; if Alice trusts Charlie and Charlie trusts Bob, then Alice trusts Bob[7]. This is a strong assumption and may not always hold in the real world. Nevertheless, we believe it constitutes a strong heuristic that allows a network to deduce trust with partial topological knowledge.  3.5.12 A comparison to other webs-of-trust  It seems worthy to compare this approach to existing webs-of-trust to point out their differences. In contrast to GPG [GPG identity], our proposal maintains both anonymity and true trust. In contrast to Freenet, trust is used for commercial purposes and not just to fight spam. In contrast to Bitcoin OTC, the network is decentralized, the topology is only partially known, and the trust is only projected and not global.  Certain services provide webs-of-trust in a centralized way, but they do not advertise them as such. eBay ratings provide webs-of-trust, but the topology is globally known and the platform is centralized. Facebook's social graph provides trust through friendships. Interestingly, Facebook's social graph allows partial topological knowledge depending on the privacy settings of the participants. However, centralization is still a problem. In centralized solutions, pseudonymous identities through user-friendly names can also be maintained without a blockchain. The simplicity of implementation benefit is also a strong one.  Centralized solutions have the drawback of a single-point-of-failure. As one of the goals of  OpenBazaar  is to avoid Achilles' heels (single points of failure), centralized solutions become unacceptable. The purpose is, for instance, to eliminate the ability for government intervention in the web-of-trust through secret warrants served to the administrators of such a centralized system that may require the handover of private encryption and signing keys.  3.5.13 Man-in-the-middle vendors  This framework is susceptible to a man-in-the-middle attack which is unavoidable in pseudonymous settings. The attack works as follows: A malicious agent wishes to gain trust as a vendor without really being a trustworthy vendor. They first create an  OpenBazaar  vendor identity. Next, they choose one other vendor that they want to impersonate. They subsequently replicate their product listing as their own. They also monitor the actual vendor's catalog for product changes, and they relay messages between buyers and the actual vendor when buyers message them. When a buyer purchases a product for them, the rogue vendor also forwards the purchase to the real vendor. Notice that this problem does not directly apply to mediators.  If, after the purchase, the buyer and seller rate each other positively, this rating will not impact the actual parties, but will only be reflected on the rogue vendor. Hence, the rogue vendor will gain trust as both a seller and a buyer without actually being either. This process can be automated. At a later time, the rogue vendor can use the man-in-the-middle position to read encrypted messages between buyers and sellers and may sacrifice their maliciously gained reputation to cheat on a desired buyer or seller. Continuous operation of such rogue nodes can undermine the network.  It is difficult to guard against such attacks. The question of whether someone \"really\" knows a pseudonymous vendor becomes philosophical; what does it mean to know someone who is pseudonymous to you? And if a man-in-the-middle vendor is always delivering goods, are they not also a trustworthy agent? It is recommended that users establish direct trust only with pseudonymous vendors whose real identity they already know, or have signals that the pseudonymous vendor is not being man-in-the-middled. The latter is difficult to establish, but may be possible through independent verification on different networks and a continued trustworthy history. If we assume that the delivery of products will not be intercepted, the product delivery itself may be used as a mechanism to include a physical copy of key fingerprints in order to establish that no man-in-the-middle is being present.  Nevertheless, negative trust is semantically a different notion from positive trust. Negative trust can be attached to vendors whose identity is unknown; if a man-in-the-middle behaves in an untrustworthy manner, it is imperative to rate them negatively. This distinction between positive and negative trust is made clear in the condition for  w(A, C)   0  to be positive in the equations above. It is a challenging problem to communicate this difference to the user via a clear user interface.  3.5.14 Feedback  Feedback can be given by buyers to vendors, by vendors to buyers, and by buyers and vendors to mediators in text form. Feedback is a piece of text from a particular source pertaining to a particular target. Keeping the above man-in-the-middle vendor attack in mind, it may in cases not make sense to rate vendors or buyers directly if their real identity is unknown by the rater, even if they trade fairly, unless they can establish an existing trust relationship towards them in order to at least determine their legitimacy.  To avoid fake feedback, feedback must only be relayed by the  OpenBazaar  client if it is from a node that has transacted with the target. Therefore, feedback must be digitally signed and include a reference to the transaction that took place \u00e2\u20ac\u201c the hash of the final Ricardian contract in question, as well as the bitcoin transaction where it was realized.  However, given that transactions are free to execute, to avoid Sybil attacks from vendors or buyers who transact with themselves, feedback must only be trusted when it is given from parties that are already trusted using the total trust metric defined below. Otherwise, it must not be displayed or relayed.  3.5.15 Bootstrapping the web-of-trust  It is hard to establish trust targeting a new node on the network with no web-of-trust connections to it. This issue is addressed in the Global Trust section. However, it is easier to allow new users entering the network to trust individuals who have established some trust through the web-of-trust. Bootstrapping trust is widespread practice in the literature [Clarke].  This bootstrap can be achieved by including a hard-coded set of  OpenBazaar  node key fingerprints that are known to be good in the distribution. At the beginning, these can be the  OpenBazaar  developers. It is crucial that the number of nodes included is wide so that no individual can influence the bootstrapped trust. Advanced users are advised to further diminish the weights of the direct edges to the bootstrap-trusted nodes and to include higher-weighted edges to people they physically trust.  The special bootstrapping nodes must be configured to always respond to trust queries, regardless of whether they trust the query initiator.  This practice in particularly useful to guard against illicit uses of the network, which have been experienced in similar, centralized but anonymous solutions [Barratt]. By ensuring the bootstrap-trusted nodes highly rate only non-illicit traders, it is expected that the network will promote legitimate uses of trade. While black market goods can still be traded, the user will be required to opt-in for such behavior by manually introducing trust to nodes who highly rate trusted black market vendors.  3.5.16 Graph separator attack  The web-of-trust security strongly depends on the size of graph separators. Let us examine the trust as seen from a node  A  to a node  B . Let  G'  be the graph induced from the web-of-trust graph  G  as follows: Take all the acyclic paths from  A  to  B  in  G  whose every non-final edge is positive. These contain nodes and edges. Remove all nodes and edges that are not included in any such path to construct graph  G' . Then  G'  is the induced trust graph from  A  to  B . An  (A, B)  separator is a set of nodes of  G'  which, if removed from the graph, make the nodes  A  and  B  disconnected.  We define an entity \"controlling\" a set of graph nodes as being able to arbitrarily manipulate the reported  t  and  w  functions when the controlled nodes are inquired about their trust beliefs.  We will prove the following theorem for any separator. The smallest separator, mentioned below, is simply easier to manipulate by a malicious party, as they are required to control a smaller set of nodes.  Theorem : A malicious entity controlling the smallest  (A, B)  separator on the induced graph  G'  will be able to change a negative projected trust to a positive projected trust towards the target as seen on the original graph  G .  Proof : Let  S  be any  (A, B)  separator on  G' .   Since the trust from  A  to  B  was originally negative, this means that  A  and  B  are connected on the induced graph  G' . As the projected trust is negative, this means that there are direct negative edges in  G'  from some intermediate parties  B1, B2, ..., Bn  to  B ; these edges cannot be indirect, as indirect edges are not traversed for trust discovery.  We will show that the trust through any of  Bi  can be manipulated to be positive. Indeed, take some arbitrary  Bi . Then there will exist some paths from  A  to  B  with  Ci  as their penultimate node. Take some arbitrary path  P_i,j  from  A  to  B  through  Bi . We will show that this path can be manipulated to produce positive trust. Since  S  separates  A  and  B , then there must exist some element  s  in  S  that is also in  P_i,j . Since  s  is controlled by the malicious entity, they can modify their claimed direct trust towards  B  and set it to  1 . They can also completely ignore any indirect trust, including  Bi 's opinion:  w(s, B) = 1  Through this mechanism, every path can be manipulated through the control of  S . Therefore, all paths ending in a negative edge can be eliminated. Since  A  and B  were originally connected, they will remain connected through this trust manipulation. Finally, at least one path ending in a positive edge will exist.\nTherefore, since  t(A, B)  will be a sum of positive terms,  A 's projected trust towards  B  will be bounded from below as follows:  t(A, B)  = \u00ce\u00b1 t(A, s) / |N(s)|  But  t(A, s)  must be necessarily positive. Therefore,  t(A, B)  must also be positive on the induced graph. However, projected trust on  G  is only based on results on the  (A, B)  induced graph  G' , and the value of  t(A, B)  will necessarily be the same as seen on  G . QED.  We have shown that a determined attacker can manipulate trust if they control some separator on the network. Therefore, it is crucial to avoid hub nodes in the network, and especially the existence of trust through only non-disjoint paths. As the web-of-trust develops, it is important to form trust relationships that connect nodes from regions with long distance.  This result is expected; a separator of size 1 is essentially an Achilles' heel for the system. Such single-points-of-failure necessarily centralize the web-of-trust architecture and completely undermine the decentralized design.  3.5.17 Topology detection through queries  As one of the web-of-trust goals is to disallow malicious agents to learn the global network topology, it is crucial that the default node configuration is to not respond to trust queries initiated by nodes they do not trust. If this mechanism is not employed, a malicious entity can query all known network nodes and eventually deduce the global network topology easily.  The exception to this is bootstrapping nodes, which, due to necessity, must be configured to answer all trust queries. Some \u00ce\u00b5-positive trust can be used as the minimum threshold of trust below which the canonical client does not respond to queries. To ensure queries are authenticated, imagine a query from  A  to  C  about whether  B  is trustworthy. The query must be signed with  A 's  OpenBazaar  private key to ensure topological information is not revealed to unauthorized parties asking for it. The query must be encrypted with  C 's  OpenBazaar  public key to ensure that nobody else can read it, even if the inquirer is authorised. Finally, the response must be signed with  C 's private key, to ensure that trust is not manipulated as it travels the network, and encrypted with  A 's public key, again to ensure topological confidentiality.  In this sense, most trust must necessarily be mutual. However, the topology of the graph still remains directed, as the trust weights can be different in either direction.  3.5.18 Association with other identity systems  It is worthy to attempt an association of the web-of-trust network with other identity management systems. However, given the highlighted differences in the previous section, such an association would compromise some of the security assumptions of the model. It is therefore mandatory that interconnection with other networks is an opt-in option for users who wish to forfeit some of our security goals.  An interconnection with the GPG web-of-trust may be achieved by allowing  OpenBazaar  nodes to be associated with GPG keys. A particular  OpenBazaar  node can have a one-to-one association with a GPG identity through the following technical mechanism: The GPG identity can provide additive trust to the existing trust of the system. To indicate that a GPG key is associated with an  OpenBazaar  identity and that the GPG key owner wishes to transfer the GPG trust to an  OpenBazaar  node, the GPG key owner cryptographically signs a binding contract which contains the  OpenBazaar  GUID of the target node, and potentially a time frame for which the signature is valid. The GPG-signed contract can then be signed with the  OpenBazaar  cryptographic key to indicate that the  OpenBazaar  node operator authorizes GPG trust to be used for their node. The double signed contract can then be included in the metadata associated with the  OpenBazaar  node and distributed through the  OpenBazaar  distributed hash table. Each client can inter-process communicate with the GPG software instance installed on the same platform to obtain access to existing keys and signatures.  Nevertheless, it is advised not to include such an implementation in the canonical client, as traditional GPG webs-of-trust are identity-verifying, not trust-verifying, as explored in the section above. Furthermore, the GPG web-of-trust does not offer any assurances on pseudonymity. While it is possible to exchange GPG signatures anonymously, the GPG web-of-trust is typically based on global topological knowledge of the GPG graph and is distributed through public keyservers. If a user opts-in to interconnect with the GPG web-of-trust, they are forfeiting these benefits of the  OpenBazaar  network.  An interconnection with the Bitcoin OTC web-of-trust is also possible. Existing trust relationships can be imported to the  OpenBazaar  client manually through a file, or automatically downloaded from the Bitcoin OTC IRC bot dynamically upon request, as the Bitcoin OTC website is an insecure distribution channel and does not offer HTTPS. In the dynamic downloading case, the threat model is reduced to trusting the TLS IRC PKI, which is known to be attackable by powerful third parties [DigiNotar].  This web-of-trust has the benefit of being a true-trust web-of-trust, and has a history of support by the Bitcoin community. A double signature is again required to interconnect two identities. The GPG key associated with the Bitcoin OTC network is used to cryptographically sign a binding contract similar to the one described above, and the rest of the procedure is identical to GPG identity binding.  In this case, an Achilles' heel is introduced to the software, as the user is required to trust the Bitcoin OTC web-of-trust operator and the distribution operator, both of which identities can possibly be compromised by a malicious third party. The situation can be improved if the Bitcoin OTC operator begins GPG signing the trust network, or by requiring the Bitcoin OTC trust edges to include GPG signatures by the users involved. However, the topology of the network is again public, forfeiting pseudonymity requirements. Therefore, an implementation is again not advised for the canonical  OpenBazaar  client at this time.  If the user is not concerned with single-points-of-failure and centralization, the web-of-trust can be temporarily bootstrapped by binding identities to existing social networking services which include edges between identities as \"friendships\" or \"follows\". For example, the Twitter and Facebook networks can be used. Such bindings can be weighted with a low score in addition to existing scores as described in the Total Trust section below [6].  Further research is required to determine how such interconnections will impact the security of the network.  3.5.19 Global trust  In addition to the projected trust system provided by the web-of-trust, it is desired to provide some global trust in the network. This serves to allow the network to function with nodes that need to receive trust, but are not associates with other users of the network, or wish to remain pseudonymous even to their friends. In addition, this allows to bootstrap the network for someone who wishes to use it without explicitly trusting any entities.  Global trust mimics the trust given in real-world transactions towards vendors that have invested money in their business, something that can be physically verified. When a buyer visits a physical shop to purchase some item, they trust that the shop will still be there the next day in case their item is faulty; they do not expect the shop to disappear overnight. The reason for this expectation is that it would clearly be unprofitable for the vendor to open and close shops every day, as it costs money to establish a store, and the money needed to establish a store is more than the money a vendor could gain by selling a faulty product.  Similarly, hotels ask for the passport of their residents in order to be able to legally hold them accountable to limit financial risk. While it is possible to create counterfeit passports every other day, it is economically irrational to do so, as building a new identity is more costly than a couple of hotel nights.  In these situations, rational agents are economically incentivised not to cheat on transactions through physical verification of proof that it would be costly to forfeit their identity \u00e2\u20ac\u201c either to create a counterfeit passport or to shut down a physical store overnight. However, in a pseudonymous digital network, such mechanisms need to be established artificially. We start by exploring some approaches to the problem that do not meet our goal: Proof-of-donation and proof-to-miner. Subsequently, we introduce two mechanisms that solve the problem, proof-of-burn and proof-of-timelock, which are combined to form the global trust score.  In all schemes, the person wishing to create trust for a pseudonymous node pays a particular amount of money, which can be provably associated with the node in question. The differentiation comes from whom the payment is addressed to.  3.5.20 Proof-of-donation  In a proof-of-donation (also called  \"proof-of-charity\" in the community) scheme, the pseudonym owner pays any desired amount to some organization, which is hopefully used for philanthropic or other non-profit purposes. The addresses of organizations that are allowed to receive donations would be hard-coded in the canonical  OpenBazaar  client and payments towards them would have been verified by direct bitcoin blockchain inspection by each client. A proof-of-donation first seems desirable, as money is transferred to organizations for good. One possible scenario could include funding the  OpenBazaar  project itself through this scheme.  The technical way to achieve proof-of-donation is to simply make a regular bitcoin transaction with a donation target as its output. The transaction must also include the GUID of the target  OpenBazaar  identity that the donation is used for.  Nevertheless, a proof-of-donation scheme is inadequate for our purposes, as it introduces an Achilles' heel. In particular, if a malicious agent is able to access the private cryptographic keys of one of the donation targets, they are able to game the system and manipulate trust arbitrarily. Compromising the private cryptographic keys can be achieved through various ways by powerful agents; for example, a secret warrant can be issued by a government ordering that the private keys are handed to the court.  This attack would work as follows: The malicious agent first generates a new  OpenBazaar  identity. Subsequently, they donate a small amount of bitcoin to the donation target organization they have compromised, including their  OpenBazaar  node as their target identity in the proof-of-donation, thereby gaining a certain amount of trust. They then use the private keys they control to give the money back to themselves, potentially through a certain number of intermediaries to avoid trackability. Finally, they repeat the process an arbitrary amount of times to gain any amount of trust desired, thereby gaming the system.  3.5.21 Proof-to-miner  In a proof-to-miner scheme, the payment to create trust for an identity is paid to the miner that first confirms the bitcoin transaction which is the proof. This scheme initially seems desirable, as there is no single entity which can be compromised, and it incentivizes the network to mine more, thereby making bitcoin more secure and, in turn,  OpenBazaar  more secure.  Technically, proof-to-miner can be achieved by including an  OP_TRUE  in the output script of the transaction. While anyone is, in principle, able to spend the output of the given transaction, a miner is incentivized to only include their own spending in their confirmation. Alternatively, a 0-output bitcoin transaction can be made, so that all the inputs are given to the next miner as fees. Again it is important to include the GUID of the  OpenBazaar  identity in the transaction.  Unfortunately, it is again possible to game this system. This attack would work as follows: The malicious agent first generates a new  OpenBazaar  identity. Subsequently, they make a proof-to-miner bitcoin transaction with any amount they desire, but they keep the transaction secret. They then perform regular bitcoin mining as usual, but include their secret proof-to-miner transaction in their block confirmation. Including an additional transaction does not increase the cost of mining; therefore this approach can be employed by existing rational miners. If they succeed in generating a block, they publish the secret transaction and they gain identity trust in the  OpenBazaar  network, and can use the money again in the same scheme to increase their trust arbitrarily. If they do not succeed in generating a block, they  keep the transaction secret and double-spend the money in a future transaction in the same scheme, until they are able to generate a block.  3.5.22 Proof-of-burn  Proof-of-burn schemata have been in use by the cryptocurrency community in various settings [CounterParty]. In proof-of-burn, the payment to create trust for an identity is paid in a way that remains unspendable. Because it is unspendable, the system cannot be easily gamed as in the previous approaches.  Technically, proof-of-burn makes a regular bitcoin transaction including an OP_FALSE in the output script of the transaction. Again, the GUID of the  OpenBazaar  identity is included in the transaction to enable blockchain validation.  Proof-of-burn makes Sybil attacks infeasible, as it requires the attacker to create multiple high trust entities in the network, which is costly. In essence, this is equivalent to bitcoin's proof-of-work scheme and leverages the existing blockchain for the proof.  Global trust based on proof-of-burn is based on how much money was burned to establish a particular identity. We use  g(x)  to denote the global trust derived from the fact that an amount  x  has been spent to establish the trust of the identity. We notice that  x  is the sum of all the amounts that has been provably burned for this particular identity. In addition, we notice that when a particular transaction output is used to establish trust towards some identity, this output is necessarily only associated with one identity. Verification of this proof can be done by the canonical  OpenBazaar  client through direct bitcoin blockchain inspection.  x(B)  is a function of the person whose proof-of-burn is to be determined,  B . For simplicity, we will for now denote it as  x .  To determine the numerical trust for the global trust associated with a particular identity, we work as follows. First, we calculate  x  as the sum of verified proof-of-burn amounts, in bitcoin, associated with the target identity.  Next, we use the following function to evaluate the trust towards the identity:  g(x) = 1 - (1/2)^(x/c)  Where:   x  denotes the amount spent for the proof-of-burn   g  denotes the global trust associated with the identity   c  is the  base trust cost* of the system  The  base trust cost  is a hard-coded value in the canonical client which is the amount of money required to establish basic trust in the system. The value can be determined based on the current exchange rate of bitcoin, and can be updated in the future depending on the network's needs. As the value of bitcoin is expected to rise, it is expected that the value for  c  will drop. This has the additional side benefit that historically older accounts accumulate more trust as time goes by, as long as the price of bitcoin rises.  To clarify the rationale of the above equation, note its following values:   g(0) = 0 . A pseudonymous identity that has not provably burned coins has no global trust.   g(c) = 1/2 . A pseudonymous identity that has spent the base trust cost easily establishes a 50% global trust.\n*  lim g(x) = 1 , as  x  approaches infinity. Notice that it takes exponentially more money to approach 100% global trust.  We recommend that the base trust cost is a very small affordable amount for any human user. This will make the cost to enter the network small, but still avoid Sybil attacks. Such schemes have long been used in the literature as proof-of-work to avoid denial of service attacks [Back]. Proof-of-burning has the same benefits as proof-of-working, as it delegates the proof-of-work to the bitcoin blockchain.  3.5.23 Proof-of-timelock  While proof-of-burn is equivalent to proof-of-work [CounterParty], we propose an additional mechanism that can be used separately or in combination with proof-of-burn. In proof-of-timelock, the proof-of-stake ability of a blockchain is leveraged to produce a system that eliminates Sybil attacks without having to resort to the destruction of money or, equivalently, CPU power.  In proof-of-timelock, the individual interested in establishing trust towards a pseudonymous identity provably locks a specific amount of money in a transaction that gives the money back to them. This transaction has the property that it remains unexecuted for a specific predefined amount of time. However, the fact that the transaction is going to take place in the future, the exact amount, and the amount of time of the lock are publicly verifiable.  While proof-of-burn allows identities to be created in a way that is costly to recreate, proof-of-timelock ensures it is impossible that an enormous amount of identities associated with one real-world individual can co-exist at a specific moment in time. Proof-of-timelock is a weaker insurance than proof-of-burn; proof-of-burn can be thought as proof-of-timelock, but for an infinite amount of time.  We predict that people will feel considerably more comfortable ensuring their identities through proof-of-timelock rather than proof of burn. The psychological burden associated with money destruction may not be an easy one to overcome.  Unfortunately, it is currently impossible to create a technical mechanism for proof-of-timelock on the bitcoin blockchain. Bitcoin supports the  nLockTime  value at the protocol level. However, this mechanism is not currently honoured by running nodes [nLockTime] and the transaction will not be broadcast in a way that is verifiable.  A Turing-complete blockchain such as Ethereum [Wood] allows an implementation of this mechanism. Nevertheless, we are reluctant in using this scheme, as Turing-complete blockchains are yet to be proven feasible in practice and may pose problems in terms of scalability, performance, and fees.  As such, we recommend proof-of-timelock as an alternative mechanism, but further research is needed to conclude whether it is feasible as an underlying mechanism for a decentralized anonymous market.  3.5.24 Total trust  Based on the projected and global trust metrics presented above, we propose the following measure as the total trust towards a network node:  s(A, B) = (1/2) * t(A, B) + (1/2) * g(x(B))  The projected and global trusts are added together to produce the total trust as seen from  A  to  B . The weights used here are 50% for each, but it is advised to tweak these weights based on empirical evidence during development. For advanced users, the weights can be customizable.  The total trust can then be displayed in the user interface of the node of user  A  when she is viewing the profile of user  B . Additional interface elements that are possible to include can be the exact amount of money spent in the proof-of-burn scheme, as well as the direct links yielding the cumulative projected trust for the particular target through induction.  3.5.24 Conclusion  We have introduced a new mechanism to allow for fully pseudonymous webs-of trust. The web-of-trust is developed in a way that allows conveying true trust and not simple identity verification. Furthermore, anonymity is preserved through only partial topological disclosure. The notion of graph distance is maintained through an attenuation factor. The web-of-trust is designed to be used in a commercial setting, where trust is an indispensable tool for trade.  The web-of-trust is bootstrapped through trust to a seed set of nodes, which requires the user to explicitly opt-in if they wish to trade illicitly.  Introduction to the trust system is obtained through global trust, which is weighted along with projected trust. Global trust is achieved through a proof-of-burn mechanism, and an alternative proof-of-timelock mechanism is explored. Together, these mechanisms allow a calculation of total trust between nodes.  In parallel with our proposals, we illustrated security concerns on mechanisms that are not appropriate for such an implementation, such as proof-of-donation and proof-to-miner, and we developed an attack on the web-of-trust through\ngraph separator control.  Overall, this pseudonymous trust system can be used in a commercial setting such as  OpenBazaar . It is strengthened when supported by Ricardian contracts\nto create binding agreements between parties through the security of the Bitcoin blockchain and should not be used alone.  3.5.25 Notes    It may be meaningful to distinguish trustworthiness of a pseudonymous individual in different roles; for example, a person who is a trustworthy\n   merchant may not be a trustworthy judge. Hence, trust to buy from a person may be different from trust to mediate. However, for now, we are assuming\n   that this trust is the same under our projection mechanism.    GPG distinguishes between trusting the identity binding between a real-world individual and a key and the trust directly given to an individual\n   as far as they are concerned about  signing  other keys. In a similar setting as blurring the trust between different roles, we consider these to be the same.\n   In the  OpenBazaar  web-of-trust, trust is an intuitive concept and there need to be no formal rules followed when trust is given to others. The every-day\n   statement \"I trust this person\" corresponds to actually giving trust to an individual. This is in contrast to the GPG web-of-trust in which signing keys\n   requires a certain procedure of identity verification with which individuals may not be familiar with, and hence this differentiation is in order.    The use of the word \"pseudonymous\" as a qualifier of the web-of-trust is mistaken. The web-of-trust itself is not pseudonymous, nor are the edges,\n   in the sense that there is no pseudonym associated with the web-of-trust or the edges themselves. The web-of-trust and edges are \"pseudonymious\"; that is, related\n   to the concept of pseudonymity. However, the word pseudonymous is more understood in the literature, and we are opting for its use in this context,\n   while understanding this subtle distinction.    We do not distinguish between uncertainty of trust and certainty in neutral trust as other authors [J\u00c3\u00b8sang]. It may be helpful to employ such distinction\n   in future versions of the web-of-trust.    This algorithm is a draft. Please leave your comment on potential attacks and vulnerabilities it may have. It seems too simplistic to be able to work in\n   the real world and may need considerable tweaks.    The author strongly advises against such interconnections. The threat model of the  OpenBazaar  network is completely forfeited if such trust relationships\n   are used. Centralized, non-anonymous services for trade such as eBay are widespread and can be used in  OpenBazaar 's stead if these assurances are of no\n   concern to the user.    This simple transitivity scheme is flawed and it must be reworked. Currently, trust is impossible to calculate if cycles exist in the network graph. As\n   the topology is only partially known, it is not trivial to detect cycles. Furthermore, basic cycle detection mechanisms used in routing protocols may\n   easily compromise the anonymity of the network by revealing non-local topological information. The formulae to deduce trust must be reworked to take\n   this important issue into consideration. It may be possible to avoid cycle detection and employ a mechanism which converges to the actual trust with good\n   probability if some randomness factor is used to decide responding to queries whose answer is not known.    3.5.26 References   P.R. Zimmermann. The Of\u00ef\u00ac\u0081cial PGP User\u00e2\u20ac\u2122s Guide. MIT Press, 1995  Patrick Feisthammel, 7 Oct 2004, http://www.rubin.ch/pgp/weboftrust.en.html  OpenBazaar : http:// OpenBazaar .org/  Satoshi Nakamoto, Bitcoin: A Peer-to-Peer Electronic Cash System, 2008  Sanchez Washington, 23 June 2014, https://github.com/ OpenBazaar / OpenBazaar /wiki/Contracts-and-Listings  I. Clarke, O. Sandberg, B. Wiley, and T.W. Hong. Freenet: A distributed anonymous information storage and retrieval system. In Proc. Int. Work- shop on Design Issues in Anonymity and Unobservability, volume 2009 of LNCS, pages 46\u00e2\u20ac\u201c66, 2001.  Freenet WoT: https://wiki.freenetproject.org/Web_of_Trust  OTC: http://wiki.bitcoin-otc.com/wiki/OTC_Rating_System  GPG identity: http://lists.gnupg.org/pipermail/gnupg-users/2013-March/046364.html  Gilson, David (2013-06-18). \"What are Namecoins and .bit domains?\". CoinDesk, http://www.coindesk.com/what-are-namecoins-and-bit-domains/  Namecoin ID: https://wiki.namecoin.info/?title=Identity  A. Narayanan, V. Shmatikov, De-anonymizing Social Networks, IEEE Security and Privacy 2009.  J. Douceur. The Sybil Attack. In Proc. of the IPTPS \u00e2\u20ac\u212202 Workshop, Mar. 2002.  A. J\u00c3\u00b8sang. An Algebra for Assessing Trust in Certification Chains. Proceedings of the Network and Distributed Systems Security Symposium, 1999.  CounterParty, Why proof-of-burn: https://www.counterparty.co/why-proof-of-burn/  A. Back, Hashcash - A Denial of Service Counter-Measure, Aug. 2002.  nTimeLock: https://bitcointalk.org/index.php?topic=321550.0  G. Wood. Ethereum: A Secure Decentralised Generalised Transaction Ledger.  J. R. Prins, DigiNotar Certificate Authority breach, Sep. 2011.  M. J. Barratt, Silk Road: eBay for drugs. Addiction, Volume 107, Issue 3, page 683, Mar. 2012.  B.C. Popescu, B. Crispo, and A.S. Tanenbaum. \"Safe and Private Data Sharing with Turtle: Friends Team-Up and Beat the System.\" In 12th International Workshop on Security Protocols, Cambridge, UK, April 2004.", 
            "title": "3.5 A Pseudonymous Trust System in OpenBazaar"
        }, 
        {
            "location": "/03.-OpenBazaar-Protocol/#36-dispute-resolution", 
            "text": "Multisignature escrow addresses are the key to managing risk for trades between peers on  OpenBazaar . These addresses mathematically ensure that a single agent is incapable of stealing funds from an address using their private key alone. Furthermore, multisignature addresses can be designed to accommodate several parties within a voting pool as  previously discussed .   In a typical 2-of-3 multisignature transaction in  OpenBazaar , the first two signers are the buyer and seller. The third signature is a 'trusted' third party who has the power to sign a transaction in combination with the buyer or seller in the event of an accident, key theft, or dispute. The third party signer, a notary, in  OpenBazaar  also acts as the third signer of Ricardian contracts for the sale of goods and services, to leverage the many strengths of  triple-entry accounting  particularly for settling  disputes .  Dispute resolution is a fundamental component to success of  OpenBazaar . As the goal of  OpenBazaar  is to create a decentralised and censorship-resistant marketplace, State-mediated dispute resolution is out of the question. Thus, our model should follow non-State services, also known as alternative dispute resolution (ADR).   Many forms of ADR exist in the  legacy  marketplace. ADR aims to avoid final adjudication by the State in order to reduce overall costs, save time, and potentially prevent an adversarial outcome between the contending parties after the dispute has been resolved. Rather,  OpenBazaar  aims to create a marketplace for ADR, alongside goods and services, to settle disputes between peers.   3.6.1 Dispute Resolution  3.6.1.1 Notaries  Thus far the proposals for various market implementations within  OpenBazaar  (and other decentralised marketplace proposals) have assumed that a third party in a transaction (i.e. the third signer in a 2-of-3 multisignature escrow address) performs two roles:   Notarising  contracts and transactions   Arbitrating  disputes between two or more in parties   The  notary  aspect of their service includes digitally signing contracts and transactions in the event of a dispute between the buyer and seller. The arbitration aspect of their role is to decide who the winning side is in a dispute between the buyer and seller. However, this overlapping notary-arbiter model is prone to several weaknesses:   There is a conflict of interest between the arbiter and disputing parties  There is a practical burden on a single agent to perform all of these tasks simultaneously for potentially dozens/hundreds of transactions/trades  There is a slight disincentive for the buyer and seller to carefully choose a suitable arbiter prior to a dispute arising    A possible solution is to divide these services, to be provided by separate agents:    A notary, to focus exclusively on signing Ricardian contracts and creating/signing multisignature transactions  An arbiter, dispute resolution as an independent and exclusive service on  OpenBazaar   Pamela Morgan expands on this concept:   The ideal third party will be professional, knowledgeable about the technology and security protocols, and independent of business operations. Why are these characteristics important? Professionalism is important because the third party will be your backup to access funds in the event a signer becomes unavailable.   The third party should be reliable, available upon short notice, communicative, and responsive. The third party must be knowledgeable in the technology, have a thorough understanding of how to use multi-signature accounts, and best practices for security \u00e2\u20ac\u201c such as offline key generation and storage.   They should understand principles of conflict of interest and be able to maintain a distance from operations, so that they will not be subject to coercion or other undue influence. A disinterested third party also provides investors, employees, and the community with an increased level of protection thereby justifying an increased confidence in operations as evidence of good corporate governance.   Source:   Multisignature accounts for corporate governance  3.6.1.2 Notary Responsibilities  A notary's responsibilities include:   Digitally signing the Ricardian contract between two or more parties  The notary serves as a witness to the contract and independent auditor as per triple-entry accounting  The notary offers the final bitcoin pubkey for the creation of the multisignature escrow address    Releasing funds from a multisignature escrow address as a result of:  A late-signing buyer ( lazy transactions )  A dispute between the buyer and seller, releasing funds according to the arbiter's judgement  Selecting a tie-breaking arbiter for an arbiter pool  'Hand-holding' new users in using  OpenBazaar  for the first time   Given the role that notaries will play in exchanges in  OpenBazaar ,  their services would need to be available essentially 24/7 . Of the responsibilities listed above, the first can be entirely  automated  and capped according to the notary's preference. The second responsibility requires the attention of the notary in order to sign the transactions. After successfully receiving the good, the buyer may be delayed in signing a transaction to release funds from the multisignature escrow address to the seller. In this case, the notary is involved to release these funds. In the event of a dispute, the notary prepares a transaction according to the arbiter's judgement for signing in combination with the 'winning' party. Of course, the notary doesn't need to fulfill this role if both the buyer and seller perform this function themselves. If a dispute arises where an arbitration pool is requested from the buyer and seller, the notary can be called upon to choose a tie-breaking arbiter according to their preference prior to the  hearing  of the dispute. Finally, the notary can offer to supervise new users through a transaction, explaining each step of the process and troubleshooting potential issues.  3.6.1.2 Notary Fees  While the market will ultimately determine the fee structure, we assume that automated services such as contract signing (role #1 above) would be offered freely, subsidised by other services requiring the notary's directly involvement. As for the appropriate value of the fee, we expect it to be equal to or lesser than a typical bitcoin transaction fee. This fee can either be paid as a refundable deposit from both parties, or deducted from the price of the good being sold.  3.6.1.3 Advantages and Challenges  There are several advantages to using a dedicated notary service for 3rd party contract and transaction signing. Firstly, and perhaps most importantly, there is an effective separation between the power to release funds from a multisignature escrow address, and dispute resolution between two parties. As a result, notary and arbitration services can be independently assessed and rated for their efficiency.   Secondly, there is a market created for notary services for the timely fulfilment of their obligations in a trade, especially triple-signing Ricardian contracts. In the event of a dispute, the final cost in fees and time is slightly higher than in a role where notary and arbitration services overlap within a single agent. However, the increase in dispute costs may incentivise greater care in arranging exchanges within  OpenBazaar  to specifically avoid these fees.  3.6.1.4 Practical Implementation into  OpenBazaar  How will the separation of notary and arbitration services into separate agents affect the end-user experience and overall mechanics of a transactions? Firstly, similar to the original model, the end-user begins their  OpenBazaar  experience by selecting preferred notary service providers for all future transactions. In selecting a notary, a user should prefer services that are automated with 24 hour response time when 'human interaction' is required.  Ideally, the client will select a notary service provider that is present on both the buyer and seller's 'preferred list', or an overlapping notary up to X degrees of freedom from the buyer and seller's Web of trust. For example, the buyer has a friend who shares a preference for a notary with the seller's friend of a friend (2 degrees of freedom). Failing this, the client can either randomly select a notary agent based on their reputation metrics.   Finally, while it is the recommendation of this author for users to separate notaries from arbiters, the client will not impose this model. As the notary/arbitration market is a specialised service for  OpenBazaar , users will be able to browse through various users offering notary and/or arbitration services. Ultimately the market will pick an approach that seems to be the most efficient.  3.6.1.5 Notary Inclusion into Contracts  We predict that there will be two ways notaries will be included into the contract formation process. The first way is  offline , which requires the contract to be digitally signed and passed along to the next party after inclusion of new information (demonstrated below):   This process is somewhat tedious, but necessary to establish the proper authentication chain to avoid possible attacks/disputes. Alternatively,  online  contract formation requires all parties to be online simulatneously to rapidly establish the terms of the contract and attach their digital signatures only once:   It is important to note that the client isn't required to create these contracts, which can be made externally and imported into the client to streamline the digital signing and notary/arbitration process.  3.6.2 Negotiation  For dispute resolution between peers on  OpenBazaar , the two major forms of ADR to be implemented are:   Negotiation:  where both parties directly arrive at a resolution of a dispute.  Arbitration:  where a third party is invited to resolve a dispute   Negotiation  is a preferable approach to dispute resolution as it does not involve intervention by a third party, not even the notary of the transaction. Negotiation between the buyer and seller seeks to resolve the conflict by discourse between the parties. The transfer of bitcoins from the multisignature address can be accomplished by both parties after a successful negotiation.  Negotiation on  OpenBazaar  can take place over any communication platform inside or outside of the client software. The client currently supports encrypted communication from node to node, and also integrates BitMessage. For real-time negotiation, platforms such as CryptoCat may be an easy to use messaging platform that supports off-the-record encryption. In addition, the DarkWallet client also supports private communication channels.   The details and outcome of a negotiation do not need to be written down or formalised in any way. Every effort should be made by both parties to resolve disputes between themselves to preserve favorable reputations and avoid arbitration fees. However, not every dispute can be resolved peer to peer negotiation; an outside party is required to arbitrate.  3.6.3 Arbitration  Arbitration  involves an independent party, made up of a single or multiple agents, reviewing the details of a dispute and deciding where the fair allocation of property titles should be awarded to. As explored previously, the arbitrating agent shouldn't be the third signer in a multisignature escrow address. Rather, the tgiry signer (a notary) should be a neutral party that can be contractually subject to the outcome of the arbiter's decision.  3.6.3.1 Arbiter Selection  In the event of a dispute between a buyer and seller, if negotiation has failed to resolve the dispute, an arbiter must be employed. To begin the process, both parties inform the notary that a dispute has arisen. The notary's primary role in the event of a dispute is to create and sign a transaction according to the judgement of the arbiter(s). However, this function can be performed by the disputing parties in order to avoid notary fees.   There are three possible ways for an appropriate arbiter to be selected:   Client matching  As with notaries, the client attempts to select an arbiter automatically based upon the 'preferred arbiter' list from both parties.  An extention of this concept is to the use the web of trust to find overlapping preferred arbiters from the buyer/seller's trusted and/or positively rates peers  Consensus selection  The buyer and seller agree upon an arbiter based on their examination of the arbitration market  In the event that the buyer or seller is  inactive  in making a decision within a reasonable amount of time (which may need to be stated in the contract), the notary and the other  active  party can select an arbiter.  If the buyer and seller cannot agree on a single arbiter that they both prefer, they can form an arbitration pool make up of the buyer, seller, and notary's preferred arbiter.  Notary-Arbiter servicing  Here, the notary and the arbiter are the same agent. As this agent is selected before the exchange takes place, the notary-arbiter simple proceeds to judge the dispute immediately.  While this is the most efficient approach in terms of time, there are drawbacks to this approach we are explained above. However, users will not be restricted from excercising this option.   3.6.3.2 Arbitration Contracts  As arbitration is fundamentally a service, a service contract can be drawn up between all interested parties that will need to include:   Arbiter's details  GUID  Bitcoin pubkey  PGP key  Fee    Dispute details  Nonce of the contract in dispute  Hash of the contract  Estimate arbitration time    Dispute claims from both parties  Decision conditions (applicable only to multiple arbiters, indicating if a majority or consensus decision is required)    Formatted correctly, the arbitration contract may look something like this:  {\n         arbiter : {\n             arbiter_GUID :  drwasho_abc123 ,\n             arbiter_BTCuncompressedpubkey :  04d09c05c84a73344ee3b03d03fdf4a6bff2b1c4e15ffeb7403b91b0815be8b03ee50ade6b28d27aabc7c56cf679f74acec3d8e760595f5878caec12edd32938ea ,\n             arbiter_pgp : [\n                 mQENBFMKYTUBCADD6kIAjBlJ2Q0NEd97aia0BSBibO1C2lVemWig5cNATeob1McWoEo3QznZ ,\n                 f9LaRsuo+ryyqEeXx4p9m9FG/TDeeZvOaiSo2Pg5MtgAdxwJK3ZQ+6b6DjrfYRZplD4qVsQd ,\n                 /GhxDr733NBdTpfvE8rYrAttNeU8P9vZpJuU+ESSRNb8Sbgfrym2i7xeMP6/xnyfTunXti7x ,\n                 sJzFkGIoF1dc+HntP2b9oSy1y0P5n0FdGt7IaEEtN1AZwAfFJ0obSlXiVdWdPwyambAzj93V ,\n                 XD//KxXyxAHjqFD+sdqDzqxBTZ/MC/YCMU1UQ5hvWsx7FRqubLhyMB1p1ycvdnX6nqdTABEB ,\n                 AAG0KFNhbSBQYXR0ZXJzb24gPHNhbUBzYW11ZWxycGF0dGVyc29uLmNvbT6JATkEEwECACMF ,\n                 AlMKYTUCGwMHCwkIBwMCAQYVCAIJCgsEFgIDAQIeAQIXgAAKCRCI0UoG/7KgjtsoCACaiEO1 ,\n                 0u22dGDSuBLvFV2UIhyh2Cj9+KEGe7qHlohwbFHqwT+/6B7P5CmBggqL0abMqEqkUCOxk7g4 ,\n                 rBdCSMeqGe+7VdsXVnNAlEYGd6AqQxfcIPV/r/E0qCUQcJbBxjO8rr7il2o4b98AeU8GB6qU ,\n                 8YFblsCv0KlFRYhDngHVfRMpvsTm9NMcm99P6n/UVn2mrhk50EqJMHB7T+b4n0fWQj5M9340 ,\n                 lmVWnn1i1w3+yDC0v4yLS9UuSuL3UsnC6CP7XPA2z5iVqoTH+i0WguGgGgyUpPIQexGm/IKx ,\n                 b5Bb/rRsKpcXtdIT7Vr5US4XtCBe9zWvSWyEAz3llYA/OGx+uQENBFMKYTUBCACToWiWhjWI ,\n                 aJM1pD0TXTk/IbNWZPhJpfAiYy3EsYwckvAY1Q6yOSWydakimpr+93oBpJpY9y6Aj8GDBNyv ,\n                 eaAomK2jYV0cqxhOzAH2UgSLptFQawxwR/8+rLz5KDZQGT8SNNDwV7FtFT4ubzeH+ILugnJp ,\n                 Jo83IjoU5Vg3g1d75Tc38KLd8VbwZ52QcxNaoxoEHQoF8Q+2rRNPwRRr5NX71jQPA6Pxuzpd ,\n                 mTogQ5gIA3Zr4cDrxAAPCZAo/bDJF3jhd9lpZXFudlyCwbRNF3qfG9L0S7ES+zIfXFWmryQb ,\n                 CUg4pcRfbaN9OY6GWzjOLOzXzEehd7sNbNCKEP3tWqbjABEBAAGJAR8EGAECAAkFAlMKYTUC ,\n                 GwwACgkQiNFKBv+yoI4kHQgAiz6mQz0GeOfB60ILe1R/9fkYtejFTTb5P8H/w19S2WM+gFyb ,\n                 R4BTg0OSN0YhcmzIzgy1zF1/J+noxEVUS5zbGLytVgLFECyOinFZUc0A/b0nuermvKFuF7GJ ,\n                 QcV3Gz1HCNrfaWK7LW5hGTdQZtaFtEmla6Wk+v1MHWWW2K9Ez0KXCqrK5b0Oji2MUh8LRh2p ,\n                 mmciki/R0pXXMYMJpeb9IPwOlbIqm8xT4Z93rPYyOwmgii1Dy3Gop/Ofq4yU7GGxjjALR+JM ,\n                 yebij7AblNTCSgWXm/QV+ejZH0bR91FbtjdVKoFo6qrL04zuRbBFm2wHv+CYNKwRR2PPcCB/ ,\n                 dQaGpQ== ,\n                 =IB1U \n            ],\n             arbiter_fee :  0.01 BTC \n        },\n         arbitration : {\n             contract_nonce :  01 ,\n             contract_hash :  f22fee51c64dd36afb158769d6dacf95a982777997f96f5e9a25b97da64d9457 ,\n             contract_arbitration_time :  7 days \n        },\n         buyer_claim : [\n             The seller never sent me the turtles! \n        ],\n         seller+claim : [\n             The buyer hasn't paid for the wee turtles even though I sent them. \n        ]\n}  The digital signatures of the buyer, seller, and notary are appended to the contract and sent to the arbiter for their approval. If the arbiter agrees to hear the case, he/she appends their details and digital signature to the contract, sending back to the interested parties. The case can now be considered open, with the format and presentation of the evidence to be arranged between them.  3.6.3.3 Arbitration Market and Precedents  The  arbitration market  is a dedicated marketplace featured in the client listing agents offering notary and/or arbitration services in  OpenBazaar . These agents will list the duties they perform, the estimated response-time for their services, and fees. In addition to these, arbitration service providers can also display a list  precedents  that they themselves have established or other arbiters have published in order to give an expectation of service  process  and  quality .  Precedents , the legal standards formed due the application of consistent rulings on similar cases, will become a key performance predictor and indicator of an arbiter's capacity to fairly administer justice on  OpenBazaar . It is difficult to predict how precents will be formatted, but some considerations are most likely:   Consent  Both parties must consent to their case being published as a precedent for the arbiter  Anonymisation of disputing parties  All traces of the identities (pseudonyms, bitcoin addresses etc) of the disputing parties is  removed  Dispute cateogrisation  What type of dispute is  claimed  (i.e. failure to deliver physical good, failure to perform service etc)  Process  The objective of a precedent is to demonstrate to potential clients the process they can expect from the arbiter (i.e. what evidence needs to be provided, timeframes, what the outcomes are if a party fails to demonstrate necessary evidence, what consitutes as evidence)  Process for strictly anonymous transactions will be important for certain types of sensitive transactions  Resolution  If the arbiter rules in favor of the buyer or seller (a specific claim), what was the outcome of the resolution in terms of payment  Fees  What were the fees for resolving this type of dispute?   If the dispute took extra time than expected, what was charged?   Arbiters may offer their services  pro-bono  in order to build up a case history of precedents to market themselves for future employment. Alternatively, new arbiters may cite  precedents  from other well-known and highly rated arbiters to indicate a pattern arbitration for similar cases. Ultimately, through the use of precedents and an arbitration market, a polycentric merchant law is expected to arise in  OpenBazaar .  3.6.3.4 Appeals  A later innovation of market arbitration can be the formation of an appeals process to resolving disputes. Prior to the initial round of arbitration, both parties can agree to establish a 3-tier appeal process. Each arbitration tier may consist of arbiters of increasing quality and/or quantity, and therefore price. In the outcome of a first-tier arbitration decision that leaves the losing party dissatisfied, the losing party may appeal to the second-tier arbiter. The contract and dispute records are all forwarded to the second-tier arbiter who first determines whether the case should be heard. Consideration of the case may attract a fee, which could be paid by the appealer. If the case is heard, a second round of arbitration begins; if not, the standing judgement of the first arbiter remains and the notary prepare and signs a transaction accordingly.", 
            "title": "3.6 Dispute Resolution"
        }, 
        {
            "location": "/04.-Marketplaces/", 
            "text": "4. Marketplaces\n\n\nTrade verticals\n in \nOpenBazaar\n refers to types of markets that can be built on top of the platform. In the theory section of the \nGithub Readme\n, I have attempted to describe in minor detail how different types of markets can be built on the platform. \n\n\nThese include:\n\n\n\n\nE-Commerce\n\n\nPhysical goods\n\n\nFixed price\n\n\nAuctions\n\n\n\n\n\n\nDigital goods\n\n\nServices\n\n\nService Contracts\n\n\nInvitation to Tender (ITT)\n\n\nTradeNet\n\n\n\n\n\n\nService Listing\n\n\nGood Performance Bonds\n\n\nLending\n\n\nP2P lending\n\n\nBonds\n\n\n\n\n\n\nFinancial securities\n\n\nStocks\n\n\nFutures (bounded futures) \n\n\nOptions\n\n\nSwaps\n\n\n\n\n\n\nDecentralised Currency exchange\n\n\nInsurance\n\n\nCrowd funding\n\n\nPrediction markets \n\n\n\n\n\n\nOne question we are often asked is 'can \nOpenBazaar\n support X market?'... The answer is \nyes\n if the terms and conditions can be fully represented in a RC and Bitcoin is being used for the trade in exchange or to collateralise an exchange. \n\n\nThe challenge for \nmarket developers\n is to design RCs that capture the semantic detail of a trade to:\n\n\n\n\nEstablish consensus between the trading parties\n\n\nPrevent all reasonable foreseeable disputes, based on \nhearsay\n\n\nEfficiently process on the OB network between the trading parties (i.e. an efficient signing order) \n\n\n\n\nTo incentivise good performance by each party, surety bonds can also be written into the contract. Surety bonds essentially reward or penalise a trading party based on performance criteria, which would be clearly stated within the RC. \n\n\n4.1 E-Commerce\n\n\n4.1 Physical Goods\n\n\nFixed Price Sales\n\n\nTrade Flow\n\n\n\n\nMerchant creates and lists contract\n\n\nListing includes notary guid and pubkeys (which the client can verify)\n\n\nMaybe if the verification fails (3 strikes rule or something) the buyer's node can prune the guid from nodes that they relay or connect to\n\n\nIncludes processing time (maximum time the item must be shipped after receiving an order)\n\n\nBuyer places an order\n\n\nAppends network ID, pubkeys (PGP and bitcoin multisig escrow), semantic data unique to the item\n\n\nAppends shipping address (encrypted to merchant's public PGP key)\n\n\nGenerates and appends 32 byte chaincode to create multisig address\n\n\nAppends \ntxid\n of funding that multisig address\n\n\nMerchant ships item\n\n\nIncludes tracking number\n\n\nIncludes signed payout transaction releasing funds from multisig to merchant (i.e. 1 signatures of the 2-of-3 multisig)\n\n\nBuyer confirms item received\n\n\nAppends a message (if any) and rating/review data\n\n\nSigns and broadcasts payout transaction to merchant\n\n\nAppends \ntxid\n of payout transaction\n\n\n\n\nExample of listing contract\n\n\n{\n    \n01_merchant\n: {\n        \n01_listing\n: {\n            \n01_metadata\n: {\n                \n01_obcv\n: \n,\n                \n02_expiry\n: \n,\n                \n03_category\n: \n,\n                \n04_category_sub\n: \n,\n                \n05_order_flow\n: [\n                    \nmerchant\n,\n                    \nbuyer\n,\n                    \nmerchant\n,\n                    \nbuyer\n\n                ]\n            },\n            \n02_id\n: {\n                \n01_guid\n: \n,\n                \n02_pubkeys\n: {\n                    \nbitcoin\n: \n,\n                    \npgp\n: \n\n                },\n                \n03_handle\n: \n,\n                \n04_passcard\n: \n,\n                \n05_contact\n: {\n                    \nbitmessage\n: \n,\n                    \nemail\n: \n,\n                    \nsubspace\n: \n\n                },\n                \n06_role\n: \nmerchant\n\n            },\n            \n03_item\n: {\n                \n01_title\n: \n,\n                \n02_description\n: \n,\n                \n03_condition\n: \n,\n                \n04_price\n: {\n                    \nbitcoin\n: 0\n                },\n                \n05_shipping\n: {\n                    \nest_delivery\n: \n,\n                    \nregion\n: \n\n                },\n                \n06_images\n: {\n                    \nimage_hashes\n: [\n                        \n,\n                        \n,\n                        \n,\n                        \n,\n                        \n\n                    ],\n                    \nimage_urls\n: [\n                        \n,\n                        \n,\n                        \n,\n                        \n,\n                        \n\n                    ]\n                },\n                \n07_keywords\n: [\n                    \nkeyword1\n,\n                    \nkeyword2\n\n                ]\n            },\n            \n04_notary\n: {\n                \n01_guid\n: \n,\n                \n02_pubkeys\n: {\n                    \npgp\n: \n,\n                    \npubkey\n: \nxxx\n,\n                    \npubkey_selfsig\n: \nXXX\n\n                },\n                \n03_handle\n: \n,\n                \n04_passcard\n: \n\n            }\n        },\n        \n02_signatures\n: {\n            \nbitcoin\n: \n,\n            \npgp\n: \n\n        }\n    }\n}\n\n\n\n\nAuctions\n\n\nIt is becoming increasingly clear that \nOpenBazaar\n will become a powerful platform that will support a variety of peer-to-peer market transactions. One of the most fundamental market transaction types is the \nauction\n of a good by a seller to discover the market price. In this article, we cover one possible way of auctioning a good using \nRicardian contracts\n. \n\n\nIt should be noted that this proposal essentially describes the 'back-end' of implementing Ricardian contracts into auctions on \nOpenBazaar\n. It is important that the end-user (i.e. your mother, grandfather etc with novice skills) will be unaware of digital signing, hashing etc occuring in the background unless they choose to be, in order to lower the technical barrier of entry for using \nOpenBazaar\n.\n\n\nThe merchant firstly selects an \nauction\n template contract in \nOpenBazaar\n. In this type of contract, the product and auction details of the good to be sold are entered into \nrequired\n fields within the JSON or XML file. The product auction details would include:\n\n\n\n\nThe name and description of the item\n\n\nA minium sell price, if any\n\n\nA 'buy now' price, if desired\n\n\nAn expiration date for the auction\n\n\nA blank field for a bidder to enter their price\n\n\n\n\nFor example, let's imagine Alice wants to sell a yellow pinata on \nOpenBazaar\n. After digitally signing it, the \nauction_contract\n looks something like this:\n\n\n{\n   \n01\n : {\n      \n01_listing\n : {\n         \n01_metadata\n : {\n            \n01_obcv\n : \n,\n            \n02_expiry\n : \n,\n            \n03_category\n : \n,\n            \n04_category_sub\n : \n,\n            \n05_order_flow\n : [ \nmerchant\n, \nbuyer\n, \nmerchant\n, \nbuyer\n ]\n         },\n         \n02_id\n : {\n            \n01_guid\n : \n,\n            \n02_pubkeys\n : {\n               \nbitcoin\n : \n,\n               \npgp\n : \n\n            },\n            \n03_handle\n : \n,\n            \n04_passcard\n : \n,\n            \n05_contact\n : {\n               \nbitmessage\n : \n,\n               \nemail\n : \n,\n               \nsubspace\n : \n\n            },\n            \n06_role\n : \nmerchant\n\n         },\n         \n03_item\n : {\n            \n01_title\n : \n,\n            \n02_description\n : \n,\n            \n03_condition\n : \n,\n            \n04_price\n : {\n               \nbitcoin\n : 0.0\n            },\n            \n05_shipping\n : {\n               \nest_delivery\n : \n,\n               \nregion\n : \n\n            },\n            \n06_images\n : {\n               \nimage_hashes\n : [ \n, \n, \n, \n, \n ],\n               \nimage_urls\n : [ \n, \n, \n, \n, \n ]\n            },\n            \n07_keywords\n : [ \nkeyword1\n, \nkeyword2\n ]\n         },\n         \n04_notary\n : {\n            \n01_guid\n : \n,\n            \n02_pubkeys\n : {\n               \npgp\n : \n,\n               \npubkey\n : \nxxx\n,\n               \npubkey_selfsig\n : \nXXX\n\n            },\n            \n03_handle\n : \n,\n            \n04_passcard\n : \n\n         }\n      },\n      \n02_signatures\n : {\n         \nbitcoin\n : \n,\n         \npgp\n : \n\n      }\n   }\n}\n\n\n\n\n\n\n\nBob accesses the contract and chooses to bid on the pinata, appending his ID details and the bid price. Alice may receive five different bids on the yellow pinata and according to her conditions, the originally contract is updated with the latest bid price. At the end of the expiration date of the contract, Alice digitally signs the final winning \nbid contract\n, sends it to the arbiter for digitally signing and creating a multisignature bitcoin address for the winning bidder, Bob. \n\n\nDue to the architecture of the P2P network setup, Alice may not be available 24/7 during the term of her \nauction contract\n to update the market on the latest bid price of the item. As a result, she may choose to upload her contract on a 24/7 accessible node (a \nnegotiator node\n) that acts as a contract \nserver\n. If so, the \nnegotiator node\n will create their own contract for the item, digitally sign \nbid contracts\n, update the \n\"current_bid\"\n, and turn over the final \nbid contract\n to Alice for her digital signature at the end of the contract/auction expiration date. If Alice digitally signs the contract, the contract is sent to an arbiter for sigining and creation of the multisignature bitcoin address for Bob, the winning bidder, to send funds to. As a reward for hosting the contract, the \nnegotiator node\n is rewarded by a fee paid for by Alice (via another multisignature address setup with anoter arbiter). If Alice disapproves of how the contract was negotiated by the \nnegotiator node\n on her behalf, she can simply refuse to sign the contract and raise a dispute to the arbiter for a refund of the fee from the multisignature address.\n\n\nInsurance\n\n\nFor the seller (Alice), she can have confidence that the funds for the item actually exist once Bob has sent the required amount of bitcoins to the multisignature bitcoin address, upon which she will ship the item to Bob's designated address. Similarly for Bob, he can retrieve the funds from the multisignature address if he can prove to the arbiter's satisfaction that he goods either did not arrive, or did not arrive in the condition specified in the contract.\n\n\nTo further promote good behavior, the arbiter may require a \nsurety bond\n from one or both parties. The surety bond is a quantity of bitcoins sent from either the buyer or seller (or both) held in a multisignature bitcoin address that is refundable upon a successful trade. If a dispute arises, and one party is found to be at \nmalicious\n fault, the funds within the surety bond are transferred to the arbiter and opposing party as compensation.\n\n\nA \nnon-malicious\n versus \nmalicous\n fault may be, for example, a shipping comapany damaging the goods during transport (\nnon-malicious\n) versus the seller knowingly sending a damaged good (\nmalicious\n). The value of the surety bond is negotiable and completely optional. However, it is reasonable to expect that surety bonds will become less necessary between individuals with a high \nweb of trust\n reputation and/or \nproof of burn\n identity.\n\n\n4.2 Services\n\n\nIndex:\n\n\n\n\nService Contracts\n\n\nInvitation to Tender (ITT)\n\n\nService Listing\n\n\nGood Performance Bonds\n\n\n\n\nA service contract in \nOpenBazaar\n replaces a physical good to be sold with the terms and conditions of a service to be performed by one party. The distinction between a good and service within a Ricardian contract is minimal. Morever, the combination of reputation management and surety bonds can ensure a robust service industry within \nOpenBazaar\n.\n\n\nService Contracts\n\n\nThe final format of a service contract is of course comparable to that of a physical good. Similar to physical goods, there are several discovery mechanisms for services on \nOpenBazaar\n.\nFor the sake of simplicity, we will examine two types of service contracts that can be supported in \nOpenBazaar\n, following the Ricardian contract model:\n\n\n\n\nInvitation to Tender (ITT)\n\n\nService Listing\n\n\n\n\nInvitation to Tender (ITT)\n\n\n\n\nA call for bids, call for tenders, or invitation to tender (ITT) (often called tender for short) is a special procedure for generating competing offers from different bidders looking to obtain an award of business activity in works, supply, or service contracts... Open tenders, open calls for tenders, or advertised tenders are open to all vendors or contractors who can guarantee performance. (Wikipedia)\n\n\n\n\nThe first type of contract is an \ninvitation to tender (ITT)\n, whereby a client publishes their list of requirements for a desired good or service. In the context of a service, these details are specified within a Ricardian contract and distributed to potential service providers in the \nOpenBazaar\n network. Relevant ITT contract details include:\n\n\n\n\nName and category of the service\n\n\nChosen from a list of pre-determined categories and sub-cateogories\n\n\nThis list will be frequently updated to reflect market needs, and include custom categories to support new markets on \nOpenBazaar\n\n\nPrice range\n\n\nThe price that the buyer is prepared to pay for the service\n\n\nThis can be left blank\n\n\nEstimated time of completion\n\n\nThe maximum time that a buyer expects the service to be performed\n\n\nComments and special considerations\n\n\nAny comments or special details that the service provider needs to be aware of\n\n\n\n\nThe details of the contract can be further negotiated between the parties before a contract is double-signed (i.e. a contract signed by both the buyer and service provider indicating consensus on the final version of the contract)\n\n\nFor example, if Alice wanted to deliver some cupcakes to a co-worker on the other side of the city, she writes the following Ricardian-contract as an ITT:\n\n\nContract Hash:\n \n5a13604e59b03c3b34f830c53919e176aa4cdc59\n\n\n{\n   \n001\n : {\n      \nlisting\n : {\n         \nid\n : {\n            \ncontact\n : {\n               \nbitmessage\n : \n,\n               \nemail\n : \n,\n               \nsubspace\n : \n\n            },\n            \nguid\n : \n,\n            \nhandle\n : \n,\n            \nonename\n : \n,\n            \npubkeys\n : {\n               \nbitcoin\n : \nxxx\n,\n               \npgp\n : \nxxx\n\n            },\n            \nrole\n : \ncustomer\n\n         },\n         \nmetadata\n : {\n            \ncategory\n : \nservice\n,\n            \ncategory_sub\n : \ninvitation to tender\n,\n            \ncontract_code\n : \n123-xyz\n,\n            \nexpiry\n : \n3 hours\n,\n            \nobcv\n : \nb5.0\n\n         },\n         \norder\n : {\n            \ncomments\n : \nHi, I'd like to deliver the cupcakes to my co-worker before she gets into work, which is around 9.30 am. Thanks.\n,\n            \ndate\n : \n2015-07-04 9 am \n,\n            \ndelivery_address\n : \n900 W Eddy St, Chicago, IL 60613, United States\n,\n            \nitem\n : \nchocolate cupcake\n,\n            \npickup_address\n : \n1060 W Addison St, Chicago, IL 60613, United States\n,\n            \nquantity\n : 1,\n            \ntype\n : \ndelivery\n\n         }\n      },\n      \nsignatures\n : {\n         \nbitcoin\n : \nXXX\n,\n         \npgp\n : \nXXX\n\n      }\n   }\n}\n\n\n\n\n\nAlice publishes the unencrypted contract to the \nOpenBazaar\n network, where service providers can scan for contracts that match the category/sub-category fields that they are interested in. Bob, owner of 'Raven Drone Courier', is interested in securing the contract. In order for a service provider to place a bid on a contract, they prepare a 'tender' that will append the following details to Alice's contract:\n\n\n\n\nID details of the individual/business\n\n\nFee for the service\n\n\nTerms and conditions for providing the service\n\n\n\n\nThe contract is then sent to Alice. Alice may receive tens or hundreds of bidding contracts to her \nITT\n and can filter the bidding contracts according to their price, delivery time, reputation etc. Once Alice chooses the winning bid contract, and provided she has not finer details to negotiate, she digitally signs contract and sends copies to the bidder and an arbiter to setup the multisignature address. \n\n\nThe \nTradeNet\n\n\nA long term outcome of supporting \nITT\n contracts within \nOpenBazaar\n is the potential for it to become a 'TradeNet', as descibed by \nMike Hearn\n (slide 25). The original proposal imagined the \nTradeNet\n to be a market infrastructure for applications, potentially distributed autonomous corporations/businesses, to interface with in order to purchase goods and services according to their programmed goals and profit motives. These applications would issue tenders for goods or services on the \nTradeNet\n, receive bids and automatically purchase contracts based on algorithmically-determined conditions (factoring in price, proximity, time etc).\n\n\nA much more attractive alternative is for \nOpenBazaar\n to potentially faciliate \nITT\n contracts for both individuals and distributed consensus/autonomous organisations for peer-to-peer exchanges of goods and services. This is achievable using Ricardian contracts as they are both human and application readable, permitting human-application exchanges without either party known the true identity of each other if so desired.\n\n\nService Listing\n\n\nThe second type of service contract is called a \nservice listing\n, where service providers can advertise their services to potential clients in the hope of receiving a quotation request. Contrary to an \nITT\n, where service providers seek out contracts to bid on, a \nservice listing\n will be 'Yellow Pages' of individuals/organisations filtered according to the category/sub-category of services they provide. The \nservice listing\n will be formatted as a Ricardian contract including the following fields:\n\n\n\n\nCategory and sub-category of service provision\n\n\nEstimated prices\n\n\nEstimated time to complete certain services\n\n\nAvailability\n\n\nComments and special considerations\n\n\nQuotation response time\n\n\n\n\nA potential client can request a quote from the a service provider by drawing up a fresh service contract (according their requirements) that includes a hash of the \nservice listing\n. The inclusion of the hash indicates that the client is requesting a quote based off the specifications advertised by the service provider's \nservice listing\n. From here, the contract is negotiated between both parties as described above prior to double and triple digital signing to initate the contract.\n\n\nGood Performance Bonds\n\n\nA surety bond can be created to cover a failed contract, which either partially or fully remediates the costs of the failed contract for the damaged party. However, as some conditions of the contract can fail without damaging the final outcome of the contract, smaller value surety bonds can be created to incentivise 100% contract fidelity. These smaller surety bonds can be called 'good performance bonds' (GPB). \n\n\nFor example, GPB may be written to penalise a service provider or supplier for failing to meet a contractually obligated deadline. Another example is a GPB for the client to follow the terms and conditions of the service specified in the contract (i.e. be at a certain place by a certain time).\n\n\nThe GPB can be factored as a deduction for the service provider's fee for the sake of simplicity, which can be carefully monitored by the arbiter. Within the contract, a GPB can be formatted within the following fields (using the example above):\n\n\n{\n  \ngood_performance_bond\n: {\n    \ncondition_1\n: {\n      \npenalty\n: \n7 mBTC\n,\n      \ndescription\n: \nFailure to delivery goods before 9 am\n\n    },\n    \ncondition_2\n: {\n      \npenalty\n: \n5 mBTC\n,\n      \ndescription\n: \nFailure to sign for delivered goods within 7 minutes of the drone's arrivate at the delivery address\n\n    },\n    \ncondition_3\n: {\n      \npenalty\n: \n2 mBTC\n,\n      \ndescription\n: \nFailture to respond to enquires within 20 minutes\n\n    },\n    \ncondition_4\n: {\n      \nreward\n: \n5 mBTC\n,\n      \ndescription\n: \nItem is delivered before 8.45 am\n\n    }\n  }\n}\n\n\n\n\nThe inclusion of GPBs would occur from the outset of the contract's formation, requiring both parties to digitially sign to indicate their agreement. The arbiter can verify the authenticity and integrity of these terms by both party's digital signatures and contract hashes, as per a normal Ricardian contract.\n\n\n4.3 Lending\n\n\nIndex:\n\n\n\n\nRicardian Loan Contracts\n\n\nRisk Management\n\n\n\n\nBanks are centralised institutions that, among other things, offer credit to individuals, groups and corporations. Historically, banks were a nexus of borrowers and lenders, matching the \nsupply\n of liquidity to the \ndemand\n for credit. The primary role of a bank was risk management in the form of the due diligence required to assess if a potential borrower was a worthwhile investment. With the advent of nation-state money printing and fractional-reserve banking, whereby money is \nlent into existence\n and losses are publicly subsidized by inflation and bailouts, the traditional care of risk management for loans has all but been obiliterated.\n\n\nPeer-to-peer (P2P) lending has emerged as a means to decentralise the oligopolistic hold that banks possess in every category for lending. While P2P lending is still in early days, regulatory pressure is mounting making P2P lending services using fiat dollars especially vulnerable to the legacy financial/political order. Using Bitcoin, this legacy threat is largely eliminated, but introduces new problems in the traditional approach of risk management. The purpose of this article is to suggest possible solutions to these problems and how they might be executed on a pseudonymous censorship-resistant marketplace like \nOpenBazaar\n.\n\n\n4.3.1. Ricardian Loan Contracts\n\n\nAs with other goods and services on \nOpenBazaar\n, the loan is drawn up as a \nRicardian-style contract\n that I will refer to as the \nloan contract\n for the rest of the article. The loan contract is initially written by the \nborrower\n and distributed/published on the \nOpenBazaar\n network, as the borrower is trying to convince the market to purchase their unmaterialized future good (a interest markup of the original loan amount).\n\n\nLet us imagine a \nborrower\n, Bob, and a \ncreditor\n, Alice:\n\n\nStep 1: Debtor creates a loan contract\n\n\nThe loan contract specifies that Bob wishes to exchange \n110 mBTC in 1 year\n for \n100 mBTC now\n (i.e. Bob wants to borrow 100 mBTC). The interest rate is 10% p.a. The following fields are introduced in the \nloan contract\n:\n\n\n1. Loan_amount: 100 mBTC\n2. Loan_term: 1 year   \n3. Interest_rate: 10% p.a.\n4. Interest calculated: monthly\n5. Payment schedule: monthly\n6. Address and self-signature\n\n\n\n\nBob digitally signs the contract and publishes it to the network.\n\n\n{\n    \n001\n: {\n        \n01_debtor\n: {\n            \n01_metadata\n: {\n                \ncategory\n: \nloan\n,\n                \ncategory_sub\n: \nfixed term\n,\n                \ncontract_expiry\n: \n30 days\n,\n                \nobcv\n: \nb5.0\n\n            },\n            \n02_id\n: {\n                \ncontact\n: {\n                    \nbitmessage\n: \n,\n                    \nemail\n: \nalice@alice.com\n,\n                    \nsubspace\n: \n\n                },\n                \nguid\n: \nzxc987\n,\n                \nhandle\n: \nalice\n,\n                \nonename\n: \n+alice\n,\n                \npubkeys\n: {\n                    \nbitcoin\n: \nxxx\n,\n                    \npgp\n: \nxxx\n\n                },\n                \nrole\n: \ndebtor\n\n            },\n            \n03_notary\n: {\n                \nguid\n: \nabc123\n,\n                \nhandle\n: \nAcme Notary Service\n,\n                \nkeys\n: {\n                    \npubkey\n: \nxxx\n,\n                    \nself_sig\n: \nXXX\n\n                }\n            },\n            \n04_loan\n: {\n                \ndebt\n: \n100 mBTC\n,\n                \ninterest_calc\n: \nmonthly\n,\n                \ninterest_rate_perc\n: \n10\n,\n                \nkeywords\n: [\n                    \nloan\n,\n                    \n10% pa\n\n                ],\n                \nloan_address\n: {\n                    \nbtc_address\n: \nxxx\n,\n                    \nself_sig\n: \nXXX\n\n                },\n                \nrepayments\n: \nmonthly\n,\n                \nterm\n: \n365 days\n\n            }\n        },\n        \n02_signatures\n: {\n            \nbitcoin\n: \nXXX\n,\n            \npgp\n: \nXXX\n\n        }\n    }\n}\n\n\n\n\nStep 2: Creditor accepts the loan contract\n\n\nAlice agrees with the contract and appends the following data:\n\n\n\n\nNetwork ID (plus any other ID data)\n\n\nIndicates the role of Alice as a \ncreditor\n\n\nA schedule of repayment bitcoin addresses (i.e. an address for each month across the term of the loan)\n\n\nThere are an estimated 12 repayment schedules in the example, so Alice attached 12 unique addresses for Bob to send each repayment\n\n\nMultisignature escrow details\n\n\nMultisignature address generated from the debtor, creditor, and notary\n\n\nRedemption script\n\n\n\n\n\n\nFunds will be released from multisignature escrow to the exclusive control of the debtor after confirmation; notary stands by refund the creditor if a problem arises before confirmation\n\n\nTXID\n of the creditor funding the multisignature address\n\n\n\n\nIf Alice wants to change the terms of part of the contract, she can write, sign and send a fresh contract to Bob. If Bob disagrees, he can simply ignore the contract, or sign it if the change in terms acceptable (e.g. Alice increases the interest rate to 11% p.a., or changes the schedule to fortnightly repayments). Note that this is the only stage where this can happen as once both parties have signed the terms of the contract, it is locked-in as far as dispute resolution is concerned.\n\n\nStep 3: Loan confirmed\n\n\nBob (debtor) confirms that the loan will proceed and appends a signed transaction releasing the funds into his control.\n\n\nStep 4: The creditor signs and releases funds to the debtor\n\n\nAlice (creditor) signs and broadcasts the transaction from step 3, releasing funds to Bob.\n\n\nStep 4+n: Repayments\n\n\nFor every repayment, Bob appends to the loan contract evidence of the repayment addresses being funded along with the outstanding balance of the loan, until it is paid off.\n\n\n4.3.2. Risk Management\n\n\n1. Credit Ratings and Collateral\n\n\nThe process above has thus far described how the \nloan contract\n is created and processed for auditing purposes by the arbiter. However, it has not dealt with how \nloan contracts\n will be protected from fraud by bad actors on \nOpenBazaar\n. Traditionally, there are two major ways to manage risk for potential loans:\n\n\n\n\nAssess the borrower's \ncredit rating\n\n\nRequire \ncollateral\n for the loan\n\n\n\n\nCredit Rating\n\n\n\n\nan estimate of the ability of a person or organization to fulfill their financial commitments, based on previous dealings.\n\n\n\n\nAs a credit rating often involves an individual disclosing their income and previous financial dealings to the creditor and other third parties, the concept of a traditional credit rating is incompatible with the goals and purpose of \nOpenBazaar\n. New and innovative solutions are required assess the credit-worthiness of an individual in a pseudonymous marketplace.  \n\n\nCollateral\n\n\n\n\nsomething pledged as security for repayment of a loan, to be forfeited in the event of a default.\n\n\n\n\nA borrower must provide \ncollateral\n to the creditor before a loan is approved. \nCollateral\n can be any good belonging to the borrower that has an equivalent value to the amount being loaned. In case of a credit default, the creditor can physically possess the \ncollateral\n to recover their losses.\n\n\n2. Web of Credit\n\n\nTaking the \nweb of trust\n concept one step further, \nOpenBazaar\n can facilitate peers extending lines of credit to each other. If there is a successful trade between Alice and Bob, Alice may choose to extend a 5 mBTC line of credit to Bob. Bob can borrow this money at any time according to the prescribed conditions set by Alice. The funds can be kept in a 2-of-3 multisignature address, using an arbiter as a third signature. This line of credit can be publicly disclosed and audited by other peers. The aggregate of a pseudonym's line of credit becomes a powerful and informative risk signal for other peers, with risk being inversely proportional to the sum total line of credit.\n\n\nThe line of credit can be considered as collateral by a potential creditor, knowing that a pseudonym's line of credit can be called upon to satisfy a renumberation of second loan. For individual extending lines of credit, they have an opportunity to invest in successful and well-regarded trade partners.\n\n\n3. Collateral as User-Created Assets\n\n\nIn \nOpenBazaar\n, collateral can be transferred by digitally signing possession of a user-created asset, represented by a Ricardian contract. Briefly, Jack may posses 0.1 ounces of gold and wants to exchange it for other goods and services on \nOpenBazaar\n. Jack writes a contract stating that he has possession of 0.1 ounces of gold. To sign ownership of that contract to another individual, Jill, Jack can create a fresh contract with the following data:\n\n\n\n\nA encrypted copy of the old contract using Jill's public key\n\n\nUpdated ownership details (i.e. Jill owns 0.1 ounces of gold)\n\n\n\n\nThe new contract is then digitally signed with Jack's private key. Now, this entire process assumes that Jack actually has 0.1 ounces of gold behind the contract and is able to physically transfer the goods or their custody (if a third party, like a vault, is holding them). The burden of proof will be on Jack to demonstrate to Jill that contract is valid. Jack can also seek other highly rated (web of trust) third parties or arbiters to sign the initial contract after they are satisfied with Jack's proof.\n\n\nOutside of the Ricardian contract model in \nOpenBazaar\n, user-generated assets from colored coins or other sources (Mastercoin, Counterparty, OpenTransactions etc), can also be offered as \ncollateral\n for a loan.\n\n\nPart 4: Collateral and Distributed Collateralized Trusts\n\n\nWhat if a user like Bob is unable to provide sufficient \ncollateral\n for the loan due to either: 1) his wealth status living in a developing country, or 2) providing \ncollateral\n in the traditional sense would reveal his pseudonym's identity?\n\n\nOne possible solution is for Bob to purchase \ncollateral\n from a \ndistributed collateralized trust\n or \ndCT\n. A \ndCT\n is a collection of users that pool a certain value of funds in essentially a term deposit. This term deposit serves as \ncollateral\n for a loan in the event that the borrower defaults. In return for this risk, the borrower pays each member of the trust a fee that makes up the effective interest rate of the term deposit. Using the example thus far, Bob purchases 100 mBTC collateral from a 10 member \ndCT\n at the price of 10 mBTC. Under this arrangement, each member of the \ndCT\n risks 10 mBTC for a term of 1 year for a return of 1 mBTC (or roughly 10% p.a.), paid for in advance by Bob's fee\n\n\nAlternatively, Alice could forgo Bob's collateral in favor of a 10 mBTC downpayment upfront. However, Alice will not be compensated if there is a default on the loan. This option could be viable if Alice routinely lends funds to Bob and extends to him a sufficient level of trust.\n\n\ndCTs however, confer a number of advantages:\n\n\n\n\nOverall level of risk is spread\n\n\nMultiple layers of due diligence\n\n\nBoth the creditor and the dCT will need to evaluate the profitability of lending to Bob, decreasing the chances of spurious lending\n\n\nThe dCT can also examine the track record of the creditor, Alice, for their success in picking borrowers\n\n\nThe purpose of the loan can be interrogated, and if possible, funds can incrementally be released\n\n\nPromotes liquidity\n\n\nThe creditor has, in effect, insurance in lending\n\n\nThe level of risk that is an obstacle for the lender is now lower than the level of risk for each member of the dCT, making relatively capital-intensive loans possible\n\n\n\n\nA dCT is not necessarily appropriate for small-medium sized loans, as a borrow can crowd-source the loan as the level of risk is especially low. However, it will be up to the creditor to evaluate their level of risk tolerance and what steps they take to manage that risk.\n\n\n4.4 Financial Securities\n\n\nBounded Futures\n\n\nA forward contract is an agreement to buy an item for an agreed price in future. For example it might be possible to agree to purchase a barrel of crude oil a month from now for $100. If in a month the market price of crude is higher than $100, then the contract has positive value. If the price is lower, the contract has negative value.\n\n\nValue of bought futures contract in one month = item price in one month - futures price\n\n\nSymmetrically, it is possible to enter a contract to sell crude in a month for $100. This gives the negative value of a bought future.\n\n\nValue of sold futures contract in one month = futures price - item price in one month\n\n\nThe contract allows both sides to have an exposure to the market price of crude without owning the asset. For a fungible asset like oil it is not even necessary for to exchange the physical asset at the agreed sale time; buyer and seller can simply settle for the economic value of the contract (difference between the agreed futures price and the market price).\n\n\nFutures contracts are widely used for currencies, equity indices (like the S\nP 500), interest rates, bonds, commodities, and recently for more exotic risks like temperature and rainfall. These markets allow a far greater flexibility in speculation and hedging for market participants than would be available in the ordinary cash markets for the underlying assets. In many cases the futures market volume exceeds the cash market, and the price is first determined by trades in the futures market and later reflected in changes in the cash (or spot) price. \n\n\nA difficulty with futures contracts is that it requires trust between contracted parties to pay the agreed contract value. If the price of crude increases to $150 in one month the buyer of the contract must have a mechanism to receive $50 from the seller (or equivalently a physical barrel for $100).  This obligation must be backed by enforceable contract.\n\n\nFutures traded on financial exchanges have a smart mechanism to solve this problem. Each side provides some amount of money to the exchange as collateral for their side of the agreement. If the market price of the contract changes (observed through other trades on the same item) one side has to provide additional money to the exchange. If they are unable to meet this call for extra collateral the exchange finds a new counterparty to the trade (buyer or seller). If the exchange is careful to always have sufficient collateral to absorb market price movements the contract will require no trust between buyers and sellers. Both sides do not even need to know about each other; the exchange is the legal counterparty to both sides. \n\n\nThis very elegant solution has a problem: the exchange must monitor the markets and make a guess at the probable size of price changes to determine how much collateral to require from each side. If the price movements are large or the contract is not traded often the exchange might not be able to find a suitable counterparty and be forced to take a financial loss on the contract. \nFor a properly decentralized market a different solution is required that does not need monitoring of an exchange and also does not expose the parties to credit risk.\n\n\nOne solution\n is to have contracts that have limited losses or gains. Taking the example of the crude oil contract from the example earlier, a contract might only be exposed to the price risk if the price of crude was between $80 and $120. Each side of the contract would put up $20 in collateral and the value of the contract would be determined without any credit risk or need for margining. \n\n\nThe payoff of this new contract is a bounded version of a usual futures contract payoff:\n\n\n\n\n(This assumes that the futures price is $100. A slightly more general contract payoff includes an offsetting amount if the price is different.*)\n\n\nThis bounded contract is more flexible than an ordinary future (an ordinary futures contract is a bounded contract with bounds at 0 and \u221e). A series of contracts can be \"chained\" together, where the lower bound of one contract is matched to the upper bound of another. It is also possible to mimic the operation of a traditional futures exchange. As the asset price approaches the upper bound the exchange asks for additional collateral from the seller to buy the next bounded contract. In this way the operation of bounded contracts can be hidden from market participants who find trade in the bounded contracts too daunting.\n\n\nA more subtle advantage of bounded contracts comes from their non-linear structure. A bounded contract is equivalent to buying a European call option with a strike at the lower bound and selling a call at the upper bound. Hence any market trading bounded contracts is also indirectly pricing and trading options. Usually it is relatively difficult to establish an options market in an asset because it requires sophisticated sellers to price the risk and a high volume in the underlying market for hedging.  This makes options markets expensive and The existence of options in a market provides a much richer set of trading possibilities than with a simple cash or futures market. Options implicitly price expected volatility in the market (this is the essence of the Black Scholes formula \u2013 that hedging costs for options are dependent almost completely on the price volatility and not on the price direction). Options also implicitly provide a market estimate of the probability of the price entering a certain range. Imagine a bounded contract with a very small bound (say 99.5 to 100.5). This contract would be worth $0if the price is less than 99.5 and $1 if the price is more than $100.5. The market price of this contract is implicitly an estimate of the probability of the price exceeding $100.5.  If the price of the contract is $0.5 the market believes the probability is 50%; if the price is $0.1 the market believes the probability is 10%.**  \n\n\nThis allows traders to express more sophisticated views on the future price behavior than the crude up/down bet available through a future. The trader can speculate or hedge on the price achieving a certain range, or construct a trade to bet that the market priced probabilities are too wide (variance), or not reflecting sufficient asymmetry in price behavior (skewness). All these additional possibilities enhance the capability of the market to provide effective risk transfer.\n\n\nHowever good things do not come for free, and there is a reason why spread contracts are not traded as frequently as futures on exchanges. The existence of multiple contracts divides the market volume between the contracts and makes trading in large size more difficult and costly.  This is a serious drawback but there are mechanisms to moderate the problem. When a contract is offered for sale or purchase some traders might be willing to \u201cconvert\u201d the contract into a nearby bound, simultaneously buying the one contract and selling the other. In this case a contract bid or offered at one bound would immediately and automatically provide volume to nearby bounds. This conversion service could be provided by the exchange itself, or by dedicated specialized market makers who would propagate liquidity amongst contracts in the hope of receiving up a small profit on average. \n\n\nBounded futures contracts are natural structures for decentralized markets where trading volumes are likely to be patchy and trust difficult to establish. Parties to the contract can determine how much risk they want to be exposed to and for how long. This removes the usual problems of margining (collateral) from the exchange in exchange for creating a problem by dividing liquidity between multiple contracts. But on net this trade is worthwhile: it allows a completely decentralized and autonomously operating futures market and an extraordinary flexibility of financial structures.\n\n\nExample of a bounded futures contract as a hedge for a sale contract\n\n\nSuppose we have the following scenario:\n\n\nChair spot price: 0.01BTC\nBTC spot price: $300\nOne month futures price for BTC $300.\nChair in USD: $3\n\n\nWe agree to buy the chair to receive 0.01BTC in one month and wish to hedge the USD/BTC exposure.\n\n\nTo hedge with a normal futures contract, we agree to sell 0.01BTC in one month (short selling - shorting - bitcoin) for the futures price of $300/BTC ($3). Any changes in the price of BTC are fully hedged.\n\n\nTo hedge with a bounded futures contract we agree to sell 0.01BTC in one month for the futures price of $300/BTC ($3) bounded between 250USD/BTC ($2.5) and 350 USD/BTC ($3.5).\n\n\nIf the price of BTC after a month is at the upper bound ($350), the contract to sell 0.01BTC for $300 ($3.5) has a market value of -$0.5 (i.e. $3 - $3.5 = -$0.5). At the lower bound ($250)  the contract is worth $0.5 (i.e. $3 - $2.5 = $0.5).\n\n\nBoth parties to the bounded futures contract put up $0.5 in collateral, in the multisignature escrow address, to cover their the maximum possible loss.\n\n\nIf the price of BTC/USD varies less than 50% the bounded futures contract provides a perfect hedge.  If it moves more in either direction (above $350 or below $250) then the hedge is only partial.\n\n\n(*) This is summarised by the following:\n\n\nimg src=\nhttp://s28.postimg.org/6019zqdwd/Equation_2.png\n width=\n400px\n/\n  \nwhere F is the bounded contract \nprice\n which makes the contract a fair trade for both parties. A more general form is:  \n\nimg src=\nhttp://s9.postimg.org/w954bx9wf/Equation_3.png\n width=\n200px\n/\n  \n(**) In the limit as the bound approaches zero this is known as the \u201crisk neutral\u201d probability. This allows a probability distribution (the \u201crisk neutral distribution\u201d) to be constructed across the range of price where the contract trades.\n\n\n\n\n2. Bounded Futures Ricardian Contract for \nOpenBazaar\n\n\nThis is an example of a bounded futures contract that may be issued in \nOpenBazaar\n:\n\n\n{\n  \n001\n: {\n    \nlisting\n: {\n      \nmetadata\n: {\n        \nobcv\n: \n0.1\n,\n        \ncategory\n: \nSecurities\n,\n        \nsubcategory,\n: \nBounded Futures\n,\n        \nNonce\n: \nXXX-XXX\n,\n        \nExpiration\n: \nXXXX-XX-XX XX:XX\n\n      },\n      \nfutures_contract\n: {\n        \nitem\n: \nWheat\n,\n        \nunits\n: \n30 bushels\n,\n        \ncurrent_price_per_unit_btc\n: \n 0.02\n,\n        \nprice_total_btc\n: \n0.6\n,\n        \nterm_days\n: \n5 days\n,\n        \nlimit_btc\n: \n0.05\n,\n        \nspot_price_source\n: \nhttp://data.tradingcharts.com/futures/quotes/W.html\n\n      },\n      \nissuer\n: {\n        \nguid\n: \nb5016e193656d33693a38bc2dbea7c80440c09ee\n,\n        \nhandle\n: \ndrwasho\n,\n        \nlegal_address\n: \n,\n        \npubkeys\n: {\n          \npgp\n: \nxsFNBFMZcEIBEADJlq0oVgLfFDdW9WOBguskPdSSeAfHe4s9w8QlmRuO/Zj548gKfofbM84rtP3rHSOSkeOTsu5GwDt48V/md6gyJ69BTZJkJ6qmxFtGaWVRLP/UD4mavW4EAn3PvWY6X7Z8x36U3j2I6vknH1Ufu5Dh5qvQC3WsMliul9ZxlJQZ1/TkQE+qI/gBPRmsMFZ/xV2VOEjMtM3qOPoemhYFzU39/ra0isk81sXrotySkvWw6zsrx8NrkBaw9mxhs0kumF06AfKSrBjytFIdbJaWtNrCdxJ+NMfzQUHmq9bzpBI2VpNJzFQI4WlO8eRYDS1Z88VxXOjMZchd70JfNNWcXwCUeOA/HUgHO4tWczvb/5/C5pfZRKuDqfOLntcMEzpPxbhAbXvU+K5TK394SGgu9ioXl3rdrFj1B1EBPH2BfnOdwCiOOr5ccWVPUHdG34i4D98ARgeqEDxq9WZwq8FG9rgSszqkmnGQtSZxz8aoW1kU1h1SQumqs2ZUrEoLGACkNg16kRq2z7RBLc4MAm3/GW3ygeEFQxK0PMief0X2+l0oVo7a0ARMLLLx4ckuoX3DIJvBegFPvlp0rO3JihdzNmCqIBTDok7D0k2NiQsm3WDJHAYB+8G4ruHVPAOzPNxz5krF+u71jcWmZKO4FRAcXCrWTQCku7wLyzOF80sVEDlwARAQABzWNEciBXYXNoaW5ndG9uIFlhbWFuZHUgU2FuY2hleiAoMjAxNCBLZXlwYWlyIGZvciBuZXcgZW1haWwgYWRkcmVzcykgPHdhc2hpbmd0b24uc2FuY2hlekBvdXRsb29rLmNvbT7CwXkEEwECACMFAlMZcEICGw8HCwkIBwMCAQYVCAIJCgsEFgIDAQIeAQIXgAAKCRDgeMiuv/IyzzaGEACiYWINH5utgquhNPIGl8oPXQwi3cdHbLROXk9s8K5jumxO3qyzrZuag+M39eKrDOgMTteLcCuJV+9sgdmSJHsLuH9o9/PPwaKHsY995C0Y5ZRsvABRQbHoOJPsdq136gH2Z0kW/RJ2fqQfNrDiqyPJpWTkrnnRZF2XU8OlIAq+BsyeVqxOiht1vMIz2TXLanbP6leas7Wah1GRuzhd68+NCyCUQJ4bnBDv6cbGwXRVi7kOOvXYoTilCENdbSuYfGWrq7z54DrefjTP3+0Y/YTWwUQr/yvXi915UCDVU+T6jaqCwtqmezr1VjkMrFQOOrOY7jWmYo4AwQfr4hW9iLdiggr6bPmz0YRfT83a9r9Z+SmU4zuLWmmJXARiUGBwhXUmyqFQa1yjCVI+50uW8Wx3iDot9qiO7gSB878Zq1sKtt3EXolTDGgpVIxZ78do42X02wD8gwGGOdDU3Dzywjy3qcIbVWreuT8tEvCU+Wxw0TGzeoBLcHezhLEbaAOmE5jAmKPL9EbRQBGS1nV3uwzW24vu9ftNqmseYXC2afWDCulmUHHAQEfleJA/mKii2mYV7Yxclib81+EzkzJBPijgUJBN9A1PxqliF8ZDXF/h/jQomASoDBAL8VWo7qwTQlc5CZKZ6xnUZGdUU9lFBmnclw0A6PrMBaZjm1zeKJr1Q===G1fD\n,\n          \nbitcoin_pubkey\n: \n044448c02963b8f5ba1b8f7019a03b57c80b993313c37b464866efbf61c37098440bcdcc88bedf7f1e9c201e294cf3c064d39e372692a0568c01565b838e06af0b\n\n        }\n      }\n    },\n    \nsignatures\n:{\n      \npgp\n: \nXXX\n,\n      \nbitcoin_key\n: \nXXX\n\n    }\n  }\n}\n\n\n\n\nFollowing the creation of the contract, the buyer would submit a bid offer on the contract. Involvement of the notary along with digitial signatures and counter-signatures would proceed as per normal.\n\n\nAbove, \ndrwasho\n is locking in the purchase (in 5 days) of 30 bushels of wheat at a \ncurrent\n price of 0.02 BTC per bushel (total price: 0.6 BTC). As this is a \nbounded futures contract\n, \ndrwasho\n places a limit on his exposure to price volatility equal to 0.05 BTC. In other words, \ndrwasho\n is going long on wheat, setting a maximum profit/loss margin of 0.05 BTC. If in 5 days the price for 30 bushels is \n 0.65 BTC, \ndrwasho\n will withdraw 0.1 BTC from the multisignature escrow (his original 0.05 BTC and the 0.05 BTC from the losing counterparty). If the price is \n 0.55 BTC, \ndrwasho\n will lose 0.05 BTC from the multisignature escrow address. Remember, the intention of these contracts are to hedge against price volatility, not necessarily trade the full value of the commoditity to be hedged!\n\n\n4.5 Distributed Currency Exchange\n\n\nOpenBazaar\n allows for the decentralised exchange of types of currencies using the flexible Ricardian contract system. Currency exchanges are not limited trades between crypto-currencies, but can also facilitate exchanges with fiat currencies using reverisble and non-reversible payment systems. \n\n\nFundamentally, currency exchanges require a matching of buy and sell orders at a certain price for a given volume. Firstly, buy and sell orders will be created and issued as a Ricardian contract, formatted according to a specialised 'currency' template in \nOpenBazaar\n. Secondly, matching buy and sell orders theoretically will be mediated over \nexchange nodes\n, which may also function as arbiters for each exchange. Alternative, buy and sell orders may be matched over the \nOpenBazaar\n distributed hash table. Finally, private exchanges can be made between peers, using \nOpenBazaar\n to merely faciliate the signing/counter-signing of the contract and finding an arbiter for the trade. After matching buy and sell order, the use of Bitcoin multisignature transactions is the key to managing counterparty risk for an exchange between different crypto-currencies, irrespective of whether Bitcoin is the final currency to be exchanged. \n\n\nCurrency contract can be further sub-categorised into:\n\n\n\n\nCrypto-Crypto currency exchanges\n\n\nCrypto-Fiat currency exchanges\n\n\nFiat-Fiat currency exchanges\n\n\n\n\n1. Crypto-Crypto Currency Exchanges\n\n\nTo create a currency Ricardian contract for a crypto-crypto exchange, a \nseed contract\n is prepared with the following data fields:\n\n\n\n\nCrypto-currency pair (e.g. Litecoin/Bitcoin; LTC/BTC)\n\n\nExchange rate for the currency pair (e.g. 0.01637)\n\n\nType (i.e buy, sell)\n\n\nSize (i.e. amount of the currency to buy/sell)\n\n\nPayment address\n\n\n\n\nFor example, Alice desires to purchase 5 litecoin for a price of 0.01637 LTC/BTC (0.08185 BTC total). She draws up the following \nseed contract\n and broadcasts it on \nOpenBazaar\n:\n\n\n{\n    \nOpenBazaar Contract\n: {\n        \nOBCv\n: \n0.1\n,\n        \nCategory\n: \nCurrency\n,\n        \nSub-category,\n: \nCrypto-Crypto\n,\n        \nNonce\n: \n356a192b7913b04c54574d18c28d46e6395427ab\n,\n        \nExpiration\n:\n2014-08-29 12:00:00\n\n        },\n    \nSeller\n: {\n        \nNymID\n: \n61768db8d1a38f1c16d3e6eea812ef423c739068\n,\n        \nNodeID\n: \nabc123\n,\n        \nBTCuncompressedpubkey\n:\n044448c02963b8f5ba1b8f7019a03b57c80b993313c37b464866efbf61c37098440bcdcc88bedf7f1e9c201e294cf3c064d39e372692a0568c01565b838e06af0b\n,\n        \npublicKey\n: [\n            \nxsFNBFODLW8BD/9rmoBRBASaZuNpPBG+Gj7/aJcE7aQ4Sti7lKaERFD7/rHd\n,\n            \nWHm+o+FnyQvxpkOuuU6G4q739tP5ZqHx/bn9rhpAKKa+o7es70jlpenHyge4\n,\n            \n0QyIU1/9jXzwlMsXkq9XfbOhqtgiBRpeZ83/ZjUsf5/wQXhrGWvG4rnKj5kh\n,\n            \nYNq8PHzqJO21cDcD7LJy6yPuOgrBfb4MMa3+9lauIZ5Ye2kXR4m1OuWrig0M\n,\n            \n7SwgFZwo3GbmcWe5KCK60nHW0AZh47B/yC18s/uR3t2bGrkQwL6AgTiOd2hX\n,\n            \n/K2l1ccgIPnWo1s/5fMc7HiGpPkioOYhWgDm+2bimh56D2Tq7ikZQSDZIhw4\n,\n            \n2pOQCevN/efak7vc2vaaaKqGreF8EwQ5vahF9bS6aNzXzdG1t6PYVAIupdWz\n,\n            \nCt0vrZr1ynBaIEEBJlFuI3vEyp+X85BVqV9B7gWbcE6vLeUPUB/Nu4NEdg5V\n,\n            \n4Np+URFQvW9NKfN04kGfuEViVe0sfgSEc86h+eJ3gWTI8NdhJZdRkzKzlB7Q\n,\n            \nFzMfL0TzxKSkOSu47eWx64e4xsyvkAVirkDb5VRzoeOOpJ/5ZOE1Cv8XJWEU\n,\n            \nZd/WAyp60LT2Ga8mCqhUrPAkcQKsPhccEn23mxIH8Pt3xWfnDFqtma7Tu2fB\n,\n            \nCM4UKpd/dAjTVnZNNjSuBb+4SGBuGiUkA3yvdwARAQABzR1MaW9uZWwgRGVu\n,\n            \ndCA8bGlvbmVsQGRlbnQuY29tPsLBcgQQAQgAJgUCU4Mt1gYLCQgHAwIJEKnO\n,\n            \nFXGYSKNNBBUIAgoDFgIBAhsDAh4BAAAzQQ/9GArtJ4cNqPqM//NJCsQHCy35\n,\n            \nmKOpErbEkia/U10wlISDYV0S3fJJ+ktE/RSF1ZU+2JMf3Hl4q7hYPsFxPvfa\n,\n            \nyjRL48WBXI/V31zLvZUuH4reut4QLM4e6eAugS3lT+p8jU7mS7audZfUW65/\n,\n            \nVL3ZXJs8QhW52LqffkhAJLQauXBy0gE7+ndbGRVxrquINt2sTZFLBaDOpLr8\n,\n            \n4Aiq+UYunRUOmM7lpMnuErTkTe670Pxsu+8Ta8r+bedXhNIbYcMTgoJLOBLX\n,\n            \nIdL3G7ix5y5ebw0eQXTfX6QfW//er9NOi0lWVtplrYFoQ98kS19/uEta4P7r\n,\n            \nkMqZGBpPc7Ztr3zdeNwmbU3oVOv88ecizuvv3rwMDN5juUZ/KP0vQePA7LEd\n,\n            \npGLdTpBMmwd5t6XArso0pDZl4J6YxVZ5HoIYlw2a648VgF0nli11zzix/YKt\n,\n            \nMSRVOwubuo0YGP/cRJy9qVawNU79wTHtnva86orGuQ5d9H/F7S2+f93u87nG\n,\n            \n5TNnI5ORXWzAHkJ3VU6SDzALs3K9PbzTSu4biSsMFSll2cZjZw2INsH9+gNO\n,\n            \nCWzwS7vROVxuZFQolyuWmBfBwVq5U+S8gmRJELkblR+jXetY5e8T2Cv23Kef\n,\n            \nBj6LBv1HpiUMD6KX4cASS94tMdLlJqa78Yl7A35froh30Tq3wfm1KSX7SuTO\n,\n            \nwU0EU4Mt2AEQAIQzWvnLqtZP9nhWGcGqRwoZP0RJHmnbCpVmmVaoj2I/36k7\n,\n            \nPcuYs1xbc9Qt0gBpCQiskIjmCKVEcs+Dfj960qRxzrVfUQ/O09MrI2eMekhY\n,\n            \nnC+jlBNXc22CgH1ESodZDCZf2iA9qjAjd8swLotJ2v0Mw6GLmuLmejo2M3kV\n,\n            \n/jnQJW5ePHd/Wyw45yA1TJv75UhHZ4mo3/MYPBZnSt624JBt/+T4++XaG1kM\n,\n            \nDf5Ku63SEwhkz/nGpyW4BYTa56Pd/zKVxoxW5SfGfgREw8aw09jaApkfz9fy\n,\n            \nGAXcptFWCAvDDfxSCKiMNFBGzuXmgsB3GmEhaOpA9YwCy5TFPWvJ2U+wZ8DN\n,\n            \nM2JMGgwEL+AfHPa9zSH7fXppF95zpJRMpS0oLM3Rk7OxH+jF5xj+tzNJlBEU\n,\n            \ndrfIw3J6ZZD0wFSZUx4/5Wqa7nCDl/FnrYPXevZXL6eaSsY5umeTNveLLLz1\n,\n            \nSYq+GtRqBgON7fOZbKNxw2udAYpufNX4HXvf/Y/FBf1zrUtxf035a+MmAtSj\n,\n            \nKbf6yUI0BcwNLVBtyMQ6npL0942hH1T37szIL3TT2RZRifSs8u22oZVOxRaE\n,\n            \nyZrRdYrtQpz547rQMJ76a4mplmBGjdMv/ksvicVh1SJ7f+YhtGkUcDWC0CUY\n,\n            \nxnY/jAEL34muSZadG4CAKk7w3jJwryMbE6Y5ABEBAAHCwV8EGAEIABMFAlOD\n,\n            \nLh8JEKnOFXGYSKNNAhsMAACzog//R4yBYDXurrsyFpPS2ndCwm/F0yxIVMYx\n,\n            \n5n/qWxrt+1Yv8sc9PVSLnTilqoVjJIokq6UkpATcmZOxSthCXYX1BjmQdjnl\n,\n            \nz6YGZHWKYkT2BPOJTHvcchSKnx2vn+DIlVIyJjvo6T4zeUVl99XJwWN7kNJ+\n,\n            \nNrlcLzqzksNFW8S6pndkBjn5bC/CzZKgh/KHX7L7ibc3jICgI4MZZLjapf+Y\n,\n            \n4mDmzPoSLrQBHMzAAShj3Li6IEdz0C6KrfGWzVcCHHfpOhWY+A0y4ztOKEEW\n,\n            \nUlrlTPPgxuEbbspee5caBb6mVsvADwn2/wJ2LSYUa0jBSXnQy5Az94xbfbJt\n,\n            \nLqEn7uWsJ9HE0kXOLk89BCSguYog86ptmUXG4uDT5S9zlScR5XC3EJOKpvYU\n,\n            \nNchZS1ydMoerb3VLtVY6pQUqRvSu9+HrouHpp2h2+6B83Eh7gTy7BSqc7TIh\n,\n            \nSsfNIt5nJLCLzWiGst9CS6XuuLzf9JAH85m9ZH8AuKfAW2fICX8KyiBicH/s\n,\n            \neGHqdJ7buEidG3WbA3vvGePma2cXDTfBRcddUwvoLTmCxOMt8IPEwuUq0tnS\n,\n            \noJaCHMMN+csbgCTLb+CMvVjzGbgI8Z3LlKCe1siBh6iDvad7/pIEZm7T7OOC\n,\n            \nFFN8mcvExvCZU6mpCGRg7JmXuI5gzq+O3A+x2virikGYG7NjK8w=\n,\n            \n=dDLn\n\n            ]\n        },\n    \nCurrency\n: {\n        \nCurrencyPair\n: \nLTC/BTC\n,\n        \nExchangeRate\n: \n0.01637\n,\n        \nType\n: \nBuy\n,\n        \nSize\n: \n5\n,\n        \nPaymentAddress\n: \nLbnu1x4UfToiiFGU8MvPrLpj2GSrtUrxFH\n\n        }\n}\n\n\n\n\nA prospective buyer only needs to submit a \nbid offer\n by appending the following data to the \nseed contract\n:\n\n\n\n\nBuyer details\n\n\nPayment address\n\n\n\n\nAs with all Ricardian contracts on \nOpenBazaar\n, digital signatures are required at each step. \n\n\n2. Crypto-Fiat Currency Exchanges\n\n\nFor a crypto-fiat exchange, the \nseed contract\n will have the following data fields:\n\n\n\n\nCrypto-Fiat currency pair (e.g. Bitcoin/US dollar; BTC/USD)\n\n\nExchange rate for the currency pair (e.g. 0.00167)\n\n\nType (i.e buy, sell)\n\n\nSize (i.e. amount of the currency to buy/sell)\n\n\nPayment address/bank details (this data field can be blinded until funds are transferred to the bitcoin multisignature escrow address)\n\n\n\n\nFor example, Alice desires to purchase 5 bitcoin for a price of 0.00167 BTC/USD ($3000 USD total). She creates the following \nseed contract\n and broadcasts it on \nOpenBazaar\n:\n\n\n{\n    \nOpenBazaar Contract\n: {\n        \nOBCv\n: \n0.1\n,\n        \nCategory\n: \nCurrency\n,\n        \nSub-category,\n: \nCrypto-Fiat\n,\n        \nNonce\n: \n356a192b7913b04c54574d18cd8d46e6395427ab\n,\n        \nExpiration\n:\n2014-08-29 12:00:00\n\n        },\n    \nSeller\n: {\n        \nNymID\n: \n61768db8d1a38f1c16d3e6eea812ef423c739068\n,\n        \nNodeID\n: \nabc123\n,\n        \nBTCuncompressedpubkey\n:\n044448c02963b8f5ba1b8f7019a03b57c80b993313c37b464866efbf61c37098440bcdcc88bedf7f1e9c201e294cf3c064d39e372692a0568c01565b838e06af0b\n,\n        \npublicKey\n: [\n            \nxsFNBFODLW8BD/9rmoBRBASaZuNpPBG+Gj7/aJcE7aQ4Sti7lKaERFD7/rHd\n,\n            \nWHm+o+FnyQvxpkOuuU6G4q739tP5ZqHx/bn9rhpAKKa+o7es70jlpenHyge4\n,\n            \n0QyIU1/9jXzwlMsXkq9XfbOhqtgiBRpeZ83/ZjUsf5/wQXhrGWvG4rnKj5kh\n,\n            \nYNq8PHzqJO21cDcD7LJy6yPuOgrBfb4MMa3+9lauIZ5Ye2kXR4m1OuWrig0M\n,\n            \n7SwgFZwo3GbmcWe5KCK60nHW0AZh47B/yC18s/uR3t2bGrkQwL6AgTiOd2hX\n,\n            \n/K2l1ccgIPnWo1s/5fMc7HiGpPkioOYhWgDm+2bimh56D2Tq7ikZQSDZIhw4\n,\n            \n2pOQCevN/efak7vc2vaaaKqGreF8EwQ5vahF9bS6aNzXzdG1t6PYVAIupdWz\n,\n            \nCt0vrZr1ynBaIEEBJlFuI3vEyp+X85BVqV9B7gWbcE6vLeUPUB/Nu4NEdg5V\n,\n            \n4Np+URFQvW9NKfN04kGfuEViVe0sfgSEc86h+eJ3gWTI8NdhJZdRkzKzlB7Q\n,\n            \nFzMfL0TzxKSkOSu47eWx64e4xsyvkAVirkDb5VRzoeOOpJ/5ZOE1Cv8XJWEU\n,\n            \nZd/WAyp60LT2Ga8mCqhUrPAkcQKsPhccEn23mxIH8Pt3xWfnDFqtma7Tu2fB\n,\n            \nCM4UKpd/dAjTVnZNNjSuBb+4SGBuGiUkA3yvdwARAQABzR1MaW9uZWwgRGVu\n,\n            \ndCA8bGlvbmVsQGRlbnQuY29tPsLBcgQQAQgAJgUCU4Mt1gYLCQgHAwIJEKnO\n,\n            \nFXGYSKNNBBUIAgoDFgIBAhsDAh4BAAAzQQ/9GArtJ4cNqPqM//NJCsQHCy35\n,\n            \nmKOpErbEkia/U10wlISDYV0S3fJJ+ktE/RSF1ZU+2JMf3Hl4q7hYPsFxPvfa\n,\n            \nyjRL48WBXI/V31zLvZUuH4reut4QLM4e6eAugS3lT+p8jU7mS7audZfUW65/\n,\n            \nVL3ZXJs8QhW52LqffkhAJLQauXBy0gE7+ndbGRVxrquINt2sTZFLBaDOpLr8\n,\n            \n4Aiq+UYunRUOmM7lpMnuErTkTe670Pxsu+8Ta8r+bedXhNIbYcMTgoJLOBLX\n,\n            \nIdL3G7ix5y5ebw0eQXTfX6QfW//er9NOi0lWVtplrYFoQ98kS19/uEta4P7r\n,\n            \nkMqZGBpPc7Ztr3zdeNwmbU3oVOv88ecizuvv3rwMDN5juUZ/KP0vQePA7LEd\n,\n            \npGLdTpBMmwd5t6XArso0pDZl4J6YxVZ5HoIYlw2a648VgF0nli11zzix/YKt\n,\n            \nMSRVOwubuo0YGP/cRJy9qVawNU79wTHtnva86orGuQ5d9H/F7S2+f93u87nG\n,\n            \n5TNnI5ORXWzAHkJ3VU6SDzALs3K9PbzTSu4biSsMFSll2cZjZw2INsH9+gNO\n,\n            \nCWzwS7vROVxuZFQolyuWmBfBwVq5U+S8gmRJELkblR+jXetY5e8T2Cv23Kef\n,\n            \nBj6LBv1HpiUMD6KX4cASS94tMdLlJqa78Yl7A35froh30Tq3wfm1KSX7SuTO\n,\n            \nwU0EU4Mt2AEQAIQzWvnLqtZP9nhWGcGqRwoZP0RJHmnbCpVmmVaoj2I/36k7\n,\n            \nPcuYs1xbc9Qt0gBpCQiskIjmCKVEcs+Dfj960qRxzrVfUQ/O09MrI2eMekhY\n,\n            \nnC+jlBNXc22CgH1ESodZDCZf2iA9qjAjd8swLotJ2v0Mw6GLmuLmejo2M3kV\n,\n            \n/jnQJW5ePHd/Wyw45yA1TJv75UhHZ4mo3/MYPBZnSt624JBt/+T4++XaG1kM\n,\n            \nDf5Ku63SEwhkz/nGpyW4BYTa56Pd/zKVxoxW5SfGfgREw8aw09jaApkfz9fy\n,\n            \nGAXcptFWCAvDDfxSCKiMNFBGzuXmgsB3GmEhaOpA9YwCy5TFPWvJ2U+wZ8DN\n,\n            \nM2JMGgwEL+AfHPa9zSH7fXppF95zpJRMpS0oLM3Rk7OxH+jF5xj+tzNJlBEU\n,\n            \ndrfIw3J6ZZD0wFSZUx4/5Wqa7nCDl/FnrYPXevZXL6eaSsY5umeTNveLLLz1\n,\n            \nSYq+GtRqBgON7fOZbKNxw2udAYpufNX4HXvf/Y/FBf1zrUtxf035a+MmAtSj\n,\n            \nKbf6yUI0BcwNLVBtyMQ6npL0942hH1T37szIL3TT2RZRifSs8u22oZVOxRaE\n,\n            \nyZrRdYrtQpz547rQMJ76a4mplmBGjdMv/ksvicVh1SJ7f+YhtGkUcDWC0CUY\n,\n            \nxnY/jAEL34muSZadG4CAKk7w3jJwryMbE6Y5ABEBAAHCwV8EGAEIABMFAlOD\n,\n            \nLh8JEKnOFXGYSKNNAhsMAACzog//R4yBYDXurrsyFpPS2ndCwm/F0yxIVMYx\n,\n            \n5n/qWxrt+1Yv8sc9PVSLnTilqoVjJIokq6UkpATcmZOxSthCXYX1BjmQdjnl\n,\n            \nz6YGZHWKYkT2BPOJTHvcchSKnx2vn+DIlVIyJjvo6T4zeUVl99XJwWN7kNJ+\n,\n            \nNrlcLzqzksNFW8S6pndkBjn5bC/CzZKgh/KHX7L7ibc3jICgI4MZZLjapf+Y\n,\n            \n4mDmzPoSLrQBHMzAAShj3Li6IEdz0C6KrfGWzVcCHHfpOhWY+A0y4ztOKEEW\n,\n            \nUlrlTPPgxuEbbspee5caBb6mVsvADwn2/wJ2LSYUa0jBSXnQy5Az94xbfbJt\n,\n            \nLqEn7uWsJ9HE0kXOLk89BCSguYog86ptmUXG4uDT5S9zlScR5XC3EJOKpvYU\n,\n            \nNchZS1ydMoerb3VLtVY6pQUqRvSu9+HrouHpp2h2+6B83Eh7gTy7BSqc7TIh\n,\n            \nSsfNIt5nJLCLzWiGst9CS6XuuLzf9JAH85m9ZH8AuKfAW2fICX8KyiBicH/s\n,\n            \neGHqdJ7buEidG3WbA3vvGePma2cXDTfBRcddUwvoLTmCxOMt8IPEwuUq0tnS\n,\n            \noJaCHMMN+csbgCTLb+CMvVjzGbgI8Z3LlKCe1siBh6iDvad7/pIEZm7T7OOC\n,\n            \nFFN8mcvExvCZU6mpCGRg7JmXuI5gzq+O3A+x2virikGYG7NjK8w=\n,\n            \n=dDLn\n\n            ]\n        },\n    \nCurrency\n: {\n        \nCurrencyPair\n: \nUSD/BTC\n,\n        \nExchangeRate\n: \n0.00167\n,\n        \nType\n: \nBuy\n,\n        \nSize\n: \n5\n,\n        \nPaymentAddress\n: \n1HZwkjkeaoZfTSaJxDw6aKkxp45agDiEzN\n\n        }\n}\n\n\n\n\nOn the other side of the trade, the buyer (Bob) submits a \nbid offer\n by appending the following data to the \nseed contract\n:\n\n\n\n\nBuyer details\n\n\nBank details (blinded)\n\n\nThe bank details can be hashed and included in a single data field\n\n\nLater the source bank details can be revealed to the buyer and arbiter, who can verify the authenticity of the hash\n\n\n\n\nThe contract with the buyer's digital signature is sent back to the seller (Alice), which can be signed and forwarded to the arbiter for creation of the multisignature escrow address. Bob transfers 5 BTC to the multisignature address and reveals his bank details to Alice and the arbiter. Bob then awaits for the fiat funds to arrive in his account before signing a release of the funds from the multisig address to Alice.\n\n\nChargeback Risk\n\n\nIf an irreversible payment processor (e.g. OKPay) is used, then the multisignature bitcoin address is a sufficient means of managing the exchange risk as chargebacks are theoretically impossible. However, if Alice in this case did not use such an non-reverisble payment processor, the trade can still occur with the punative measures to appropriately manage the charageback risk:\n\n\n\n\nProbation\n\n\nThe purchased bitcoin funds are kept within the multisignature address until the chargeback risk duration has elapsed. This period will be variable, depending on the bank that is used.\n\n\nSurety bond\n\n\nThe seller can post a surety bond (refundable security deposit of bitcoin within multisignature address) for the partial or full amount of funds to be exchanged. This allows the seller to access the exchanged bitcoin immediately. While this appears to be a zero-sum game for a single trade, a regular trader may set aside a pool of funds to be re-used as a surety bond after every trade.\n\n\n\n\n3. Fiat-Fiat Currency Exchanges\n\n\nFor a fiat-fiat exchange, the \nseed contract\n will need the following data fields:\n\n\n\n\nFiat-fiat currency pair (e.g. Euro/US dollar; EUR/USD)\n\n\nExchange rate for the currency pair (e.g. $1.36 EUR/USD)\n\n\nType (i.e buy, sell)\n\n\nSize (i.e. amount of the currency to buy/sell)\n\n\nBank details (this data field can be blinded until funds are transferred to the bitcoin multisignature escrow address)\n\n\n\n\nFor example, Alice desires to purchase $100 Euro for a price of $1.36 EUR/USD ($136.48 USD total). She creates the following \nseed contract\n and broadcasts it on \nOpenBazaar\n:\n\n\n{\n    \nOpenBazaar Contract\n: {\n        \nOBCv\n: \n0.1\n,\n        \nCategory\n: \nCurrency\n,\n        \nSub-category,\n: \nCrypto-Fiat\n,\n        \nNonce\n: \n356a192b7913b04c54574d18cd8d46e6395427ab\n,\n        \nExpiration\n:\n2014-08-29 12:00:00\n\n        },\n    \nSeller\n: {\n        \nNymID\n: \n61768db8d1a38f1c16d3e6eea812ef423c739068\n,\n        \nNodeID\n: \nabc123\n,\n        \nBTCuncompressedpubkey\n:\n044448c02963b8f5ba1b8f7019a03b57c80b993313c37b464866efbf61c37098440bcdcc88bedf7f1e9c201e294cf3c064d39e372692a0568c01565b838e06af0b\n,\n        \npublicKey\n: [\n            \nxsFNBFODLW8BD/9rmoBRBASaZuNpPBG+Gj7/aJcE7aQ4Sti7lKaERFD7/rHd\n,\n            \nWHm+o+FnyQvxpkOuuU6G4q739tP5ZqHx/bn9rhpAKKa+o7es70jlpenHyge4\n,\n            \n0QyIU1/9jXzwlMsXkq9XfbOhqtgiBRpeZ83/ZjUsf5/wQXhrGWvG4rnKj5kh\n,\n            \nYNq8PHzqJO21cDcD7LJy6yPuOgrBfb4MMa3+9lauIZ5Ye2kXR4m1OuWrig0M\n,\n            \n7SwgFZwo3GbmcWe5KCK60nHW0AZh47B/yC18s/uR3t2bGrkQwL6AgTiOd2hX\n,\n            \n/K2l1ccgIPnWo1s/5fMc7HiGpPkioOYhWgDm+2bimh56D2Tq7ikZQSDZIhw4\n,\n            \n2pOQCevN/efak7vc2vaaaKqGreF8EwQ5vahF9bS6aNzXzdG1t6PYVAIupdWz\n,\n            \nCt0vrZr1ynBaIEEBJlFuI3vEyp+X85BVqV9B7gWbcE6vLeUPUB/Nu4NEdg5V\n,\n            \n4Np+URFQvW9NKfN04kGfuEViVe0sfgSEc86h+eJ3gWTI8NdhJZdRkzKzlB7Q\n,\n            \nFzMfL0TzxKSkOSu47eWx64e4xsyvkAVirkDb5VRzoeOOpJ/5ZOE1Cv8XJWEU\n,\n            \nZd/WAyp60LT2Ga8mCqhUrPAkcQKsPhccEn23mxIH8Pt3xWfnDFqtma7Tu2fB\n,\n            \nCM4UKpd/dAjTVnZNNjSuBb+4SGBuGiUkA3yvdwARAQABzR1MaW9uZWwgRGVu\n,\n            \ndCA8bGlvbmVsQGRlbnQuY29tPsLBcgQQAQgAJgUCU4Mt1gYLCQgHAwIJEKnO\n,\n            \nFXGYSKNNBBUIAgoDFgIBAhsDAh4BAAAzQQ/9GArtJ4cNqPqM//NJCsQHCy35\n,\n            \nmKOpErbEkia/U10wlISDYV0S3fJJ+ktE/RSF1ZU+2JMf3Hl4q7hYPsFxPvfa\n,\n            \nyjRL48WBXI/V31zLvZUuH4reut4QLM4e6eAugS3lT+p8jU7mS7audZfUW65/\n,\n            \nVL3ZXJs8QhW52LqffkhAJLQauXBy0gE7+ndbGRVxrquINt2sTZFLBaDOpLr8\n,\n            \n4Aiq+UYunRUOmM7lpMnuErTkTe670Pxsu+8Ta8r+bedXhNIbYcMTgoJLOBLX\n,\n            \nIdL3G7ix5y5ebw0eQXTfX6QfW//er9NOi0lWVtplrYFoQ98kS19/uEta4P7r\n,\n            \nkMqZGBpPc7Ztr3zdeNwmbU3oVOv88ecizuvv3rwMDN5juUZ/KP0vQePA7LEd\n,\n            \npGLdTpBMmwd5t6XArso0pDZl4J6YxVZ5HoIYlw2a648VgF0nli11zzix/YKt\n,\n            \nMSRVOwubuo0YGP/cRJy9qVawNU79wTHtnva86orGuQ5d9H/F7S2+f93u87nG\n,\n            \n5TNnI5ORXWzAHkJ3VU6SDzALs3K9PbzTSu4biSsMFSll2cZjZw2INsH9+gNO\n,\n            \nCWzwS7vROVxuZFQolyuWmBfBwVq5U+S8gmRJELkblR+jXetY5e8T2Cv23Kef\n,\n            \nBj6LBv1HpiUMD6KX4cASS94tMdLlJqa78Yl7A35froh30Tq3wfm1KSX7SuTO\n,\n            \nwU0EU4Mt2AEQAIQzWvnLqtZP9nhWGcGqRwoZP0RJHmnbCpVmmVaoj2I/36k7\n,\n            \nPcuYs1xbc9Qt0gBpCQiskIjmCKVEcs+Dfj960qRxzrVfUQ/O09MrI2eMekhY\n,\n            \nnC+jlBNXc22CgH1ESodZDCZf2iA9qjAjd8swLotJ2v0Mw6GLmuLmejo2M3kV\n,\n            \n/jnQJW5ePHd/Wyw45yA1TJv75UhHZ4mo3/MYPBZnSt624JBt/+T4++XaG1kM\n,\n            \nDf5Ku63SEwhkz/nGpyW4BYTa56Pd/zKVxoxW5SfGfgREw8aw09jaApkfz9fy\n,\n            \nGAXcptFWCAvDDfxSCKiMNFBGzuXmgsB3GmEhaOpA9YwCy5TFPWvJ2U+wZ8DN\n,\n            \nM2JMGgwEL+AfHPa9zSH7fXppF95zpJRMpS0oLM3Rk7OxH+jF5xj+tzNJlBEU\n,\n            \ndrfIw3J6ZZD0wFSZUx4/5Wqa7nCDl/FnrYPXevZXL6eaSsY5umeTNveLLLz1\n,\n            \nSYq+GtRqBgON7fOZbKNxw2udAYpufNX4HXvf/Y/FBf1zrUtxf035a+MmAtSj\n,\n            \nKbf6yUI0BcwNLVBtyMQ6npL0942hH1T37szIL3TT2RZRifSs8u22oZVOxRaE\n,\n            \nyZrRdYrtQpz547rQMJ76a4mplmBGjdMv/ksvicVh1SJ7f+YhtGkUcDWC0CUY\n,\n            \nxnY/jAEL34muSZadG4CAKk7w3jJwryMbE6Y5ABEBAAHCwV8EGAEIABMFAlOD\n,\n            \nLh8JEKnOFXGYSKNNAhsMAACzog//R4yBYDXurrsyFpPS2ndCwm/F0yxIVMYx\n,\n            \n5n/qWxrt+1Yv8sc9PVSLnTilqoVjJIokq6UkpATcmZOxSthCXYX1BjmQdjnl\n,\n            \nz6YGZHWKYkT2BPOJTHvcchSKnx2vn+DIlVIyJjvo6T4zeUVl99XJwWN7kNJ+\n,\n            \nNrlcLzqzksNFW8S6pndkBjn5bC/CzZKgh/KHX7L7ibc3jICgI4MZZLjapf+Y\n,\n            \n4mDmzPoSLrQBHMzAAShj3Li6IEdz0C6KrfGWzVcCHHfpOhWY+A0y4ztOKEEW\n,\n            \nUlrlTPPgxuEbbspee5caBb6mVsvADwn2/wJ2LSYUa0jBSXnQy5Az94xbfbJt\n,\n            \nLqEn7uWsJ9HE0kXOLk89BCSguYog86ptmUXG4uDT5S9zlScR5XC3EJOKpvYU\n,\n            \nNchZS1ydMoerb3VLtVY6pQUqRvSu9+HrouHpp2h2+6B83Eh7gTy7BSqc7TIh\n,\n            \nSsfNIt5nJLCLzWiGst9CS6XuuLzf9JAH85m9ZH8AuKfAW2fICX8KyiBicH/s\n,\n            \neGHqdJ7buEidG3WbA3vvGePma2cXDTfBRcddUwvoLTmCxOMt8IPEwuUq0tnS\n,\n            \noJaCHMMN+csbgCTLb+CMvVjzGbgI8Z3LlKCe1siBh6iDvad7/pIEZm7T7OOC\n,\n            \nFFN8mcvExvCZU6mpCGRg7JmXuI5gzq+O3A+x2virikGYG7NjK8w=\n,\n            \n=dDLn\n\n            ]\n        },\n    \nCurrency\n: {\n        \nCurrencyPair\n: \nEUR/USD\n,\n        \nExchangeRate\n: \n$1.36\n,\n        \nType\n: \nBuy\n,\n        \nSize\n: \n100\n,\n        \nBankDetails\n: \n8c2226df637baf568e26c042dc376f5d4a1492e8\n\n        }\n}\n\n\n\n\nThe buyer, Bob, submits a \nbid offer\n for the \nseed contract\n by appending:\n\n\n\n\nBuyer details\n\n\nBank details (blinded)\n\n\n\n\nThe double-signed contract is sent to the arbiter for the creation of the multisignature escrow address. Both the buyer and seller transfer bitcoin to the address as collateral for their fiat exchange.\n\n\nAs for chargeback risk, it is clearly preferable for both parties to use a non-reversible payment processor. In the absence of this, the bitcoin collateral would not be released until the chargeback risk period as elapsed. \n\n\nListing and Matching Buy/Sell Orders on \nOpenBazaar\n\n\n1. DHT Listing\n\n\nFollowing the \nBitsquare model\n, the buy and sell orders are listed in the DHT (for a fee, which I'd like to avoid). The client then matches the buy and sell orders and places both parties in contact with each other over the network. Contracts can be found using the inverse keyword search on \nOpenBazaar's\n DHT, which is a Kademlia-like P2P network.\n\n\n2. DarkPool\n\n\nThis model uses a private means of matching buy and sell orders, which I think also encompasses private P2P exchanges between parties that have already discovered each other. In this case, the transfer is fairly straightforward and would proceed as I described under the crypto-crypto section.\n\n\n3. Exchange Nodes\n\n\nThis introduces the concept of a node or groups of nodes where buyers and sellers submit their orders to (Ricardian contracts as described in the article). The exchange matches the buy and sell orders, and is the arbiter for transactions. It will also have responsibility for broadcasting the price on their exchange. So this takes advantage of the benefits of centralisation, but if the exchange is taken out it doesn't cripple the ability for individuals to make currency exchange.\n\n\n4.6 Insurance\n\n\nInsurance is a valuable service that is often misinterpreted, over-regulated, and out of reach for many people. On \nOpenBazaar\n, insurance is contextualized as a service that can be offered by anyone or group, leveraging: \n\n\n\n\nThe clarity of terms and conditions set out in a Ricardian contract\n\n\nAn open marketplace for competing insurance policies and service providers\n\n\nThe transparency that crypto-currencies provide via the blockchain\n\n\n\n\nUltimately, the market will decide the most appropriate insurance service and contract models for \nOpenBazaar\n. In this article, we propose some potential implementations as a primer for future development. \n\n\n1. Insurance Services\n\n\nInsurance services fundamentally offer: \n\n\n\n\nA pool of funds to offset a cost that exceeds the capacity of the client to pay within a timely manner\n\n\nA pool of funds to compensate another party that has been wronged by actions of the client, which addresses their capacity to pay within a reasonable time frame\n\n\nA dispute resolution organization that represents the interests of the client\n\n\n\n\nThese services are of course provided through the lens of \nrisk assessment\n to dictate the price of: \n\n\n\n\nThe insurance premium (regular cost of the policy)\n\n\nThe excess (fee paid when insurance is triggered). \n\n\n\n\nTraditional business models of insurance mirror a fractional reserve system in that funds are predominantly reinvested on the statistical reality that it is unlikely for all or even most policies to be triggered at once. Whether this model survives the blockchain era is unknown. The transparency that the blockchain provides may alter consumer preferences for how insurance funds are managed; \nproof of solvency\n may be an inescapable market-imposed regulation. If so, insurance providers will need to prove that the proportion of funds kept in reserve and those reinvested are at the levels that the policy claims. Alternatively,  conservative insurance providers may keep 100% reserves and seek to raise profits only by fees incorporated into the premium and excess. \n\n\nWhatever business model an insurance provider adopts, the terms and conditions of their policy will be listed within a Ricardian contract in \nOpenBazaar\n, with digital signatures as the unmistakable evidence of agreement.\n\n\nWhile the various fields necessary for a comprehensive contract are difficult to predict, the \nseed contract\n may contain the following core data fields:\n\n\n{\n    \nOpenBazaar Contract\n: {\n        \nOBCv\n: \n0.1\n,\n        \nCategory\n: \nInsurance\n,\n        \nSub-category,\n: \nCar-Insurnace\n,\n        \nNonce\n: \n01\n,\n        \nExpiration\n: \n2014-06-29 12:00:00\n\n    },\n    \nSeller\n: {\n        \nNymID\n: \nSamuel Patterson\n,\n        \nNodeID\n: \nSamPatt\n,\n        \nBTCuncompressedpubkey\n: \n044448c02963b8f5ba1b8f7019a03b57c80b993313c37b464866efbf61c37098440bcdcc88bedf7f1e9c201e294cf3c064d39e372692a0568c01565b838e06af0b\n,\n        \nPGPpublicKey\n: [\n            \nmQENBFMKYTUBCADD6kIAjBlJ2Q0NEd97aia0BSBibO1C2lVemWig5cNATeob1McWoEo3QznZ\n,\n            \nf9LaRsuo+ryyqEeXx4p9m9FG/TDeeZvOaiSo2Pg5MtgAdxwJK3ZQ+6b6DjrfYRZplD4qVsQd\n,\n            \n/GhxDr733NBdTpfvE8rYrAttNeU8P9vZpJuU+ESSRNb8Sbgfrym2i7xeMP6/xnyfTunXti7x\n,\n            \nsJzFkGIoF1dc+HntP2b9oSy1y0P5n0FdGt7IaEEtN1AZwAfFJ0obSlXiVdWdPwyambAzj93V\n,\n            \nXD//KxXyxAHjqFD+sdqDzqxBTZ/MC/YCMU1UQ5hvWsx7FRqubLhyMB1p1ycvdnX6nqdTABEB\n,\n            \nAAG0KFNhbSBQYXR0ZXJzb24gPHNhbUBzYW11ZWxycGF0dGVyc29uLmNvbT6JATkEEwECACMF\n,\n            \nAlMKYTUCGwMHCwkIBwMCAQYVCAIJCgsEFgIDAQIeAQIXgAAKCRCI0UoG/7KgjtsoCACaiEO1\n,\n            \n0u22dGDSuBLvFV2UIhyh2Cj9+KEGe7qHlohwbFHqwT+/6B7P5CmBggqL0abMqEqkUCOxk7g4\n,\n            \nrBdCSMeqGe+7VdsXVnNAlEYGd6AqQxfcIPV/r/E0qCUQcJbBxjO8rr7il2o4b98AeU8GB6qU\n,\n            \n8YFblsCv0KlFRYhDngHVfRMpvsTm9NMcm99P6n/UVn2mrhk50EqJMHB7T+b4n0fWQj5M9340\n,\n            \nlmVWnn1i1w3+yDC0v4yLS9UuSuL3UsnC6CP7XPA2z5iVqoTH+i0WguGgGgyUpPIQexGm/IKx\n,\n            \nb5Bb/rRsKpcXtdIT7Vr5US4XtCBe9zWvSWyEAz3llYA/OGx+uQENBFMKYTUBCACToWiWhjWI\n,\n            \naJM1pD0TXTk/IbNWZPhJpfAiYy3EsYwckvAY1Q6yOSWydakimpr+93oBpJpY9y6Aj8GDBNyv\n,\n            \neaAomK2jYV0cqxhOzAH2UgSLptFQawxwR/8+rLz5KDZQGT8SNNDwV7FtFT4ubzeH+ILugnJp\n,\n            \nJo83IjoU5Vg3g1d75Tc38KLd8VbwZ52QcxNaoxoEHQoF8Q+2rRNPwRRr5NX71jQPA6Pxuzpd\n,\n            \nmTogQ5gIA3Zr4cDrxAAPCZAo/bDJF3jhd9lpZXFudlyCwbRNF3qfG9L0S7ES+zIfXFWmryQb\n,\n            \nCUg4pcRfbaN9OY6GWzjOLOzXzEehd7sNbNCKEP3tWqbjABEBAAGJAR8EGAECAAkFAlMKYTUC\n,\n            \nGwwACgkQiNFKBv+yoI4kHQgAiz6mQz0GeOfB60ILe1R/9fkYtejFTTb5P8H/w19S2WM+gFyb\n,\n            \nR4BTg0OSN0YhcmzIzgy1zF1/J+noxEVUS5zbGLytVgLFECyOinFZUc0A/b0nuermvKFuF7GJ\n,\n            \nQcV3Gz1HCNrfaWK7LW5hGTdQZtaFtEmla6Wk+v1MHWWW2K9Ez0KXCqrK5b0Oji2MUh8LRh2p\n,\n            \nmmciki/R0pXXMYMJpeb9IPwOlbIqm8xT4Z93rPYyOwmgii1Dy3Gop/Ofq4yU7GGxjjALR+JM\n,\n            \nyebij7AblNTCSgWXm/QV+ejZH0bR91FbtjdVKoFo6qrL04zuRbBFm2wHv+CYNKwRR2PPcCB/\n,\n            \ndQaGpQ==\n,\n            \n=IB1U\n\n        ]\n    },\n    \nInsurance\n: {\n        \nPolicyNonce\n: \nabc123\n,\n        \nTerm\n: \n12 months\n,\n        \nType\n: \nCar\n,\n        \nPolicyValue\n: \n20 BTC\n,\n        \nReserve\n: \n20 percent\n,\n        \nCoverage\n: {\n            \nFire\n: \nTrue\n,\n            \nWater\n: \nTrue\n,\n            \nFlood\n: \nFalse\n,\n            \nAccidentalCrash\n: {\n                \nIFCauseClient\n: \nFalse\n,\n                \nIFCauseNotClient\n: \nTrue\n\n            }\n        },\n        \nClient\n: {\n            \nPayments\n: \n0.1 BTC\n,\n            \nPaymentFreq\n: \nMonthly\n,\n            \nExcess\n: \n0.25 BTC\n\n        }\n    }\n}\n\n\n\n\nWhen a client takes out an \ninsurance contract\n with a provider, a multisignature transaction is created in combination with the notary's pubkey. The client's insurance funds are paid to the multisignature transaction according to the payment schedule specified within the \ninsurance contract\n. Under the client and/or notary's supervision, the insurance provider cannot extract funds beyond the reserve amount stated in the contract. For large insurance policies, a notary pool can be used for redundancy's sake and to minimize risk for client and insurance provider. Before an \ninsurance contract\n is signed by the client and insurance provider, the latter can provide evidence that they have sufficient funds to payout the full value of the policy (e.g. 20 BTC in the case of the \ninsurance contract\n above).\n\n\nIn the event that the client makes an insurance claim, the client can provide the relevant detail and evidence of the claim to the insurance provider. For a successful claim, the insurer can transfer the required amount directly to the client. If the insurance provider rejects the claim, the client may flag a dispute.\n\n\n2. Transaction Insurance on \nOpenBazaar\n\n\nIt is possible for users to take out insurance for trades made over \nOpenBazaar\n. The purpose of the insurance in this context is to guard against the scenario where a user is subject to a loss of funds and/or goods that \ncannot\n be recovered. This loss is not necessarily due to fraudulent activity, but also covers the accidental loss of funds/goods in transit (i.e. including acts of God).\n\n\nFor example, Alice sells a cat to Bob on \nOpenBazaar\n:\n1. During transit, the cat escapes and an empty cage is delivered to Bob. Bob refuses to sign a multisignature transaction releasing funds to Alice based on the a perceived violation of the contract. \n2. Alice and Bob flag a dispute and engage an arbiter to weigh up the case in order to determine who should receive the funds. \n3. During the dispute resolution process, Alice provides sufficient evidence that the cat was delivered alive and well to the courier. Likewise, Bob is able to provide evidence that the cage was delivered empty to him by the courier.\n\n\nIf the courier in this example \ndid not\n have a presence on \nOpenBazaar\n (i.e. outside of its jurisdiction), the arbiter may have no choice but to rule in favor of Bob (according to their arbitration policy). The arbiter instructs the notary (the third signature of the 2-of-3 multisignature escrow address between Alice and Bob) to create and sign a transaction releasing the funds back to Bob.\n\n\nIn this case, Alice was not at fault but ended up suffering the consequences of an uncommon accident, which is an ideal scenario for insurance to cover. If Alice had taken \nmerchant insurance\n for her trade with Bob, she could make a claim to cover the value of the lost good in the failed trade. The insurance provider may launch their own investigation before deciding to award Alice the insurance funds.\n\n\nIf the courier in this example \ndid\n have a presence on \nOpenBazaar\n, Alice's insurance provider may contact the courier directly or the courier's insurance provider. In the latter case, compensation to Alice can be paid out of the courier's insurance policy funds (most likely after arbitration between both insurance providers).\n\n\n4.7 Crowd Funding\n\n\nArticle Pending\n\n\n4.8 Prediction Markets\n\n\nArticle Pending", 
            "title": "Marketplaces"
        }, 
        {
            "location": "/04.-Marketplaces/#4-marketplaces", 
            "text": "Trade verticals  in  OpenBazaar  refers to types of markets that can be built on top of the platform. In the theory section of the  Github Readme , I have attempted to describe in minor detail how different types of markets can be built on the platform.   These include:   E-Commerce  Physical goods  Fixed price  Auctions    Digital goods  Services  Service Contracts  Invitation to Tender (ITT)  TradeNet    Service Listing  Good Performance Bonds  Lending  P2P lending  Bonds    Financial securities  Stocks  Futures (bounded futures)   Options  Swaps    Decentralised Currency exchange  Insurance  Crowd funding  Prediction markets     One question we are often asked is 'can  OpenBazaar  support X market?'... The answer is  yes  if the terms and conditions can be fully represented in a RC and Bitcoin is being used for the trade in exchange or to collateralise an exchange.   The challenge for  market developers  is to design RCs that capture the semantic detail of a trade to:   Establish consensus between the trading parties  Prevent all reasonable foreseeable disputes, based on  hearsay  Efficiently process on the OB network between the trading parties (i.e. an efficient signing order)    To incentivise good performance by each party, surety bonds can also be written into the contract. Surety bonds essentially reward or penalise a trading party based on performance criteria, which would be clearly stated within the RC.", 
            "title": "4. Marketplaces"
        }, 
        {
            "location": "/04.-Marketplaces/#41-e-commerce", 
            "text": "4.1 Physical Goods  Fixed Price Sales  Trade Flow   Merchant creates and lists contract  Listing includes notary guid and pubkeys (which the client can verify)  Maybe if the verification fails (3 strikes rule or something) the buyer's node can prune the guid from nodes that they relay or connect to  Includes processing time (maximum time the item must be shipped after receiving an order)  Buyer places an order  Appends network ID, pubkeys (PGP and bitcoin multisig escrow), semantic data unique to the item  Appends shipping address (encrypted to merchant's public PGP key)  Generates and appends 32 byte chaincode to create multisig address  Appends  txid  of funding that multisig address  Merchant ships item  Includes tracking number  Includes signed payout transaction releasing funds from multisig to merchant (i.e. 1 signatures of the 2-of-3 multisig)  Buyer confirms item received  Appends a message (if any) and rating/review data  Signs and broadcasts payout transaction to merchant  Appends  txid  of payout transaction   Example of listing contract  {\n     01_merchant : {\n         01_listing : {\n             01_metadata : {\n                 01_obcv :  ,\n                 02_expiry :  ,\n                 03_category :  ,\n                 04_category_sub :  ,\n                 05_order_flow : [\n                     merchant ,\n                     buyer ,\n                     merchant ,\n                     buyer \n                ]\n            },\n             02_id : {\n                 01_guid :  ,\n                 02_pubkeys : {\n                     bitcoin :  ,\n                     pgp :  \n                },\n                 03_handle :  ,\n                 04_passcard :  ,\n                 05_contact : {\n                     bitmessage :  ,\n                     email :  ,\n                     subspace :  \n                },\n                 06_role :  merchant \n            },\n             03_item : {\n                 01_title :  ,\n                 02_description :  ,\n                 03_condition :  ,\n                 04_price : {\n                     bitcoin : 0\n                },\n                 05_shipping : {\n                     est_delivery :  ,\n                     region :  \n                },\n                 06_images : {\n                     image_hashes : [\n                         ,\n                         ,\n                         ,\n                         ,\n                         \n                    ],\n                     image_urls : [\n                         ,\n                         ,\n                         ,\n                         ,\n                         \n                    ]\n                },\n                 07_keywords : [\n                     keyword1 ,\n                     keyword2 \n                ]\n            },\n             04_notary : {\n                 01_guid :  ,\n                 02_pubkeys : {\n                     pgp :  ,\n                     pubkey :  xxx ,\n                     pubkey_selfsig :  XXX \n                },\n                 03_handle :  ,\n                 04_passcard :  \n            }\n        },\n         02_signatures : {\n             bitcoin :  ,\n             pgp :  \n        }\n    }\n}  Auctions  It is becoming increasingly clear that  OpenBazaar  will become a powerful platform that will support a variety of peer-to-peer market transactions. One of the most fundamental market transaction types is the  auction  of a good by a seller to discover the market price. In this article, we cover one possible way of auctioning a good using  Ricardian contracts .   It should be noted that this proposal essentially describes the 'back-end' of implementing Ricardian contracts into auctions on  OpenBazaar . It is important that the end-user (i.e. your mother, grandfather etc with novice skills) will be unaware of digital signing, hashing etc occuring in the background unless they choose to be, in order to lower the technical barrier of entry for using  OpenBazaar .  The merchant firstly selects an  auction  template contract in  OpenBazaar . In this type of contract, the product and auction details of the good to be sold are entered into  required  fields within the JSON or XML file. The product auction details would include:   The name and description of the item  A minium sell price, if any  A 'buy now' price, if desired  An expiration date for the auction  A blank field for a bidder to enter their price   For example, let's imagine Alice wants to sell a yellow pinata on  OpenBazaar . After digitally signing it, the  auction_contract  looks something like this:  {\n    01  : {\n       01_listing  : {\n          01_metadata  : {\n             01_obcv  :  ,\n             02_expiry  :  ,\n             03_category  :  ,\n             04_category_sub  :  ,\n             05_order_flow  : [  merchant ,  buyer ,  merchant ,  buyer  ]\n         },\n          02_id  : {\n             01_guid  :  ,\n             02_pubkeys  : {\n                bitcoin  :  ,\n                pgp  :  \n            },\n             03_handle  :  ,\n             04_passcard  :  ,\n             05_contact  : {\n                bitmessage  :  ,\n                email  :  ,\n                subspace  :  \n            },\n             06_role  :  merchant \n         },\n          03_item  : {\n             01_title  :  ,\n             02_description  :  ,\n             03_condition  :  ,\n             04_price  : {\n                bitcoin  : 0.0\n            },\n             05_shipping  : {\n                est_delivery  :  ,\n                region  :  \n            },\n             06_images  : {\n                image_hashes  : [  ,  ,  ,  ,   ],\n                image_urls  : [  ,  ,  ,  ,   ]\n            },\n             07_keywords  : [  keyword1 ,  keyword2  ]\n         },\n          04_notary  : {\n             01_guid  :  ,\n             02_pubkeys  : {\n                pgp  :  ,\n                pubkey  :  xxx ,\n                pubkey_selfsig  :  XXX \n            },\n             03_handle  :  ,\n             04_passcard  :  \n         }\n      },\n       02_signatures  : {\n          bitcoin  :  ,\n          pgp  :  \n      }\n   }\n}   Bob accesses the contract and chooses to bid on the pinata, appending his ID details and the bid price. Alice may receive five different bids on the yellow pinata and according to her conditions, the originally contract is updated with the latest bid price. At the end of the expiration date of the contract, Alice digitally signs the final winning  bid contract , sends it to the arbiter for digitally signing and creating a multisignature bitcoin address for the winning bidder, Bob.   Due to the architecture of the P2P network setup, Alice may not be available 24/7 during the term of her  auction contract  to update the market on the latest bid price of the item. As a result, she may choose to upload her contract on a 24/7 accessible node (a  negotiator node ) that acts as a contract  server . If so, the  negotiator node  will create their own contract for the item, digitally sign  bid contracts , update the  \"current_bid\" , and turn over the final  bid contract  to Alice for her digital signature at the end of the contract/auction expiration date. If Alice digitally signs the contract, the contract is sent to an arbiter for sigining and creation of the multisignature bitcoin address for Bob, the winning bidder, to send funds to. As a reward for hosting the contract, the  negotiator node  is rewarded by a fee paid for by Alice (via another multisignature address setup with anoter arbiter). If Alice disapproves of how the contract was negotiated by the  negotiator node  on her behalf, she can simply refuse to sign the contract and raise a dispute to the arbiter for a refund of the fee from the multisignature address.  Insurance  For the seller (Alice), she can have confidence that the funds for the item actually exist once Bob has sent the required amount of bitcoins to the multisignature bitcoin address, upon which she will ship the item to Bob's designated address. Similarly for Bob, he can retrieve the funds from the multisignature address if he can prove to the arbiter's satisfaction that he goods either did not arrive, or did not arrive in the condition specified in the contract.  To further promote good behavior, the arbiter may require a  surety bond  from one or both parties. The surety bond is a quantity of bitcoins sent from either the buyer or seller (or both) held in a multisignature bitcoin address that is refundable upon a successful trade. If a dispute arises, and one party is found to be at  malicious  fault, the funds within the surety bond are transferred to the arbiter and opposing party as compensation.  A  non-malicious  versus  malicous  fault may be, for example, a shipping comapany damaging the goods during transport ( non-malicious ) versus the seller knowingly sending a damaged good ( malicious ). The value of the surety bond is negotiable and completely optional. However, it is reasonable to expect that surety bonds will become less necessary between individuals with a high  web of trust  reputation and/or  proof of burn  identity.", 
            "title": "4.1 E-Commerce"
        }, 
        {
            "location": "/04.-Marketplaces/#42-services", 
            "text": "Index:   Service Contracts  Invitation to Tender (ITT)  Service Listing  Good Performance Bonds   A service contract in  OpenBazaar  replaces a physical good to be sold with the terms and conditions of a service to be performed by one party. The distinction between a good and service within a Ricardian contract is minimal. Morever, the combination of reputation management and surety bonds can ensure a robust service industry within  OpenBazaar .  Service Contracts  The final format of a service contract is of course comparable to that of a physical good. Similar to physical goods, there are several discovery mechanisms for services on  OpenBazaar .\nFor the sake of simplicity, we will examine two types of service contracts that can be supported in  OpenBazaar , following the Ricardian contract model:   Invitation to Tender (ITT)  Service Listing   Invitation to Tender (ITT)   A call for bids, call for tenders, or invitation to tender (ITT) (often called tender for short) is a special procedure for generating competing offers from different bidders looking to obtain an award of business activity in works, supply, or service contracts... Open tenders, open calls for tenders, or advertised tenders are open to all vendors or contractors who can guarantee performance. (Wikipedia)   The first type of contract is an  invitation to tender (ITT) , whereby a client publishes their list of requirements for a desired good or service. In the context of a service, these details are specified within a Ricardian contract and distributed to potential service providers in the  OpenBazaar  network. Relevant ITT contract details include:   Name and category of the service  Chosen from a list of pre-determined categories and sub-cateogories  This list will be frequently updated to reflect market needs, and include custom categories to support new markets on  OpenBazaar  Price range  The price that the buyer is prepared to pay for the service  This can be left blank  Estimated time of completion  The maximum time that a buyer expects the service to be performed  Comments and special considerations  Any comments or special details that the service provider needs to be aware of   The details of the contract can be further negotiated between the parties before a contract is double-signed (i.e. a contract signed by both the buyer and service provider indicating consensus on the final version of the contract)  For example, if Alice wanted to deliver some cupcakes to a co-worker on the other side of the city, she writes the following Ricardian-contract as an ITT:  Contract Hash:   5a13604e59b03c3b34f830c53919e176aa4cdc59  {\n    001  : {\n       listing  : {\n          id  : {\n             contact  : {\n                bitmessage  :  ,\n                email  :  ,\n                subspace  :  \n            },\n             guid  :  ,\n             handle  :  ,\n             onename  :  ,\n             pubkeys  : {\n                bitcoin  :  xxx ,\n                pgp  :  xxx \n            },\n             role  :  customer \n         },\n          metadata  : {\n             category  :  service ,\n             category_sub  :  invitation to tender ,\n             contract_code  :  123-xyz ,\n             expiry  :  3 hours ,\n             obcv  :  b5.0 \n         },\n          order  : {\n             comments  :  Hi, I'd like to deliver the cupcakes to my co-worker before she gets into work, which is around 9.30 am. Thanks. ,\n             date  :  2015-07-04 9 am  ,\n             delivery_address  :  900 W Eddy St, Chicago, IL 60613, United States ,\n             item  :  chocolate cupcake ,\n             pickup_address  :  1060 W Addison St, Chicago, IL 60613, United States ,\n             quantity  : 1,\n             type  :  delivery \n         }\n      },\n       signatures  : {\n          bitcoin  :  XXX ,\n          pgp  :  XXX \n      }\n   }\n}  Alice publishes the unencrypted contract to the  OpenBazaar  network, where service providers can scan for contracts that match the category/sub-category fields that they are interested in. Bob, owner of 'Raven Drone Courier', is interested in securing the contract. In order for a service provider to place a bid on a contract, they prepare a 'tender' that will append the following details to Alice's contract:   ID details of the individual/business  Fee for the service  Terms and conditions for providing the service   The contract is then sent to Alice. Alice may receive tens or hundreds of bidding contracts to her  ITT  and can filter the bidding contracts according to their price, delivery time, reputation etc. Once Alice chooses the winning bid contract, and provided she has not finer details to negotiate, she digitally signs contract and sends copies to the bidder and an arbiter to setup the multisignature address.   The  TradeNet  A long term outcome of supporting  ITT  contracts within  OpenBazaar  is the potential for it to become a 'TradeNet', as descibed by  Mike Hearn  (slide 25). The original proposal imagined the  TradeNet  to be a market infrastructure for applications, potentially distributed autonomous corporations/businesses, to interface with in order to purchase goods and services according to their programmed goals and profit motives. These applications would issue tenders for goods or services on the  TradeNet , receive bids and automatically purchase contracts based on algorithmically-determined conditions (factoring in price, proximity, time etc).  A much more attractive alternative is for  OpenBazaar  to potentially faciliate  ITT  contracts for both individuals and distributed consensus/autonomous organisations for peer-to-peer exchanges of goods and services. This is achievable using Ricardian contracts as they are both human and application readable, permitting human-application exchanges without either party known the true identity of each other if so desired.  Service Listing  The second type of service contract is called a  service listing , where service providers can advertise their services to potential clients in the hope of receiving a quotation request. Contrary to an  ITT , where service providers seek out contracts to bid on, a  service listing  will be 'Yellow Pages' of individuals/organisations filtered according to the category/sub-category of services they provide. The  service listing  will be formatted as a Ricardian contract including the following fields:   Category and sub-category of service provision  Estimated prices  Estimated time to complete certain services  Availability  Comments and special considerations  Quotation response time   A potential client can request a quote from the a service provider by drawing up a fresh service contract (according their requirements) that includes a hash of the  service listing . The inclusion of the hash indicates that the client is requesting a quote based off the specifications advertised by the service provider's  service listing . From here, the contract is negotiated between both parties as described above prior to double and triple digital signing to initate the contract.  Good Performance Bonds  A surety bond can be created to cover a failed contract, which either partially or fully remediates the costs of the failed contract for the damaged party. However, as some conditions of the contract can fail without damaging the final outcome of the contract, smaller value surety bonds can be created to incentivise 100% contract fidelity. These smaller surety bonds can be called 'good performance bonds' (GPB).   For example, GPB may be written to penalise a service provider or supplier for failing to meet a contractually obligated deadline. Another example is a GPB for the client to follow the terms and conditions of the service specified in the contract (i.e. be at a certain place by a certain time).  The GPB can be factored as a deduction for the service provider's fee for the sake of simplicity, which can be carefully monitored by the arbiter. Within the contract, a GPB can be formatted within the following fields (using the example above):  {\n   good_performance_bond : {\n     condition_1 : {\n       penalty :  7 mBTC ,\n       description :  Failure to delivery goods before 9 am \n    },\n     condition_2 : {\n       penalty :  5 mBTC ,\n       description :  Failure to sign for delivered goods within 7 minutes of the drone's arrivate at the delivery address \n    },\n     condition_3 : {\n       penalty :  2 mBTC ,\n       description :  Failture to respond to enquires within 20 minutes \n    },\n     condition_4 : {\n       reward :  5 mBTC ,\n       description :  Item is delivered before 8.45 am \n    }\n  }\n}  The inclusion of GPBs would occur from the outset of the contract's formation, requiring both parties to digitially sign to indicate their agreement. The arbiter can verify the authenticity and integrity of these terms by both party's digital signatures and contract hashes, as per a normal Ricardian contract.", 
            "title": "4.2 Services"
        }, 
        {
            "location": "/04.-Marketplaces/#43-lending", 
            "text": "Index:   Ricardian Loan Contracts  Risk Management   Banks are centralised institutions that, among other things, offer credit to individuals, groups and corporations. Historically, banks were a nexus of borrowers and lenders, matching the  supply  of liquidity to the  demand  for credit. The primary role of a bank was risk management in the form of the due diligence required to assess if a potential borrower was a worthwhile investment. With the advent of nation-state money printing and fractional-reserve banking, whereby money is  lent into existence  and losses are publicly subsidized by inflation and bailouts, the traditional care of risk management for loans has all but been obiliterated.  Peer-to-peer (P2P) lending has emerged as a means to decentralise the oligopolistic hold that banks possess in every category for lending. While P2P lending is still in early days, regulatory pressure is mounting making P2P lending services using fiat dollars especially vulnerable to the legacy financial/political order. Using Bitcoin, this legacy threat is largely eliminated, but introduces new problems in the traditional approach of risk management. The purpose of this article is to suggest possible solutions to these problems and how they might be executed on a pseudonymous censorship-resistant marketplace like  OpenBazaar .  4.3.1. Ricardian Loan Contracts  As with other goods and services on  OpenBazaar , the loan is drawn up as a  Ricardian-style contract  that I will refer to as the  loan contract  for the rest of the article. The loan contract is initially written by the  borrower  and distributed/published on the  OpenBazaar  network, as the borrower is trying to convince the market to purchase their unmaterialized future good (a interest markup of the original loan amount).  Let us imagine a  borrower , Bob, and a  creditor , Alice:  Step 1: Debtor creates a loan contract  The loan contract specifies that Bob wishes to exchange  110 mBTC in 1 year  for  100 mBTC now  (i.e. Bob wants to borrow 100 mBTC). The interest rate is 10% p.a. The following fields are introduced in the  loan contract :  1. Loan_amount: 100 mBTC\n2. Loan_term: 1 year   \n3. Interest_rate: 10% p.a.\n4. Interest calculated: monthly\n5. Payment schedule: monthly\n6. Address and self-signature  Bob digitally signs the contract and publishes it to the network.  {\n     001 : {\n         01_debtor : {\n             01_metadata : {\n                 category :  loan ,\n                 category_sub :  fixed term ,\n                 contract_expiry :  30 days ,\n                 obcv :  b5.0 \n            },\n             02_id : {\n                 contact : {\n                     bitmessage :  ,\n                     email :  alice@alice.com ,\n                     subspace :  \n                },\n                 guid :  zxc987 ,\n                 handle :  alice ,\n                 onename :  +alice ,\n                 pubkeys : {\n                     bitcoin :  xxx ,\n                     pgp :  xxx \n                },\n                 role :  debtor \n            },\n             03_notary : {\n                 guid :  abc123 ,\n                 handle :  Acme Notary Service ,\n                 keys : {\n                     pubkey :  xxx ,\n                     self_sig :  XXX \n                }\n            },\n             04_loan : {\n                 debt :  100 mBTC ,\n                 interest_calc :  monthly ,\n                 interest_rate_perc :  10 ,\n                 keywords : [\n                     loan ,\n                     10% pa \n                ],\n                 loan_address : {\n                     btc_address :  xxx ,\n                     self_sig :  XXX \n                },\n                 repayments :  monthly ,\n                 term :  365 days \n            }\n        },\n         02_signatures : {\n             bitcoin :  XXX ,\n             pgp :  XXX \n        }\n    }\n}  Step 2: Creditor accepts the loan contract  Alice agrees with the contract and appends the following data:   Network ID (plus any other ID data)  Indicates the role of Alice as a  creditor  A schedule of repayment bitcoin addresses (i.e. an address for each month across the term of the loan)  There are an estimated 12 repayment schedules in the example, so Alice attached 12 unique addresses for Bob to send each repayment  Multisignature escrow details  Multisignature address generated from the debtor, creditor, and notary  Redemption script    Funds will be released from multisignature escrow to the exclusive control of the debtor after confirmation; notary stands by refund the creditor if a problem arises before confirmation  TXID  of the creditor funding the multisignature address   If Alice wants to change the terms of part of the contract, she can write, sign and send a fresh contract to Bob. If Bob disagrees, he can simply ignore the contract, or sign it if the change in terms acceptable (e.g. Alice increases the interest rate to 11% p.a., or changes the schedule to fortnightly repayments). Note that this is the only stage where this can happen as once both parties have signed the terms of the contract, it is locked-in as far as dispute resolution is concerned.  Step 3: Loan confirmed  Bob (debtor) confirms that the loan will proceed and appends a signed transaction releasing the funds into his control.  Step 4: The creditor signs and releases funds to the debtor  Alice (creditor) signs and broadcasts the transaction from step 3, releasing funds to Bob.  Step 4+n: Repayments  For every repayment, Bob appends to the loan contract evidence of the repayment addresses being funded along with the outstanding balance of the loan, until it is paid off.  4.3.2. Risk Management  1. Credit Ratings and Collateral  The process above has thus far described how the  loan contract  is created and processed for auditing purposes by the arbiter. However, it has not dealt with how  loan contracts  will be protected from fraud by bad actors on  OpenBazaar . Traditionally, there are two major ways to manage risk for potential loans:   Assess the borrower's  credit rating  Require  collateral  for the loan   Credit Rating   an estimate of the ability of a person or organization to fulfill their financial commitments, based on previous dealings.   As a credit rating often involves an individual disclosing their income and previous financial dealings to the creditor and other third parties, the concept of a traditional credit rating is incompatible with the goals and purpose of  OpenBazaar . New and innovative solutions are required assess the credit-worthiness of an individual in a pseudonymous marketplace.    Collateral   something pledged as security for repayment of a loan, to be forfeited in the event of a default.   A borrower must provide  collateral  to the creditor before a loan is approved.  Collateral  can be any good belonging to the borrower that has an equivalent value to the amount being loaned. In case of a credit default, the creditor can physically possess the  collateral  to recover their losses.  2. Web of Credit  Taking the  web of trust  concept one step further,  OpenBazaar  can facilitate peers extending lines of credit to each other. If there is a successful trade between Alice and Bob, Alice may choose to extend a 5 mBTC line of credit to Bob. Bob can borrow this money at any time according to the prescribed conditions set by Alice. The funds can be kept in a 2-of-3 multisignature address, using an arbiter as a third signature. This line of credit can be publicly disclosed and audited by other peers. The aggregate of a pseudonym's line of credit becomes a powerful and informative risk signal for other peers, with risk being inversely proportional to the sum total line of credit.  The line of credit can be considered as collateral by a potential creditor, knowing that a pseudonym's line of credit can be called upon to satisfy a renumberation of second loan. For individual extending lines of credit, they have an opportunity to invest in successful and well-regarded trade partners.  3. Collateral as User-Created Assets  In  OpenBazaar , collateral can be transferred by digitally signing possession of a user-created asset, represented by a Ricardian contract. Briefly, Jack may posses 0.1 ounces of gold and wants to exchange it for other goods and services on  OpenBazaar . Jack writes a contract stating that he has possession of 0.1 ounces of gold. To sign ownership of that contract to another individual, Jill, Jack can create a fresh contract with the following data:   A encrypted copy of the old contract using Jill's public key  Updated ownership details (i.e. Jill owns 0.1 ounces of gold)   The new contract is then digitally signed with Jack's private key. Now, this entire process assumes that Jack actually has 0.1 ounces of gold behind the contract and is able to physically transfer the goods or their custody (if a third party, like a vault, is holding them). The burden of proof will be on Jack to demonstrate to Jill that contract is valid. Jack can also seek other highly rated (web of trust) third parties or arbiters to sign the initial contract after they are satisfied with Jack's proof.  Outside of the Ricardian contract model in  OpenBazaar , user-generated assets from colored coins or other sources (Mastercoin, Counterparty, OpenTransactions etc), can also be offered as  collateral  for a loan.  Part 4: Collateral and Distributed Collateralized Trusts  What if a user like Bob is unable to provide sufficient  collateral  for the loan due to either: 1) his wealth status living in a developing country, or 2) providing  collateral  in the traditional sense would reveal his pseudonym's identity?  One possible solution is for Bob to purchase  collateral  from a  distributed collateralized trust  or  dCT . A  dCT  is a collection of users that pool a certain value of funds in essentially a term deposit. This term deposit serves as  collateral  for a loan in the event that the borrower defaults. In return for this risk, the borrower pays each member of the trust a fee that makes up the effective interest rate of the term deposit. Using the example thus far, Bob purchases 100 mBTC collateral from a 10 member  dCT  at the price of 10 mBTC. Under this arrangement, each member of the  dCT  risks 10 mBTC for a term of 1 year for a return of 1 mBTC (or roughly 10% p.a.), paid for in advance by Bob's fee  Alternatively, Alice could forgo Bob's collateral in favor of a 10 mBTC downpayment upfront. However, Alice will not be compensated if there is a default on the loan. This option could be viable if Alice routinely lends funds to Bob and extends to him a sufficient level of trust.  dCTs however, confer a number of advantages:   Overall level of risk is spread  Multiple layers of due diligence  Both the creditor and the dCT will need to evaluate the profitability of lending to Bob, decreasing the chances of spurious lending  The dCT can also examine the track record of the creditor, Alice, for their success in picking borrowers  The purpose of the loan can be interrogated, and if possible, funds can incrementally be released  Promotes liquidity  The creditor has, in effect, insurance in lending  The level of risk that is an obstacle for the lender is now lower than the level of risk for each member of the dCT, making relatively capital-intensive loans possible   A dCT is not necessarily appropriate for small-medium sized loans, as a borrow can crowd-source the loan as the level of risk is especially low. However, it will be up to the creditor to evaluate their level of risk tolerance and what steps they take to manage that risk.", 
            "title": "4.3 Lending"
        }, 
        {
            "location": "/04.-Marketplaces/#44-financial-securities", 
            "text": "Bounded Futures  A forward contract is an agreement to buy an item for an agreed price in future. For example it might be possible to agree to purchase a barrel of crude oil a month from now for $100. If in a month the market price of crude is higher than $100, then the contract has positive value. If the price is lower, the contract has negative value.  Value of bought futures contract in one month = item price in one month - futures price  Symmetrically, it is possible to enter a contract to sell crude in a month for $100. This gives the negative value of a bought future.  Value of sold futures contract in one month = futures price - item price in one month  The contract allows both sides to have an exposure to the market price of crude without owning the asset. For a fungible asset like oil it is not even necessary for to exchange the physical asset at the agreed sale time; buyer and seller can simply settle for the economic value of the contract (difference between the agreed futures price and the market price).  Futures contracts are widely used for currencies, equity indices (like the S P 500), interest rates, bonds, commodities, and recently for more exotic risks like temperature and rainfall. These markets allow a far greater flexibility in speculation and hedging for market participants than would be available in the ordinary cash markets for the underlying assets. In many cases the futures market volume exceeds the cash market, and the price is first determined by trades in the futures market and later reflected in changes in the cash (or spot) price.   A difficulty with futures contracts is that it requires trust between contracted parties to pay the agreed contract value. If the price of crude increases to $150 in one month the buyer of the contract must have a mechanism to receive $50 from the seller (or equivalently a physical barrel for $100).  This obligation must be backed by enforceable contract.  Futures traded on financial exchanges have a smart mechanism to solve this problem. Each side provides some amount of money to the exchange as collateral for their side of the agreement. If the market price of the contract changes (observed through other trades on the same item) one side has to provide additional money to the exchange. If they are unable to meet this call for extra collateral the exchange finds a new counterparty to the trade (buyer or seller). If the exchange is careful to always have sufficient collateral to absorb market price movements the contract will require no trust between buyers and sellers. Both sides do not even need to know about each other; the exchange is the legal counterparty to both sides.   This very elegant solution has a problem: the exchange must monitor the markets and make a guess at the probable size of price changes to determine how much collateral to require from each side. If the price movements are large or the contract is not traded often the exchange might not be able to find a suitable counterparty and be forced to take a financial loss on the contract.  For a properly decentralized market a different solution is required that does not need monitoring of an exchange and also does not expose the parties to credit risk.  One solution  is to have contracts that have limited losses or gains. Taking the example of the crude oil contract from the example earlier, a contract might only be exposed to the price risk if the price of crude was between $80 and $120. Each side of the contract would put up $20 in collateral and the value of the contract would be determined without any credit risk or need for margining.   The payoff of this new contract is a bounded version of a usual futures contract payoff:   (This assumes that the futures price is $100. A slightly more general contract payoff includes an offsetting amount if the price is different.*)  This bounded contract is more flexible than an ordinary future (an ordinary futures contract is a bounded contract with bounds at 0 and \u221e). A series of contracts can be \"chained\" together, where the lower bound of one contract is matched to the upper bound of another. It is also possible to mimic the operation of a traditional futures exchange. As the asset price approaches the upper bound the exchange asks for additional collateral from the seller to buy the next bounded contract. In this way the operation of bounded contracts can be hidden from market participants who find trade in the bounded contracts too daunting.  A more subtle advantage of bounded contracts comes from their non-linear structure. A bounded contract is equivalent to buying a European call option with a strike at the lower bound and selling a call at the upper bound. Hence any market trading bounded contracts is also indirectly pricing and trading options. Usually it is relatively difficult to establish an options market in an asset because it requires sophisticated sellers to price the risk and a high volume in the underlying market for hedging.  This makes options markets expensive and The existence of options in a market provides a much richer set of trading possibilities than with a simple cash or futures market. Options implicitly price expected volatility in the market (this is the essence of the Black Scholes formula \u2013 that hedging costs for options are dependent almost completely on the price volatility and not on the price direction). Options also implicitly provide a market estimate of the probability of the price entering a certain range. Imagine a bounded contract with a very small bound (say 99.5 to 100.5). This contract would be worth $0if the price is less than 99.5 and $1 if the price is more than $100.5. The market price of this contract is implicitly an estimate of the probability of the price exceeding $100.5.  If the price of the contract is $0.5 the market believes the probability is 50%; if the price is $0.1 the market believes the probability is 10%.**    This allows traders to express more sophisticated views on the future price behavior than the crude up/down bet available through a future. The trader can speculate or hedge on the price achieving a certain range, or construct a trade to bet that the market priced probabilities are too wide (variance), or not reflecting sufficient asymmetry in price behavior (skewness). All these additional possibilities enhance the capability of the market to provide effective risk transfer.  However good things do not come for free, and there is a reason why spread contracts are not traded as frequently as futures on exchanges. The existence of multiple contracts divides the market volume between the contracts and makes trading in large size more difficult and costly.  This is a serious drawback but there are mechanisms to moderate the problem. When a contract is offered for sale or purchase some traders might be willing to \u201cconvert\u201d the contract into a nearby bound, simultaneously buying the one contract and selling the other. In this case a contract bid or offered at one bound would immediately and automatically provide volume to nearby bounds. This conversion service could be provided by the exchange itself, or by dedicated specialized market makers who would propagate liquidity amongst contracts in the hope of receiving up a small profit on average.   Bounded futures contracts are natural structures for decentralized markets where trading volumes are likely to be patchy and trust difficult to establish. Parties to the contract can determine how much risk they want to be exposed to and for how long. This removes the usual problems of margining (collateral) from the exchange in exchange for creating a problem by dividing liquidity between multiple contracts. But on net this trade is worthwhile: it allows a completely decentralized and autonomously operating futures market and an extraordinary flexibility of financial structures.  Example of a bounded futures contract as a hedge for a sale contract  Suppose we have the following scenario:  Chair spot price: 0.01BTC\nBTC spot price: $300\nOne month futures price for BTC $300.\nChair in USD: $3  We agree to buy the chair to receive 0.01BTC in one month and wish to hedge the USD/BTC exposure.  To hedge with a normal futures contract, we agree to sell 0.01BTC in one month (short selling - shorting - bitcoin) for the futures price of $300/BTC ($3). Any changes in the price of BTC are fully hedged.  To hedge with a bounded futures contract we agree to sell 0.01BTC in one month for the futures price of $300/BTC ($3) bounded between 250USD/BTC ($2.5) and 350 USD/BTC ($3.5).  If the price of BTC after a month is at the upper bound ($350), the contract to sell 0.01BTC for $300 ($3.5) has a market value of -$0.5 (i.e. $3 - $3.5 = -$0.5). At the lower bound ($250)  the contract is worth $0.5 (i.e. $3 - $2.5 = $0.5).  Both parties to the bounded futures contract put up $0.5 in collateral, in the multisignature escrow address, to cover their the maximum possible loss.  If the price of BTC/USD varies less than 50% the bounded futures contract provides a perfect hedge.  If it moves more in either direction (above $350 or below $250) then the hedge is only partial.  (*) This is summarised by the following: img src= http://s28.postimg.org/6019zqdwd/Equation_2.png  width= 400px /   \nwhere F is the bounded contract  price  which makes the contract a fair trade for both parties. A more general form is:   img src= http://s9.postimg.org/w954bx9wf/Equation_3.png  width= 200px /   \n(**) In the limit as the bound approaches zero this is known as the \u201crisk neutral\u201d probability. This allows a probability distribution (the \u201crisk neutral distribution\u201d) to be constructed across the range of price where the contract trades.  2. Bounded Futures Ricardian Contract for  OpenBazaar  This is an example of a bounded futures contract that may be issued in  OpenBazaar :  {\n   001 : {\n     listing : {\n       metadata : {\n         obcv :  0.1 ,\n         category :  Securities ,\n         subcategory, :  Bounded Futures ,\n         Nonce :  XXX-XXX ,\n         Expiration :  XXXX-XX-XX XX:XX \n      },\n       futures_contract : {\n         item :  Wheat ,\n         units :  30 bushels ,\n         current_price_per_unit_btc :   0.02 ,\n         price_total_btc :  0.6 ,\n         term_days :  5 days ,\n         limit_btc :  0.05 ,\n         spot_price_source :  http://data.tradingcharts.com/futures/quotes/W.html \n      },\n       issuer : {\n         guid :  b5016e193656d33693a38bc2dbea7c80440c09ee ,\n         handle :  drwasho ,\n         legal_address :  ,\n         pubkeys : {\n           pgp :  xsFNBFMZcEIBEADJlq0oVgLfFDdW9WOBguskPdSSeAfHe4s9w8QlmRuO/Zj548gKfofbM84rtP3rHSOSkeOTsu5GwDt48V/md6gyJ69BTZJkJ6qmxFtGaWVRLP/UD4mavW4EAn3PvWY6X7Z8x36U3j2I6vknH1Ufu5Dh5qvQC3WsMliul9ZxlJQZ1/TkQE+qI/gBPRmsMFZ/xV2VOEjMtM3qOPoemhYFzU39/ra0isk81sXrotySkvWw6zsrx8NrkBaw9mxhs0kumF06AfKSrBjytFIdbJaWtNrCdxJ+NMfzQUHmq9bzpBI2VpNJzFQI4WlO8eRYDS1Z88VxXOjMZchd70JfNNWcXwCUeOA/HUgHO4tWczvb/5/C5pfZRKuDqfOLntcMEzpPxbhAbXvU+K5TK394SGgu9ioXl3rdrFj1B1EBPH2BfnOdwCiOOr5ccWVPUHdG34i4D98ARgeqEDxq9WZwq8FG9rgSszqkmnGQtSZxz8aoW1kU1h1SQumqs2ZUrEoLGACkNg16kRq2z7RBLc4MAm3/GW3ygeEFQxK0PMief0X2+l0oVo7a0ARMLLLx4ckuoX3DIJvBegFPvlp0rO3JihdzNmCqIBTDok7D0k2NiQsm3WDJHAYB+8G4ruHVPAOzPNxz5krF+u71jcWmZKO4FRAcXCrWTQCku7wLyzOF80sVEDlwARAQABzWNEciBXYXNoaW5ndG9uIFlhbWFuZHUgU2FuY2hleiAoMjAxNCBLZXlwYWlyIGZvciBuZXcgZW1haWwgYWRkcmVzcykgPHdhc2hpbmd0b24uc2FuY2hlekBvdXRsb29rLmNvbT7CwXkEEwECACMFAlMZcEICGw8HCwkIBwMCAQYVCAIJCgsEFgIDAQIeAQIXgAAKCRDgeMiuv/IyzzaGEACiYWINH5utgquhNPIGl8oPXQwi3cdHbLROXk9s8K5jumxO3qyzrZuag+M39eKrDOgMTteLcCuJV+9sgdmSJHsLuH9o9/PPwaKHsY995C0Y5ZRsvABRQbHoOJPsdq136gH2Z0kW/RJ2fqQfNrDiqyPJpWTkrnnRZF2XU8OlIAq+BsyeVqxOiht1vMIz2TXLanbP6leas7Wah1GRuzhd68+NCyCUQJ4bnBDv6cbGwXRVi7kOOvXYoTilCENdbSuYfGWrq7z54DrefjTP3+0Y/YTWwUQr/yvXi915UCDVU+T6jaqCwtqmezr1VjkMrFQOOrOY7jWmYo4AwQfr4hW9iLdiggr6bPmz0YRfT83a9r9Z+SmU4zuLWmmJXARiUGBwhXUmyqFQa1yjCVI+50uW8Wx3iDot9qiO7gSB878Zq1sKtt3EXolTDGgpVIxZ78do42X02wD8gwGGOdDU3Dzywjy3qcIbVWreuT8tEvCU+Wxw0TGzeoBLcHezhLEbaAOmE5jAmKPL9EbRQBGS1nV3uwzW24vu9ftNqmseYXC2afWDCulmUHHAQEfleJA/mKii2mYV7Yxclib81+EzkzJBPijgUJBN9A1PxqliF8ZDXF/h/jQomASoDBAL8VWo7qwTQlc5CZKZ6xnUZGdUU9lFBmnclw0A6PrMBaZjm1zeKJr1Q===G1fD ,\n           bitcoin_pubkey :  044448c02963b8f5ba1b8f7019a03b57c80b993313c37b464866efbf61c37098440bcdcc88bedf7f1e9c201e294cf3c064d39e372692a0568c01565b838e06af0b \n        }\n      }\n    },\n     signatures :{\n       pgp :  XXX ,\n       bitcoin_key :  XXX \n    }\n  }\n}  Following the creation of the contract, the buyer would submit a bid offer on the contract. Involvement of the notary along with digitial signatures and counter-signatures would proceed as per normal.  Above,  drwasho  is locking in the purchase (in 5 days) of 30 bushels of wheat at a  current  price of 0.02 BTC per bushel (total price: 0.6 BTC). As this is a  bounded futures contract ,  drwasho  places a limit on his exposure to price volatility equal to 0.05 BTC. In other words,  drwasho  is going long on wheat, setting a maximum profit/loss margin of 0.05 BTC. If in 5 days the price for 30 bushels is   0.65 BTC,  drwasho  will withdraw 0.1 BTC from the multisignature escrow (his original 0.05 BTC and the 0.05 BTC from the losing counterparty). If the price is   0.55 BTC,  drwasho  will lose 0.05 BTC from the multisignature escrow address. Remember, the intention of these contracts are to hedge against price volatility, not necessarily trade the full value of the commoditity to be hedged!", 
            "title": "4.4 Financial Securities"
        }, 
        {
            "location": "/04.-Marketplaces/#45-distributed-currency-exchange", 
            "text": "OpenBazaar  allows for the decentralised exchange of types of currencies using the flexible Ricardian contract system. Currency exchanges are not limited trades between crypto-currencies, but can also facilitate exchanges with fiat currencies using reverisble and non-reversible payment systems.   Fundamentally, currency exchanges require a matching of buy and sell orders at a certain price for a given volume. Firstly, buy and sell orders will be created and issued as a Ricardian contract, formatted according to a specialised 'currency' template in  OpenBazaar . Secondly, matching buy and sell orders theoretically will be mediated over  exchange nodes , which may also function as arbiters for each exchange. Alternative, buy and sell orders may be matched over the  OpenBazaar  distributed hash table. Finally, private exchanges can be made between peers, using  OpenBazaar  to merely faciliate the signing/counter-signing of the contract and finding an arbiter for the trade. After matching buy and sell order, the use of Bitcoin multisignature transactions is the key to managing counterparty risk for an exchange between different crypto-currencies, irrespective of whether Bitcoin is the final currency to be exchanged.   Currency contract can be further sub-categorised into:   Crypto-Crypto currency exchanges  Crypto-Fiat currency exchanges  Fiat-Fiat currency exchanges   1. Crypto-Crypto Currency Exchanges  To create a currency Ricardian contract for a crypto-crypto exchange, a  seed contract  is prepared with the following data fields:   Crypto-currency pair (e.g. Litecoin/Bitcoin; LTC/BTC)  Exchange rate for the currency pair (e.g. 0.01637)  Type (i.e buy, sell)  Size (i.e. amount of the currency to buy/sell)  Payment address   For example, Alice desires to purchase 5 litecoin for a price of 0.01637 LTC/BTC (0.08185 BTC total). She draws up the following  seed contract  and broadcasts it on  OpenBazaar :  {\n     OpenBazaar Contract : {\n         OBCv :  0.1 ,\n         Category :  Currency ,\n         Sub-category, :  Crypto-Crypto ,\n         Nonce :  356a192b7913b04c54574d18c28d46e6395427ab ,\n         Expiration : 2014-08-29 12:00:00 \n        },\n     Seller : {\n         NymID :  61768db8d1a38f1c16d3e6eea812ef423c739068 ,\n         NodeID :  abc123 ,\n         BTCuncompressedpubkey : 044448c02963b8f5ba1b8f7019a03b57c80b993313c37b464866efbf61c37098440bcdcc88bedf7f1e9c201e294cf3c064d39e372692a0568c01565b838e06af0b ,\n         publicKey : [\n             xsFNBFODLW8BD/9rmoBRBASaZuNpPBG+Gj7/aJcE7aQ4Sti7lKaERFD7/rHd ,\n             WHm+o+FnyQvxpkOuuU6G4q739tP5ZqHx/bn9rhpAKKa+o7es70jlpenHyge4 ,\n             0QyIU1/9jXzwlMsXkq9XfbOhqtgiBRpeZ83/ZjUsf5/wQXhrGWvG4rnKj5kh ,\n             YNq8PHzqJO21cDcD7LJy6yPuOgrBfb4MMa3+9lauIZ5Ye2kXR4m1OuWrig0M ,\n             7SwgFZwo3GbmcWe5KCK60nHW0AZh47B/yC18s/uR3t2bGrkQwL6AgTiOd2hX ,\n             /K2l1ccgIPnWo1s/5fMc7HiGpPkioOYhWgDm+2bimh56D2Tq7ikZQSDZIhw4 ,\n             2pOQCevN/efak7vc2vaaaKqGreF8EwQ5vahF9bS6aNzXzdG1t6PYVAIupdWz ,\n             Ct0vrZr1ynBaIEEBJlFuI3vEyp+X85BVqV9B7gWbcE6vLeUPUB/Nu4NEdg5V ,\n             4Np+URFQvW9NKfN04kGfuEViVe0sfgSEc86h+eJ3gWTI8NdhJZdRkzKzlB7Q ,\n             FzMfL0TzxKSkOSu47eWx64e4xsyvkAVirkDb5VRzoeOOpJ/5ZOE1Cv8XJWEU ,\n             Zd/WAyp60LT2Ga8mCqhUrPAkcQKsPhccEn23mxIH8Pt3xWfnDFqtma7Tu2fB ,\n             CM4UKpd/dAjTVnZNNjSuBb+4SGBuGiUkA3yvdwARAQABzR1MaW9uZWwgRGVu ,\n             dCA8bGlvbmVsQGRlbnQuY29tPsLBcgQQAQgAJgUCU4Mt1gYLCQgHAwIJEKnO ,\n             FXGYSKNNBBUIAgoDFgIBAhsDAh4BAAAzQQ/9GArtJ4cNqPqM//NJCsQHCy35 ,\n             mKOpErbEkia/U10wlISDYV0S3fJJ+ktE/RSF1ZU+2JMf3Hl4q7hYPsFxPvfa ,\n             yjRL48WBXI/V31zLvZUuH4reut4QLM4e6eAugS3lT+p8jU7mS7audZfUW65/ ,\n             VL3ZXJs8QhW52LqffkhAJLQauXBy0gE7+ndbGRVxrquINt2sTZFLBaDOpLr8 ,\n             4Aiq+UYunRUOmM7lpMnuErTkTe670Pxsu+8Ta8r+bedXhNIbYcMTgoJLOBLX ,\n             IdL3G7ix5y5ebw0eQXTfX6QfW//er9NOi0lWVtplrYFoQ98kS19/uEta4P7r ,\n             kMqZGBpPc7Ztr3zdeNwmbU3oVOv88ecizuvv3rwMDN5juUZ/KP0vQePA7LEd ,\n             pGLdTpBMmwd5t6XArso0pDZl4J6YxVZ5HoIYlw2a648VgF0nli11zzix/YKt ,\n             MSRVOwubuo0YGP/cRJy9qVawNU79wTHtnva86orGuQ5d9H/F7S2+f93u87nG ,\n             5TNnI5ORXWzAHkJ3VU6SDzALs3K9PbzTSu4biSsMFSll2cZjZw2INsH9+gNO ,\n             CWzwS7vROVxuZFQolyuWmBfBwVq5U+S8gmRJELkblR+jXetY5e8T2Cv23Kef ,\n             Bj6LBv1HpiUMD6KX4cASS94tMdLlJqa78Yl7A35froh30Tq3wfm1KSX7SuTO ,\n             wU0EU4Mt2AEQAIQzWvnLqtZP9nhWGcGqRwoZP0RJHmnbCpVmmVaoj2I/36k7 ,\n             PcuYs1xbc9Qt0gBpCQiskIjmCKVEcs+Dfj960qRxzrVfUQ/O09MrI2eMekhY ,\n             nC+jlBNXc22CgH1ESodZDCZf2iA9qjAjd8swLotJ2v0Mw6GLmuLmejo2M3kV ,\n             /jnQJW5ePHd/Wyw45yA1TJv75UhHZ4mo3/MYPBZnSt624JBt/+T4++XaG1kM ,\n             Df5Ku63SEwhkz/nGpyW4BYTa56Pd/zKVxoxW5SfGfgREw8aw09jaApkfz9fy ,\n             GAXcptFWCAvDDfxSCKiMNFBGzuXmgsB3GmEhaOpA9YwCy5TFPWvJ2U+wZ8DN ,\n             M2JMGgwEL+AfHPa9zSH7fXppF95zpJRMpS0oLM3Rk7OxH+jF5xj+tzNJlBEU ,\n             drfIw3J6ZZD0wFSZUx4/5Wqa7nCDl/FnrYPXevZXL6eaSsY5umeTNveLLLz1 ,\n             SYq+GtRqBgON7fOZbKNxw2udAYpufNX4HXvf/Y/FBf1zrUtxf035a+MmAtSj ,\n             Kbf6yUI0BcwNLVBtyMQ6npL0942hH1T37szIL3TT2RZRifSs8u22oZVOxRaE ,\n             yZrRdYrtQpz547rQMJ76a4mplmBGjdMv/ksvicVh1SJ7f+YhtGkUcDWC0CUY ,\n             xnY/jAEL34muSZadG4CAKk7w3jJwryMbE6Y5ABEBAAHCwV8EGAEIABMFAlOD ,\n             Lh8JEKnOFXGYSKNNAhsMAACzog//R4yBYDXurrsyFpPS2ndCwm/F0yxIVMYx ,\n             5n/qWxrt+1Yv8sc9PVSLnTilqoVjJIokq6UkpATcmZOxSthCXYX1BjmQdjnl ,\n             z6YGZHWKYkT2BPOJTHvcchSKnx2vn+DIlVIyJjvo6T4zeUVl99XJwWN7kNJ+ ,\n             NrlcLzqzksNFW8S6pndkBjn5bC/CzZKgh/KHX7L7ibc3jICgI4MZZLjapf+Y ,\n             4mDmzPoSLrQBHMzAAShj3Li6IEdz0C6KrfGWzVcCHHfpOhWY+A0y4ztOKEEW ,\n             UlrlTPPgxuEbbspee5caBb6mVsvADwn2/wJ2LSYUa0jBSXnQy5Az94xbfbJt ,\n             LqEn7uWsJ9HE0kXOLk89BCSguYog86ptmUXG4uDT5S9zlScR5XC3EJOKpvYU ,\n             NchZS1ydMoerb3VLtVY6pQUqRvSu9+HrouHpp2h2+6B83Eh7gTy7BSqc7TIh ,\n             SsfNIt5nJLCLzWiGst9CS6XuuLzf9JAH85m9ZH8AuKfAW2fICX8KyiBicH/s ,\n             eGHqdJ7buEidG3WbA3vvGePma2cXDTfBRcddUwvoLTmCxOMt8IPEwuUq0tnS ,\n             oJaCHMMN+csbgCTLb+CMvVjzGbgI8Z3LlKCe1siBh6iDvad7/pIEZm7T7OOC ,\n             FFN8mcvExvCZU6mpCGRg7JmXuI5gzq+O3A+x2virikGYG7NjK8w= ,\n             =dDLn \n            ]\n        },\n     Currency : {\n         CurrencyPair :  LTC/BTC ,\n         ExchangeRate :  0.01637 ,\n         Type :  Buy ,\n         Size :  5 ,\n         PaymentAddress :  Lbnu1x4UfToiiFGU8MvPrLpj2GSrtUrxFH \n        }\n}  A prospective buyer only needs to submit a  bid offer  by appending the following data to the  seed contract :   Buyer details  Payment address   As with all Ricardian contracts on  OpenBazaar , digital signatures are required at each step.   2. Crypto-Fiat Currency Exchanges  For a crypto-fiat exchange, the  seed contract  will have the following data fields:   Crypto-Fiat currency pair (e.g. Bitcoin/US dollar; BTC/USD)  Exchange rate for the currency pair (e.g. 0.00167)  Type (i.e buy, sell)  Size (i.e. amount of the currency to buy/sell)  Payment address/bank details (this data field can be blinded until funds are transferred to the bitcoin multisignature escrow address)   For example, Alice desires to purchase 5 bitcoin for a price of 0.00167 BTC/USD ($3000 USD total). She creates the following  seed contract  and broadcasts it on  OpenBazaar :  {\n     OpenBazaar Contract : {\n         OBCv :  0.1 ,\n         Category :  Currency ,\n         Sub-category, :  Crypto-Fiat ,\n         Nonce :  356a192b7913b04c54574d18cd8d46e6395427ab ,\n         Expiration : 2014-08-29 12:00:00 \n        },\n     Seller : {\n         NymID :  61768db8d1a38f1c16d3e6eea812ef423c739068 ,\n         NodeID :  abc123 ,\n         BTCuncompressedpubkey : 044448c02963b8f5ba1b8f7019a03b57c80b993313c37b464866efbf61c37098440bcdcc88bedf7f1e9c201e294cf3c064d39e372692a0568c01565b838e06af0b ,\n         publicKey : [\n             xsFNBFODLW8BD/9rmoBRBASaZuNpPBG+Gj7/aJcE7aQ4Sti7lKaERFD7/rHd ,\n             WHm+o+FnyQvxpkOuuU6G4q739tP5ZqHx/bn9rhpAKKa+o7es70jlpenHyge4 ,\n             0QyIU1/9jXzwlMsXkq9XfbOhqtgiBRpeZ83/ZjUsf5/wQXhrGWvG4rnKj5kh ,\n             YNq8PHzqJO21cDcD7LJy6yPuOgrBfb4MMa3+9lauIZ5Ye2kXR4m1OuWrig0M ,\n             7SwgFZwo3GbmcWe5KCK60nHW0AZh47B/yC18s/uR3t2bGrkQwL6AgTiOd2hX ,\n             /K2l1ccgIPnWo1s/5fMc7HiGpPkioOYhWgDm+2bimh56D2Tq7ikZQSDZIhw4 ,\n             2pOQCevN/efak7vc2vaaaKqGreF8EwQ5vahF9bS6aNzXzdG1t6PYVAIupdWz ,\n             Ct0vrZr1ynBaIEEBJlFuI3vEyp+X85BVqV9B7gWbcE6vLeUPUB/Nu4NEdg5V ,\n             4Np+URFQvW9NKfN04kGfuEViVe0sfgSEc86h+eJ3gWTI8NdhJZdRkzKzlB7Q ,\n             FzMfL0TzxKSkOSu47eWx64e4xsyvkAVirkDb5VRzoeOOpJ/5ZOE1Cv8XJWEU ,\n             Zd/WAyp60LT2Ga8mCqhUrPAkcQKsPhccEn23mxIH8Pt3xWfnDFqtma7Tu2fB ,\n             CM4UKpd/dAjTVnZNNjSuBb+4SGBuGiUkA3yvdwARAQABzR1MaW9uZWwgRGVu ,\n             dCA8bGlvbmVsQGRlbnQuY29tPsLBcgQQAQgAJgUCU4Mt1gYLCQgHAwIJEKnO ,\n             FXGYSKNNBBUIAgoDFgIBAhsDAh4BAAAzQQ/9GArtJ4cNqPqM//NJCsQHCy35 ,\n             mKOpErbEkia/U10wlISDYV0S3fJJ+ktE/RSF1ZU+2JMf3Hl4q7hYPsFxPvfa ,\n             yjRL48WBXI/V31zLvZUuH4reut4QLM4e6eAugS3lT+p8jU7mS7audZfUW65/ ,\n             VL3ZXJs8QhW52LqffkhAJLQauXBy0gE7+ndbGRVxrquINt2sTZFLBaDOpLr8 ,\n             4Aiq+UYunRUOmM7lpMnuErTkTe670Pxsu+8Ta8r+bedXhNIbYcMTgoJLOBLX ,\n             IdL3G7ix5y5ebw0eQXTfX6QfW//er9NOi0lWVtplrYFoQ98kS19/uEta4P7r ,\n             kMqZGBpPc7Ztr3zdeNwmbU3oVOv88ecizuvv3rwMDN5juUZ/KP0vQePA7LEd ,\n             pGLdTpBMmwd5t6XArso0pDZl4J6YxVZ5HoIYlw2a648VgF0nli11zzix/YKt ,\n             MSRVOwubuo0YGP/cRJy9qVawNU79wTHtnva86orGuQ5d9H/F7S2+f93u87nG ,\n             5TNnI5ORXWzAHkJ3VU6SDzALs3K9PbzTSu4biSsMFSll2cZjZw2INsH9+gNO ,\n             CWzwS7vROVxuZFQolyuWmBfBwVq5U+S8gmRJELkblR+jXetY5e8T2Cv23Kef ,\n             Bj6LBv1HpiUMD6KX4cASS94tMdLlJqa78Yl7A35froh30Tq3wfm1KSX7SuTO ,\n             wU0EU4Mt2AEQAIQzWvnLqtZP9nhWGcGqRwoZP0RJHmnbCpVmmVaoj2I/36k7 ,\n             PcuYs1xbc9Qt0gBpCQiskIjmCKVEcs+Dfj960qRxzrVfUQ/O09MrI2eMekhY ,\n             nC+jlBNXc22CgH1ESodZDCZf2iA9qjAjd8swLotJ2v0Mw6GLmuLmejo2M3kV ,\n             /jnQJW5ePHd/Wyw45yA1TJv75UhHZ4mo3/MYPBZnSt624JBt/+T4++XaG1kM ,\n             Df5Ku63SEwhkz/nGpyW4BYTa56Pd/zKVxoxW5SfGfgREw8aw09jaApkfz9fy ,\n             GAXcptFWCAvDDfxSCKiMNFBGzuXmgsB3GmEhaOpA9YwCy5TFPWvJ2U+wZ8DN ,\n             M2JMGgwEL+AfHPa9zSH7fXppF95zpJRMpS0oLM3Rk7OxH+jF5xj+tzNJlBEU ,\n             drfIw3J6ZZD0wFSZUx4/5Wqa7nCDl/FnrYPXevZXL6eaSsY5umeTNveLLLz1 ,\n             SYq+GtRqBgON7fOZbKNxw2udAYpufNX4HXvf/Y/FBf1zrUtxf035a+MmAtSj ,\n             Kbf6yUI0BcwNLVBtyMQ6npL0942hH1T37szIL3TT2RZRifSs8u22oZVOxRaE ,\n             yZrRdYrtQpz547rQMJ76a4mplmBGjdMv/ksvicVh1SJ7f+YhtGkUcDWC0CUY ,\n             xnY/jAEL34muSZadG4CAKk7w3jJwryMbE6Y5ABEBAAHCwV8EGAEIABMFAlOD ,\n             Lh8JEKnOFXGYSKNNAhsMAACzog//R4yBYDXurrsyFpPS2ndCwm/F0yxIVMYx ,\n             5n/qWxrt+1Yv8sc9PVSLnTilqoVjJIokq6UkpATcmZOxSthCXYX1BjmQdjnl ,\n             z6YGZHWKYkT2BPOJTHvcchSKnx2vn+DIlVIyJjvo6T4zeUVl99XJwWN7kNJ+ ,\n             NrlcLzqzksNFW8S6pndkBjn5bC/CzZKgh/KHX7L7ibc3jICgI4MZZLjapf+Y ,\n             4mDmzPoSLrQBHMzAAShj3Li6IEdz0C6KrfGWzVcCHHfpOhWY+A0y4ztOKEEW ,\n             UlrlTPPgxuEbbspee5caBb6mVsvADwn2/wJ2LSYUa0jBSXnQy5Az94xbfbJt ,\n             LqEn7uWsJ9HE0kXOLk89BCSguYog86ptmUXG4uDT5S9zlScR5XC3EJOKpvYU ,\n             NchZS1ydMoerb3VLtVY6pQUqRvSu9+HrouHpp2h2+6B83Eh7gTy7BSqc7TIh ,\n             SsfNIt5nJLCLzWiGst9CS6XuuLzf9JAH85m9ZH8AuKfAW2fICX8KyiBicH/s ,\n             eGHqdJ7buEidG3WbA3vvGePma2cXDTfBRcddUwvoLTmCxOMt8IPEwuUq0tnS ,\n             oJaCHMMN+csbgCTLb+CMvVjzGbgI8Z3LlKCe1siBh6iDvad7/pIEZm7T7OOC ,\n             FFN8mcvExvCZU6mpCGRg7JmXuI5gzq+O3A+x2virikGYG7NjK8w= ,\n             =dDLn \n            ]\n        },\n     Currency : {\n         CurrencyPair :  USD/BTC ,\n         ExchangeRate :  0.00167 ,\n         Type :  Buy ,\n         Size :  5 ,\n         PaymentAddress :  1HZwkjkeaoZfTSaJxDw6aKkxp45agDiEzN \n        }\n}  On the other side of the trade, the buyer (Bob) submits a  bid offer  by appending the following data to the  seed contract :   Buyer details  Bank details (blinded)  The bank details can be hashed and included in a single data field  Later the source bank details can be revealed to the buyer and arbiter, who can verify the authenticity of the hash   The contract with the buyer's digital signature is sent back to the seller (Alice), which can be signed and forwarded to the arbiter for creation of the multisignature escrow address. Bob transfers 5 BTC to the multisignature address and reveals his bank details to Alice and the arbiter. Bob then awaits for the fiat funds to arrive in his account before signing a release of the funds from the multisig address to Alice.  Chargeback Risk  If an irreversible payment processor (e.g. OKPay) is used, then the multisignature bitcoin address is a sufficient means of managing the exchange risk as chargebacks are theoretically impossible. However, if Alice in this case did not use such an non-reverisble payment processor, the trade can still occur with the punative measures to appropriately manage the charageback risk:   Probation  The purchased bitcoin funds are kept within the multisignature address until the chargeback risk duration has elapsed. This period will be variable, depending on the bank that is used.  Surety bond  The seller can post a surety bond (refundable security deposit of bitcoin within multisignature address) for the partial or full amount of funds to be exchanged. This allows the seller to access the exchanged bitcoin immediately. While this appears to be a zero-sum game for a single trade, a regular trader may set aside a pool of funds to be re-used as a surety bond after every trade.   3. Fiat-Fiat Currency Exchanges  For a fiat-fiat exchange, the  seed contract  will need the following data fields:   Fiat-fiat currency pair (e.g. Euro/US dollar; EUR/USD)  Exchange rate for the currency pair (e.g. $1.36 EUR/USD)  Type (i.e buy, sell)  Size (i.e. amount of the currency to buy/sell)  Bank details (this data field can be blinded until funds are transferred to the bitcoin multisignature escrow address)   For example, Alice desires to purchase $100 Euro for a price of $1.36 EUR/USD ($136.48 USD total). She creates the following  seed contract  and broadcasts it on  OpenBazaar :  {\n     OpenBazaar Contract : {\n         OBCv :  0.1 ,\n         Category :  Currency ,\n         Sub-category, :  Crypto-Fiat ,\n         Nonce :  356a192b7913b04c54574d18cd8d46e6395427ab ,\n         Expiration : 2014-08-29 12:00:00 \n        },\n     Seller : {\n         NymID :  61768db8d1a38f1c16d3e6eea812ef423c739068 ,\n         NodeID :  abc123 ,\n         BTCuncompressedpubkey : 044448c02963b8f5ba1b8f7019a03b57c80b993313c37b464866efbf61c37098440bcdcc88bedf7f1e9c201e294cf3c064d39e372692a0568c01565b838e06af0b ,\n         publicKey : [\n             xsFNBFODLW8BD/9rmoBRBASaZuNpPBG+Gj7/aJcE7aQ4Sti7lKaERFD7/rHd ,\n             WHm+o+FnyQvxpkOuuU6G4q739tP5ZqHx/bn9rhpAKKa+o7es70jlpenHyge4 ,\n             0QyIU1/9jXzwlMsXkq9XfbOhqtgiBRpeZ83/ZjUsf5/wQXhrGWvG4rnKj5kh ,\n             YNq8PHzqJO21cDcD7LJy6yPuOgrBfb4MMa3+9lauIZ5Ye2kXR4m1OuWrig0M ,\n             7SwgFZwo3GbmcWe5KCK60nHW0AZh47B/yC18s/uR3t2bGrkQwL6AgTiOd2hX ,\n             /K2l1ccgIPnWo1s/5fMc7HiGpPkioOYhWgDm+2bimh56D2Tq7ikZQSDZIhw4 ,\n             2pOQCevN/efak7vc2vaaaKqGreF8EwQ5vahF9bS6aNzXzdG1t6PYVAIupdWz ,\n             Ct0vrZr1ynBaIEEBJlFuI3vEyp+X85BVqV9B7gWbcE6vLeUPUB/Nu4NEdg5V ,\n             4Np+URFQvW9NKfN04kGfuEViVe0sfgSEc86h+eJ3gWTI8NdhJZdRkzKzlB7Q ,\n             FzMfL0TzxKSkOSu47eWx64e4xsyvkAVirkDb5VRzoeOOpJ/5ZOE1Cv8XJWEU ,\n             Zd/WAyp60LT2Ga8mCqhUrPAkcQKsPhccEn23mxIH8Pt3xWfnDFqtma7Tu2fB ,\n             CM4UKpd/dAjTVnZNNjSuBb+4SGBuGiUkA3yvdwARAQABzR1MaW9uZWwgRGVu ,\n             dCA8bGlvbmVsQGRlbnQuY29tPsLBcgQQAQgAJgUCU4Mt1gYLCQgHAwIJEKnO ,\n             FXGYSKNNBBUIAgoDFgIBAhsDAh4BAAAzQQ/9GArtJ4cNqPqM//NJCsQHCy35 ,\n             mKOpErbEkia/U10wlISDYV0S3fJJ+ktE/RSF1ZU+2JMf3Hl4q7hYPsFxPvfa ,\n             yjRL48WBXI/V31zLvZUuH4reut4QLM4e6eAugS3lT+p8jU7mS7audZfUW65/ ,\n             VL3ZXJs8QhW52LqffkhAJLQauXBy0gE7+ndbGRVxrquINt2sTZFLBaDOpLr8 ,\n             4Aiq+UYunRUOmM7lpMnuErTkTe670Pxsu+8Ta8r+bedXhNIbYcMTgoJLOBLX ,\n             IdL3G7ix5y5ebw0eQXTfX6QfW//er9NOi0lWVtplrYFoQ98kS19/uEta4P7r ,\n             kMqZGBpPc7Ztr3zdeNwmbU3oVOv88ecizuvv3rwMDN5juUZ/KP0vQePA7LEd ,\n             pGLdTpBMmwd5t6XArso0pDZl4J6YxVZ5HoIYlw2a648VgF0nli11zzix/YKt ,\n             MSRVOwubuo0YGP/cRJy9qVawNU79wTHtnva86orGuQ5d9H/F7S2+f93u87nG ,\n             5TNnI5ORXWzAHkJ3VU6SDzALs3K9PbzTSu4biSsMFSll2cZjZw2INsH9+gNO ,\n             CWzwS7vROVxuZFQolyuWmBfBwVq5U+S8gmRJELkblR+jXetY5e8T2Cv23Kef ,\n             Bj6LBv1HpiUMD6KX4cASS94tMdLlJqa78Yl7A35froh30Tq3wfm1KSX7SuTO ,\n             wU0EU4Mt2AEQAIQzWvnLqtZP9nhWGcGqRwoZP0RJHmnbCpVmmVaoj2I/36k7 ,\n             PcuYs1xbc9Qt0gBpCQiskIjmCKVEcs+Dfj960qRxzrVfUQ/O09MrI2eMekhY ,\n             nC+jlBNXc22CgH1ESodZDCZf2iA9qjAjd8swLotJ2v0Mw6GLmuLmejo2M3kV ,\n             /jnQJW5ePHd/Wyw45yA1TJv75UhHZ4mo3/MYPBZnSt624JBt/+T4++XaG1kM ,\n             Df5Ku63SEwhkz/nGpyW4BYTa56Pd/zKVxoxW5SfGfgREw8aw09jaApkfz9fy ,\n             GAXcptFWCAvDDfxSCKiMNFBGzuXmgsB3GmEhaOpA9YwCy5TFPWvJ2U+wZ8DN ,\n             M2JMGgwEL+AfHPa9zSH7fXppF95zpJRMpS0oLM3Rk7OxH+jF5xj+tzNJlBEU ,\n             drfIw3J6ZZD0wFSZUx4/5Wqa7nCDl/FnrYPXevZXL6eaSsY5umeTNveLLLz1 ,\n             SYq+GtRqBgON7fOZbKNxw2udAYpufNX4HXvf/Y/FBf1zrUtxf035a+MmAtSj ,\n             Kbf6yUI0BcwNLVBtyMQ6npL0942hH1T37szIL3TT2RZRifSs8u22oZVOxRaE ,\n             yZrRdYrtQpz547rQMJ76a4mplmBGjdMv/ksvicVh1SJ7f+YhtGkUcDWC0CUY ,\n             xnY/jAEL34muSZadG4CAKk7w3jJwryMbE6Y5ABEBAAHCwV8EGAEIABMFAlOD ,\n             Lh8JEKnOFXGYSKNNAhsMAACzog//R4yBYDXurrsyFpPS2ndCwm/F0yxIVMYx ,\n             5n/qWxrt+1Yv8sc9PVSLnTilqoVjJIokq6UkpATcmZOxSthCXYX1BjmQdjnl ,\n             z6YGZHWKYkT2BPOJTHvcchSKnx2vn+DIlVIyJjvo6T4zeUVl99XJwWN7kNJ+ ,\n             NrlcLzqzksNFW8S6pndkBjn5bC/CzZKgh/KHX7L7ibc3jICgI4MZZLjapf+Y ,\n             4mDmzPoSLrQBHMzAAShj3Li6IEdz0C6KrfGWzVcCHHfpOhWY+A0y4ztOKEEW ,\n             UlrlTPPgxuEbbspee5caBb6mVsvADwn2/wJ2LSYUa0jBSXnQy5Az94xbfbJt ,\n             LqEn7uWsJ9HE0kXOLk89BCSguYog86ptmUXG4uDT5S9zlScR5XC3EJOKpvYU ,\n             NchZS1ydMoerb3VLtVY6pQUqRvSu9+HrouHpp2h2+6B83Eh7gTy7BSqc7TIh ,\n             SsfNIt5nJLCLzWiGst9CS6XuuLzf9JAH85m9ZH8AuKfAW2fICX8KyiBicH/s ,\n             eGHqdJ7buEidG3WbA3vvGePma2cXDTfBRcddUwvoLTmCxOMt8IPEwuUq0tnS ,\n             oJaCHMMN+csbgCTLb+CMvVjzGbgI8Z3LlKCe1siBh6iDvad7/pIEZm7T7OOC ,\n             FFN8mcvExvCZU6mpCGRg7JmXuI5gzq+O3A+x2virikGYG7NjK8w= ,\n             =dDLn \n            ]\n        },\n     Currency : {\n         CurrencyPair :  EUR/USD ,\n         ExchangeRate :  $1.36 ,\n         Type :  Buy ,\n         Size :  100 ,\n         BankDetails :  8c2226df637baf568e26c042dc376f5d4a1492e8 \n        }\n}  The buyer, Bob, submits a  bid offer  for the  seed contract  by appending:   Buyer details  Bank details (blinded)   The double-signed contract is sent to the arbiter for the creation of the multisignature escrow address. Both the buyer and seller transfer bitcoin to the address as collateral for their fiat exchange.  As for chargeback risk, it is clearly preferable for both parties to use a non-reversible payment processor. In the absence of this, the bitcoin collateral would not be released until the chargeback risk period as elapsed.   Listing and Matching Buy/Sell Orders on  OpenBazaar  1. DHT Listing  Following the  Bitsquare model , the buy and sell orders are listed in the DHT (for a fee, which I'd like to avoid). The client then matches the buy and sell orders and places both parties in contact with each other over the network. Contracts can be found using the inverse keyword search on  OpenBazaar's  DHT, which is a Kademlia-like P2P network.  2. DarkPool  This model uses a private means of matching buy and sell orders, which I think also encompasses private P2P exchanges between parties that have already discovered each other. In this case, the transfer is fairly straightforward and would proceed as I described under the crypto-crypto section.  3. Exchange Nodes  This introduces the concept of a node or groups of nodes where buyers and sellers submit their orders to (Ricardian contracts as described in the article). The exchange matches the buy and sell orders, and is the arbiter for transactions. It will also have responsibility for broadcasting the price on their exchange. So this takes advantage of the benefits of centralisation, but if the exchange is taken out it doesn't cripple the ability for individuals to make currency exchange.", 
            "title": "4.5 Distributed Currency Exchange"
        }, 
        {
            "location": "/04.-Marketplaces/#46-insurance", 
            "text": "Insurance is a valuable service that is often misinterpreted, over-regulated, and out of reach for many people. On  OpenBazaar , insurance is contextualized as a service that can be offered by anyone or group, leveraging:    The clarity of terms and conditions set out in a Ricardian contract  An open marketplace for competing insurance policies and service providers  The transparency that crypto-currencies provide via the blockchain   Ultimately, the market will decide the most appropriate insurance service and contract models for  OpenBazaar . In this article, we propose some potential implementations as a primer for future development.   1. Insurance Services  Insurance services fundamentally offer:    A pool of funds to offset a cost that exceeds the capacity of the client to pay within a timely manner  A pool of funds to compensate another party that has been wronged by actions of the client, which addresses their capacity to pay within a reasonable time frame  A dispute resolution organization that represents the interests of the client   These services are of course provided through the lens of  risk assessment  to dictate the price of:    The insurance premium (regular cost of the policy)  The excess (fee paid when insurance is triggered).    Traditional business models of insurance mirror a fractional reserve system in that funds are predominantly reinvested on the statistical reality that it is unlikely for all or even most policies to be triggered at once. Whether this model survives the blockchain era is unknown. The transparency that the blockchain provides may alter consumer preferences for how insurance funds are managed;  proof of solvency  may be an inescapable market-imposed regulation. If so, insurance providers will need to prove that the proportion of funds kept in reserve and those reinvested are at the levels that the policy claims. Alternatively,  conservative insurance providers may keep 100% reserves and seek to raise profits only by fees incorporated into the premium and excess.   Whatever business model an insurance provider adopts, the terms and conditions of their policy will be listed within a Ricardian contract in  OpenBazaar , with digital signatures as the unmistakable evidence of agreement.  While the various fields necessary for a comprehensive contract are difficult to predict, the  seed contract  may contain the following core data fields:  {\n     OpenBazaar Contract : {\n         OBCv :  0.1 ,\n         Category :  Insurance ,\n         Sub-category, :  Car-Insurnace ,\n         Nonce :  01 ,\n         Expiration :  2014-06-29 12:00:00 \n    },\n     Seller : {\n         NymID :  Samuel Patterson ,\n         NodeID :  SamPatt ,\n         BTCuncompressedpubkey :  044448c02963b8f5ba1b8f7019a03b57c80b993313c37b464866efbf61c37098440bcdcc88bedf7f1e9c201e294cf3c064d39e372692a0568c01565b838e06af0b ,\n         PGPpublicKey : [\n             mQENBFMKYTUBCADD6kIAjBlJ2Q0NEd97aia0BSBibO1C2lVemWig5cNATeob1McWoEo3QznZ ,\n             f9LaRsuo+ryyqEeXx4p9m9FG/TDeeZvOaiSo2Pg5MtgAdxwJK3ZQ+6b6DjrfYRZplD4qVsQd ,\n             /GhxDr733NBdTpfvE8rYrAttNeU8P9vZpJuU+ESSRNb8Sbgfrym2i7xeMP6/xnyfTunXti7x ,\n             sJzFkGIoF1dc+HntP2b9oSy1y0P5n0FdGt7IaEEtN1AZwAfFJ0obSlXiVdWdPwyambAzj93V ,\n             XD//KxXyxAHjqFD+sdqDzqxBTZ/MC/YCMU1UQ5hvWsx7FRqubLhyMB1p1ycvdnX6nqdTABEB ,\n             AAG0KFNhbSBQYXR0ZXJzb24gPHNhbUBzYW11ZWxycGF0dGVyc29uLmNvbT6JATkEEwECACMF ,\n             AlMKYTUCGwMHCwkIBwMCAQYVCAIJCgsEFgIDAQIeAQIXgAAKCRCI0UoG/7KgjtsoCACaiEO1 ,\n             0u22dGDSuBLvFV2UIhyh2Cj9+KEGe7qHlohwbFHqwT+/6B7P5CmBggqL0abMqEqkUCOxk7g4 ,\n             rBdCSMeqGe+7VdsXVnNAlEYGd6AqQxfcIPV/r/E0qCUQcJbBxjO8rr7il2o4b98AeU8GB6qU ,\n             8YFblsCv0KlFRYhDngHVfRMpvsTm9NMcm99P6n/UVn2mrhk50EqJMHB7T+b4n0fWQj5M9340 ,\n             lmVWnn1i1w3+yDC0v4yLS9UuSuL3UsnC6CP7XPA2z5iVqoTH+i0WguGgGgyUpPIQexGm/IKx ,\n             b5Bb/rRsKpcXtdIT7Vr5US4XtCBe9zWvSWyEAz3llYA/OGx+uQENBFMKYTUBCACToWiWhjWI ,\n             aJM1pD0TXTk/IbNWZPhJpfAiYy3EsYwckvAY1Q6yOSWydakimpr+93oBpJpY9y6Aj8GDBNyv ,\n             eaAomK2jYV0cqxhOzAH2UgSLptFQawxwR/8+rLz5KDZQGT8SNNDwV7FtFT4ubzeH+ILugnJp ,\n             Jo83IjoU5Vg3g1d75Tc38KLd8VbwZ52QcxNaoxoEHQoF8Q+2rRNPwRRr5NX71jQPA6Pxuzpd ,\n             mTogQ5gIA3Zr4cDrxAAPCZAo/bDJF3jhd9lpZXFudlyCwbRNF3qfG9L0S7ES+zIfXFWmryQb ,\n             CUg4pcRfbaN9OY6GWzjOLOzXzEehd7sNbNCKEP3tWqbjABEBAAGJAR8EGAECAAkFAlMKYTUC ,\n             GwwACgkQiNFKBv+yoI4kHQgAiz6mQz0GeOfB60ILe1R/9fkYtejFTTb5P8H/w19S2WM+gFyb ,\n             R4BTg0OSN0YhcmzIzgy1zF1/J+noxEVUS5zbGLytVgLFECyOinFZUc0A/b0nuermvKFuF7GJ ,\n             QcV3Gz1HCNrfaWK7LW5hGTdQZtaFtEmla6Wk+v1MHWWW2K9Ez0KXCqrK5b0Oji2MUh8LRh2p ,\n             mmciki/R0pXXMYMJpeb9IPwOlbIqm8xT4Z93rPYyOwmgii1Dy3Gop/Ofq4yU7GGxjjALR+JM ,\n             yebij7AblNTCSgWXm/QV+ejZH0bR91FbtjdVKoFo6qrL04zuRbBFm2wHv+CYNKwRR2PPcCB/ ,\n             dQaGpQ== ,\n             =IB1U \n        ]\n    },\n     Insurance : {\n         PolicyNonce :  abc123 ,\n         Term :  12 months ,\n         Type :  Car ,\n         PolicyValue :  20 BTC ,\n         Reserve :  20 percent ,\n         Coverage : {\n             Fire :  True ,\n             Water :  True ,\n             Flood :  False ,\n             AccidentalCrash : {\n                 IFCauseClient :  False ,\n                 IFCauseNotClient :  True \n            }\n        },\n         Client : {\n             Payments :  0.1 BTC ,\n             PaymentFreq :  Monthly ,\n             Excess :  0.25 BTC \n        }\n    }\n}  When a client takes out an  insurance contract  with a provider, a multisignature transaction is created in combination with the notary's pubkey. The client's insurance funds are paid to the multisignature transaction according to the payment schedule specified within the  insurance contract . Under the client and/or notary's supervision, the insurance provider cannot extract funds beyond the reserve amount stated in the contract. For large insurance policies, a notary pool can be used for redundancy's sake and to minimize risk for client and insurance provider. Before an  insurance contract  is signed by the client and insurance provider, the latter can provide evidence that they have sufficient funds to payout the full value of the policy (e.g. 20 BTC in the case of the  insurance contract  above).  In the event that the client makes an insurance claim, the client can provide the relevant detail and evidence of the claim to the insurance provider. For a successful claim, the insurer can transfer the required amount directly to the client. If the insurance provider rejects the claim, the client may flag a dispute.  2. Transaction Insurance on  OpenBazaar  It is possible for users to take out insurance for trades made over  OpenBazaar . The purpose of the insurance in this context is to guard against the scenario where a user is subject to a loss of funds and/or goods that  cannot  be recovered. This loss is not necessarily due to fraudulent activity, but also covers the accidental loss of funds/goods in transit (i.e. including acts of God).  For example, Alice sells a cat to Bob on  OpenBazaar :\n1. During transit, the cat escapes and an empty cage is delivered to Bob. Bob refuses to sign a multisignature transaction releasing funds to Alice based on the a perceived violation of the contract. \n2. Alice and Bob flag a dispute and engage an arbiter to weigh up the case in order to determine who should receive the funds. \n3. During the dispute resolution process, Alice provides sufficient evidence that the cat was delivered alive and well to the courier. Likewise, Bob is able to provide evidence that the cage was delivered empty to him by the courier.  If the courier in this example  did not  have a presence on  OpenBazaar  (i.e. outside of its jurisdiction), the arbiter may have no choice but to rule in favor of Bob (according to their arbitration policy). The arbiter instructs the notary (the third signature of the 2-of-3 multisignature escrow address between Alice and Bob) to create and sign a transaction releasing the funds back to Bob.  In this case, Alice was not at fault but ended up suffering the consequences of an uncommon accident, which is an ideal scenario for insurance to cover. If Alice had taken  merchant insurance  for her trade with Bob, she could make a claim to cover the value of the lost good in the failed trade. The insurance provider may launch their own investigation before deciding to award Alice the insurance funds.  If the courier in this example  did  have a presence on  OpenBazaar , Alice's insurance provider may contact the courier directly or the courier's insurance provider. In the latter case, compensation to Alice can be paid out of the courier's insurance policy funds (most likely after arbitration between both insurance providers).", 
            "title": "4.6 Insurance"
        }, 
        {
            "location": "/04.-Marketplaces/#47-crowd-funding", 
            "text": "Article Pending", 
            "title": "4.7 Crowd Funding"
        }, 
        {
            "location": "/04.-Marketplaces/#48-prediction-markets", 
            "text": "Article Pending", 
            "title": "4.8 Prediction Markets"
        }, 
        {
            "location": "/05.-Roadmap/", 
            "text": "5. Roadmap\n\n\n2015", 
            "title": "Roadmap"
        }, 
        {
            "location": "/05.-Roadmap/#5-roadmap", 
            "text": "2015", 
            "title": "5. Roadmap"
        }, 
        {
            "location": "/06.-Developers/", 
            "text": "6. Developers\n\n\n6.1 Web Socket API\n\n\nThe OpenBazaar reference client when running listens on a websocket for messages from the web client.  Future versions may use an encrypted websocket listener. Your running client web socket will be available at: \n\n\nws://127.0.0.1:\nOpenBazaar_Port\n/ws\n\n\n\nEvery message will consist of a unique id for the request and a results key-value in JSON containing the data that was requested. This is an example of a \npeers\n message.\n\n\n{\"id\": 24637, \"result\": {\"peers\": [{\"hostname\": \"xxx.xxx.xxx.xxx\", \"sin\": \"9xHVXXi2Lv7tcchgTPLFDDF2qdaP44bDD3yXvP\", \"nick\": \"Store Name\", \"reachable\": true, \"guid\": \"d5a848a0957838a2707b92cca9741cb71ab432k3\", \"pubkey\": \"044dbc7389598f7d5f133fe11fcec58be344e288ff0acba6bd582131cd2d1a7d7fac59fbe0454257d11e5cb00e1945b02d25679f35ce72af77510f32bb8cdd23433\", \"port\": 12345}], \"type\": \"peers\"}}\n\n\n\nMessages\n\n\nThe following section outlines all of the messages and formats that the websocket API enables.\n\n\n\n\nGUI Messages\n\n\nMarket\n\n\nPeer to Peer Network\n\n\n\n\nGUI Messages\n\n\nThese messages are used for interacting with the GUI.\n\n\nrepublish_notify\n\n\nExample:\n\n\n{\n    \"id\": 843536, \n    \"result\": \n    {\n        \"msg\": \"P2P Data Republished\", \n        \"type\": \"republish_notify\"\n    }\n}\n\n\n\npeers\n\n\nProvides a list of peers and their metadata. Used in the GUI for constructing the sidebar of markets available.\n\n\nExample:\n\n\n    {\n        \"id\": 24637, \n        \"result\": \n        {\n            \"peers\": [\n                        {\"hostname\": \"XXX.XXX.XXX.XXX\", \"sin\": \"\", \"nick\": \"Default\", \"reachable\": true, \"guid\": \"\", \"pubkey\": \"\", \"port\": 12345}, \n                        {\"hostname\": \"XXX.XXX.XXX.XXX\", \"sin\": \"\", \"nick\": \"Notary\", \"reachable\": true, \"guid\": \"\", \"pubkey\": \"\", \"port\": 56023}\n                     ],\n            \"type\": \"peers\"\n        }\n    }\n\n\n\nMarket\n\n\nThese requests are used to manage your account/market on the network.\n\n\ncreate_contract\n\n\n{\n  \"id\": 42,\n  \"command\": \"create_contract\",\n  \"params\": {\n    \"Contract_Metadata\": {\n      \"OBCv\": \"0.4\",\n      \"category\": \"physical_goods\",\n      \"subcategory\": \"fixed_price\",\n      \"contract_nonce\": \"01\",\n      \"expiration\": \"2014-01-01 00:00:00\"\n    },\n    \"Seller\": {\n      \"seller_GUID\": \"\",\n      \"seller_BTC_uncompressed_pubkey\": \"\",\n      \"seller_PGP\": \"\"\n    },\n    \"Contract\": {\n      \"item_title\": \"asfd\",\n      \"item_keywords\": [\n\n      ],\n      \"currency\": \"XBT\",\n      \"item_price\": 0.5,\n      \"item_condition\": \"New\",\n      \"item_quantity\": 1,\n      \"item_desc\": \"asfddasf\",\n      \"item_images\": {\n\n      },\n      \"item_remote_images\": [\n\n      ],\n      \"item_delivery\": {\n        \"countries\": \"\",\n        \"region\": \"\",\n        \"est_delivery\": \"\",\n        \"shipping_price\": 0\n      }\n    }\n  }\n}\n\n\n\ncheck_order_count\n\n\nRequest:\n\n\n{\n    \"id\":42,\n    \"command\":\"check_order_count\",\n    \"params\":{}\n}\n\n\n\nResponse:\n\n\n{\n    \"id\": 28796,\n    \"result\": \n    {\n        \"count\": 1, \n        \"type\": \"order_count\"\n    }\n}\n\n\n\nupdate_settings\n\n\nRequest:\n\n\n{\n  \"id\": 42,\n  \"command\": \"update_settings\",\n  \"params\": {\n    \"type\": \"update_settings\",\n    \"settings\": {\n      \"countryCode\": \"\",\n      \"stateRegion\": \"\",\n      \"guid\": \"67e53acbd794f702768bb6beca33322120e8d353\",\n      \"id\": 1,\n      \"privkey\": \"\",\n      \"city\": \"\",\n      \"notaries\": [\n        {\n          \"nickname\": \"Default\",\n          \"guid\": \"7a9112bc8f7f7558d75d31420d8a36a5e5ec965b\",\n          \"$$hashKey\": \"00G\"\n        }\n      ],\n      \"zip\": \"\",\n      \"market_id\": 1,\n      \"arbiterDescription\": \"\",\n      \"secret\": \"\",\n      \"street1\": \"\",\n      \"pubkey\": \"\",\n      \"sin\": \"Tf71nA7HPeCuiMTxLmSfhGdi2bQWvQqEg8a\",\n      \"storeDescription\": \"\",\n      \"obelisk\": \"obelisk-baltic.airbitz.co:9091\",\n      \"namecoin_id\": \"\",\n      \"street2\": \"\",\n      \"welcome\": \"enable\",\n      \"recipient_name\": \"\",\n      \"arbiter\": \"\",\n      \"notary\": \"True\",\n      \"bitmessage\": \"\",\n      \"PGPPubKey\": \"\",\n      \"bcAddress\": \"\",\n      \"country\": \"\",\n      \"bip32_seed\": \"\",\n      \"PGPPubkeyFingerprint\": \"\",\n      \"email\": \"\",\n      \"nickname\": \"Default\",\n      \"trustedArbiters\": [\n\n      ],\n      \"stateProvinceRegion\": \"\",\n      \"burnAmount\": 0,\n      \"burnAddr\": \"1AUMCv6Vo6bUJCHWjayECuyUVLent5apRm\"\n    }\n  }\n}\n\n\n\nget_notaries\n\n\nRetrieve all of the trusted notaries for your marketplace.\n\n\nRequest:\n\n\n{\n    \"id\":42,\n    \"command\":\"get_notaries\",\n    \"params\":{}\n}\n\n\n\nResponse:\n\n\n{\n    \"id\": 937628, \n    \"result\": \n    {\n        \"notaries\": [\n            {\"nickname\": \"Default\", \"guid\": \"7a9112bc8f7f7558d75d31420d8a36a5e5ec965b\", \"$$hashKey\": \"00G\"}\n        ], \n        \"type\": \"settings_notaries\"\n    }\n}\n\n\n\nPeer to Peer Network\n\n\nThese requests are sent to the peer to peer network.\n\n\nhello\n\n\nHello messages are one-way notices of presence from one node to another.\n\n\nRequest:\n\n\n{\n  \"id\": 66273,\n  \"result\": {\n    \"senderNick\": \"Default\",\n    \"senderNamecoin\": \"\",\n    \"type\": \"hello\",\n    \"hostname\": \"127.0.0.1\",\n    \"nat_type\": \"Restric NAT\",\n    \"senderGUID\": \"\",\n    \"v\": \"0.3.1\",\n    \"pubkey\": \"\",\n    \"port\": 12346\n  }\n}\n\n\n\nquery_page\n\n\nQueries information about a specific store by looking against it's GUID.\n\n\nRequest:\n\n\n{\n    \"id\":42,\n    \"command\":\"query_page\",\n    \"params\": {\n                  \"type\":\"query_store_listings\",\n                  \"findGUID\":\"d5a848a0957838a2707b92cca9741cb71ab4a754\"\n              }\n}\n\n\n\nResponse:\n\n\n{\n    \"id\": 269057, \n    \"result\": \n    {\n        \"senderGUID\": \"31fa9f7e807aaa2740a7803f7ba48d15f5c5a396\", \n        \"senderNick\": \"Default\", \n        \"bitmessage\": \"\", \n        \"senderNamecoin\": \"\", \n        \"text\": \"\", \n        \"uri\": \"tcp://127.0.0.1:12345\", \n        \"arbiter_description\": \"\", \n        \"email\": \"\", \n        \"nickname\": \"Default\", \n        \"arbiter\": \"\", \n        \"v\": \"0.3.1\", \n        \"notary\": \"\", \n        \"guid\": \"67e53acbd794f702768bb6beca33322120e8d353\", \n        \"type\": \"page\", \n        \"sin\": \"Tf26hJBmGci2o7rUwKqamiaNLNA6wL1SJSE\", \n        \"PGPPubKey\": \"\", \n        \"pubkey\": \"\"\n    }\n}\n\n\n\nquery_store_products\n\n\nRequesting product listings from another market will return asynchronously all of the contracts it is offering as store_contract messages. It is your responsibility to deal with them as they are received.\n\n\nRequest:\n\n\n{\n    \"id\":42,\n    \"command\":\"query_store_products\",\n    \"params\":\n    {\n        \"type\":\"query_store_products\",\n        \"key\":\"31fa9f7e807aaa2740a7803f7ba48d15f5c5a396\"\n    }\n}\n\n\n\nResponse:\n\n\n{\n  \"id\": 532405,\n  \"result\": {\n    \"type\": \"store_contract\",\n    \"contract\": {\n      \"senderNick\": \"Default\",\n      \"senderNamecoin\": \"\",\n      \"deleted\": 0,\n      \"type\": \"listing_result\",\n      \"senderGUID\": \"31fa9f7e807aaa2740a7803f7ba48d15f5c5a396\",\n      \"unit_price\": 0.5,\n      \"item_remote_images\": [\n        \"http:\\/\\/i00.i.aliimg.com\\/wsphoto\\/v0\\/1991723914_1\\/Free-Shipping-Hot-Sale-Wholesale-Novelty-Items-Funny-Punch-Guns-Kid-s-Favourite-Jokes-for-Fun.jpg\"\n      ],\n      \"item_quantity_available\": 1,\n      \"item_title\": \"Novelty Gun\",\n      \"item_desc\": \"Toy gun.\",\n      \"signed_contract_body\": \"\",\n      \"item_images\": {\n\n      },\n      \"key\": \"8def8106bfed395ba39eb626b316edd879349fe5\",\n      \"v\": \"0.3.1\",\n      \"contract_body\": **\nRICARDIAN CONTRACT OBJECT\n**,\n      \"item_condition\": \"New\",\n      \"guid\": \"67e53acbd794f702768bb6beca33322120e8d353\",\n      \"pubkey\": \"\",\n      \"id\": 379843,\n      \"shipping_price\": 0\n    }\n  }\n}\n\n\n\nfindNode\n\n\nThis call is used to find specific keys but can also be used to bootstrap your view of the network by passing your own GUID. If a node does not have a value for the DHT key you are searching for they should return a list of closest nodes to that key that they know about.\n\n\nRequest:\n\n\n{\n    \"id\": 111970,\n    \"result\":\n    {\n        \"findID\": \"63307178a21db3ff7e4a2e8d6672e0a0dc52cddc\",\n        \"senderNamecoin\": \"\",\n        \"type\": \"findNode\",\n        \"hostname\": \"XXX.XXX.XXX.XXX\",\n        \"nat_type\": \"Restric NAT\",\n        \"findValue\": false,\n        \"senderGUID\": \"a9eb74d66581816f7e4b55ea26ef2b66a57bbf3c\",\n        \"key\": \"fdf629eedacc5537e749f542241413f15ed7ad94\",\n        \"v\": \"0.3.1\",\n        \"senderNick\": \"Notary\",\n        \"guid\": \"2743a65cd38e43c3aab2957ec5a50514a2ef9322\",\n        \"pubkey\": \"04422453d12042ec7484c0147bd6deef03575234d62389676ed824583e2e024ae210ad263543841ad47e73b3f08a666eb0655d5efd1cc6dcb728ce76af8173381a\",\n         \"port\": 56023\n    }\n}\n\n\n\nResponse (value not found):\n\n\n{\n  \"id\": 868758,\n  \"result\": {\n    \"senderNick\": \"Default\",\n    \"senderNamecoin\": \"\",\n    \"foundNodes\": [\n\n    ],\n    \"hostname\": \"127.0.0.1\",\n    \"senderGUID\": \"31fa9f7e807aaa2740a7803f7ba48d15f5c5a396\",\n    \"v\": \"0.3.1\",\n    \"findID\": \"a9572416269500d2adadb44ba36b9fdea6e13d9d\",\n    \"guid\": \"67e53acbd794f702768bb6beca33322120e8d353\",\n    \"type\": \"findNodeResponse\",\n    \"port\": 12345,\n    \"pubkey\": \"\"\n  }\n}", 
            "title": "Developers"
        }, 
        {
            "location": "/06.-Developers/#6-developers", 
            "text": "", 
            "title": "6. Developers"
        }, 
        {
            "location": "/06.-Developers/#61-web-socket-api", 
            "text": "The OpenBazaar reference client when running listens on a websocket for messages from the web client.  Future versions may use an encrypted websocket listener. Your running client web socket will be available at:   ws://127.0.0.1: OpenBazaar_Port /ws  Every message will consist of a unique id for the request and a results key-value in JSON containing the data that was requested. This is an example of a  peers  message.  {\"id\": 24637, \"result\": {\"peers\": [{\"hostname\": \"xxx.xxx.xxx.xxx\", \"sin\": \"9xHVXXi2Lv7tcchgTPLFDDF2qdaP44bDD3yXvP\", \"nick\": \"Store Name\", \"reachable\": true, \"guid\": \"d5a848a0957838a2707b92cca9741cb71ab432k3\", \"pubkey\": \"044dbc7389598f7d5f133fe11fcec58be344e288ff0acba6bd582131cd2d1a7d7fac59fbe0454257d11e5cb00e1945b02d25679f35ce72af77510f32bb8cdd23433\", \"port\": 12345}], \"type\": \"peers\"}}  Messages  The following section outlines all of the messages and formats that the websocket API enables.   GUI Messages  Market  Peer to Peer Network   GUI Messages  These messages are used for interacting with the GUI.  republish_notify  Example:  {\n    \"id\": 843536, \n    \"result\": \n    {\n        \"msg\": \"P2P Data Republished\", \n        \"type\": \"republish_notify\"\n    }\n}  peers  Provides a list of peers and their metadata. Used in the GUI for constructing the sidebar of markets available.  Example:      {\n        \"id\": 24637, \n        \"result\": \n        {\n            \"peers\": [\n                        {\"hostname\": \"XXX.XXX.XXX.XXX\", \"sin\": \"\", \"nick\": \"Default\", \"reachable\": true, \"guid\": \"\", \"pubkey\": \"\", \"port\": 12345}, \n                        {\"hostname\": \"XXX.XXX.XXX.XXX\", \"sin\": \"\", \"nick\": \"Notary\", \"reachable\": true, \"guid\": \"\", \"pubkey\": \"\", \"port\": 56023}\n                     ],\n            \"type\": \"peers\"\n        }\n    }  Market  These requests are used to manage your account/market on the network.  create_contract  {\n  \"id\": 42,\n  \"command\": \"create_contract\",\n  \"params\": {\n    \"Contract_Metadata\": {\n      \"OBCv\": \"0.4\",\n      \"category\": \"physical_goods\",\n      \"subcategory\": \"fixed_price\",\n      \"contract_nonce\": \"01\",\n      \"expiration\": \"2014-01-01 00:00:00\"\n    },\n    \"Seller\": {\n      \"seller_GUID\": \"\",\n      \"seller_BTC_uncompressed_pubkey\": \"\",\n      \"seller_PGP\": \"\"\n    },\n    \"Contract\": {\n      \"item_title\": \"asfd\",\n      \"item_keywords\": [\n\n      ],\n      \"currency\": \"XBT\",\n      \"item_price\": 0.5,\n      \"item_condition\": \"New\",\n      \"item_quantity\": 1,\n      \"item_desc\": \"asfddasf\",\n      \"item_images\": {\n\n      },\n      \"item_remote_images\": [\n\n      ],\n      \"item_delivery\": {\n        \"countries\": \"\",\n        \"region\": \"\",\n        \"est_delivery\": \"\",\n        \"shipping_price\": 0\n      }\n    }\n  }\n}  check_order_count  Request:  {\n    \"id\":42,\n    \"command\":\"check_order_count\",\n    \"params\":{}\n}  Response:  {\n    \"id\": 28796,\n    \"result\": \n    {\n        \"count\": 1, \n        \"type\": \"order_count\"\n    }\n}  update_settings  Request:  {\n  \"id\": 42,\n  \"command\": \"update_settings\",\n  \"params\": {\n    \"type\": \"update_settings\",\n    \"settings\": {\n      \"countryCode\": \"\",\n      \"stateRegion\": \"\",\n      \"guid\": \"67e53acbd794f702768bb6beca33322120e8d353\",\n      \"id\": 1,\n      \"privkey\": \"\",\n      \"city\": \"\",\n      \"notaries\": [\n        {\n          \"nickname\": \"Default\",\n          \"guid\": \"7a9112bc8f7f7558d75d31420d8a36a5e5ec965b\",\n          \"$$hashKey\": \"00G\"\n        }\n      ],\n      \"zip\": \"\",\n      \"market_id\": 1,\n      \"arbiterDescription\": \"\",\n      \"secret\": \"\",\n      \"street1\": \"\",\n      \"pubkey\": \"\",\n      \"sin\": \"Tf71nA7HPeCuiMTxLmSfhGdi2bQWvQqEg8a\",\n      \"storeDescription\": \"\",\n      \"obelisk\": \"obelisk-baltic.airbitz.co:9091\",\n      \"namecoin_id\": \"\",\n      \"street2\": \"\",\n      \"welcome\": \"enable\",\n      \"recipient_name\": \"\",\n      \"arbiter\": \"\",\n      \"notary\": \"True\",\n      \"bitmessage\": \"\",\n      \"PGPPubKey\": \"\",\n      \"bcAddress\": \"\",\n      \"country\": \"\",\n      \"bip32_seed\": \"\",\n      \"PGPPubkeyFingerprint\": \"\",\n      \"email\": \"\",\n      \"nickname\": \"Default\",\n      \"trustedArbiters\": [\n\n      ],\n      \"stateProvinceRegion\": \"\",\n      \"burnAmount\": 0,\n      \"burnAddr\": \"1AUMCv6Vo6bUJCHWjayECuyUVLent5apRm\"\n    }\n  }\n}  get_notaries  Retrieve all of the trusted notaries for your marketplace.  Request:  {\n    \"id\":42,\n    \"command\":\"get_notaries\",\n    \"params\":{}\n}  Response:  {\n    \"id\": 937628, \n    \"result\": \n    {\n        \"notaries\": [\n            {\"nickname\": \"Default\", \"guid\": \"7a9112bc8f7f7558d75d31420d8a36a5e5ec965b\", \"$$hashKey\": \"00G\"}\n        ], \n        \"type\": \"settings_notaries\"\n    }\n}  Peer to Peer Network  These requests are sent to the peer to peer network.  hello  Hello messages are one-way notices of presence from one node to another.  Request:  {\n  \"id\": 66273,\n  \"result\": {\n    \"senderNick\": \"Default\",\n    \"senderNamecoin\": \"\",\n    \"type\": \"hello\",\n    \"hostname\": \"127.0.0.1\",\n    \"nat_type\": \"Restric NAT\",\n    \"senderGUID\": \"\",\n    \"v\": \"0.3.1\",\n    \"pubkey\": \"\",\n    \"port\": 12346\n  }\n}  query_page  Queries information about a specific store by looking against it's GUID.  Request:  {\n    \"id\":42,\n    \"command\":\"query_page\",\n    \"params\": {\n                  \"type\":\"query_store_listings\",\n                  \"findGUID\":\"d5a848a0957838a2707b92cca9741cb71ab4a754\"\n              }\n}  Response:  {\n    \"id\": 269057, \n    \"result\": \n    {\n        \"senderGUID\": \"31fa9f7e807aaa2740a7803f7ba48d15f5c5a396\", \n        \"senderNick\": \"Default\", \n        \"bitmessage\": \"\", \n        \"senderNamecoin\": \"\", \n        \"text\": \"\", \n        \"uri\": \"tcp://127.0.0.1:12345\", \n        \"arbiter_description\": \"\", \n        \"email\": \"\", \n        \"nickname\": \"Default\", \n        \"arbiter\": \"\", \n        \"v\": \"0.3.1\", \n        \"notary\": \"\", \n        \"guid\": \"67e53acbd794f702768bb6beca33322120e8d353\", \n        \"type\": \"page\", \n        \"sin\": \"Tf26hJBmGci2o7rUwKqamiaNLNA6wL1SJSE\", \n        \"PGPPubKey\": \"\", \n        \"pubkey\": \"\"\n    }\n}  query_store_products  Requesting product listings from another market will return asynchronously all of the contracts it is offering as store_contract messages. It is your responsibility to deal with them as they are received.  Request:  {\n    \"id\":42,\n    \"command\":\"query_store_products\",\n    \"params\":\n    {\n        \"type\":\"query_store_products\",\n        \"key\":\"31fa9f7e807aaa2740a7803f7ba48d15f5c5a396\"\n    }\n}  Response:  {\n  \"id\": 532405,\n  \"result\": {\n    \"type\": \"store_contract\",\n    \"contract\": {\n      \"senderNick\": \"Default\",\n      \"senderNamecoin\": \"\",\n      \"deleted\": 0,\n      \"type\": \"listing_result\",\n      \"senderGUID\": \"31fa9f7e807aaa2740a7803f7ba48d15f5c5a396\",\n      \"unit_price\": 0.5,\n      \"item_remote_images\": [\n        \"http:\\/\\/i00.i.aliimg.com\\/wsphoto\\/v0\\/1991723914_1\\/Free-Shipping-Hot-Sale-Wholesale-Novelty-Items-Funny-Punch-Guns-Kid-s-Favourite-Jokes-for-Fun.jpg\"\n      ],\n      \"item_quantity_available\": 1,\n      \"item_title\": \"Novelty Gun\",\n      \"item_desc\": \"Toy gun.\",\n      \"signed_contract_body\": \"\",\n      \"item_images\": {\n\n      },\n      \"key\": \"8def8106bfed395ba39eb626b316edd879349fe5\",\n      \"v\": \"0.3.1\",\n      \"contract_body\": ** RICARDIAN CONTRACT OBJECT **,\n      \"item_condition\": \"New\",\n      \"guid\": \"67e53acbd794f702768bb6beca33322120e8d353\",\n      \"pubkey\": \"\",\n      \"id\": 379843,\n      \"shipping_price\": 0\n    }\n  }\n}  findNode  This call is used to find specific keys but can also be used to bootstrap your view of the network by passing your own GUID. If a node does not have a value for the DHT key you are searching for they should return a list of closest nodes to that key that they know about.  Request:  {\n    \"id\": 111970,\n    \"result\":\n    {\n        \"findID\": \"63307178a21db3ff7e4a2e8d6672e0a0dc52cddc\",\n        \"senderNamecoin\": \"\",\n        \"type\": \"findNode\",\n        \"hostname\": \"XXX.XXX.XXX.XXX\",\n        \"nat_type\": \"Restric NAT\",\n        \"findValue\": false,\n        \"senderGUID\": \"a9eb74d66581816f7e4b55ea26ef2b66a57bbf3c\",\n        \"key\": \"fdf629eedacc5537e749f542241413f15ed7ad94\",\n        \"v\": \"0.3.1\",\n        \"senderNick\": \"Notary\",\n        \"guid\": \"2743a65cd38e43c3aab2957ec5a50514a2ef9322\",\n        \"pubkey\": \"04422453d12042ec7484c0147bd6deef03575234d62389676ed824583e2e024ae210ad263543841ad47e73b3f08a666eb0655d5efd1cc6dcb728ce76af8173381a\",\n         \"port\": 56023\n    }\n}  Response (value not found):  {\n  \"id\": 868758,\n  \"result\": {\n    \"senderNick\": \"Default\",\n    \"senderNamecoin\": \"\",\n    \"foundNodes\": [\n\n    ],\n    \"hostname\": \"127.0.0.1\",\n    \"senderGUID\": \"31fa9f7e807aaa2740a7803f7ba48d15f5c5a396\",\n    \"v\": \"0.3.1\",\n    \"findID\": \"a9572416269500d2adadb44ba36b9fdea6e13d9d\",\n    \"guid\": \"67e53acbd794f702768bb6beca33322120e8d353\",\n    \"type\": \"findNodeResponse\",\n    \"port\": 12345,\n    \"pubkey\": \"\"\n  }\n}", 
            "title": "6.1 Web Socket API"
        }, 
        {
            "location": "/07.-Articles/", 
            "text": "7. Articles\n\n\nIndex:\n\n\n\n\nOpenBazaar Threat Model\n\n\nOpenBazaar and Subspace\n\n\nThe Onion Shipping Protocol\n\n\n\n\n7.1 OpenBazaar Threat Model\n\n\nThis article outlines the security model and policies of OpenBazaar. It is written for contributors with push access who are asked to review and merge pull requests, external developers who are interested in submitting pull requests, and end-users who are interested in understanding the security model of OpenBazaar. We will also be including this threat model in our project documentation, but we are sharing on our blog first to solicit feedback from our users and security experts in the field.\n\n\nEvery contributor with push access must read this document.\n\n\nThreat model\n\n\nOpenBazaar makes important assumptions about the strength of its adversaries. To understand how to properly develop code for OpenBazaar, it is crucial to understand who the adversaries of OpenBazaar can be, what resources they are able to employ, and what their goals are. Furthermore, it is important to understand what the adversaries are not capable of.\n\n\nAssumed adversaries\n\n\nOur adversaries can be broadly categorized as 4 different entities:\n\n\n\n\nMalicious users\n\n\nMalicious corporations\n\n\nMalicious governments\n\n\nMalicious developers\n\n\n\n\nEach of these constitutes a separate entity with different resources and different goals. These are explained below.\n\n\nMalicious users\n\n\nA malicious user is a user who tries to break the security of OpenBazaar, usually for financial gain. We treat malicious users as game-theoretic agents who are able to invest approximately as much as they would win out of a security breach, as long as their winnings are significantly larger than their losses.\n\n\nThe goal of malicious users is to make money. The two primary ways of making money by breaking the security of OpenBazaar are these:\n\n\n\n\nBeing able to receive a product without making a proper payment\n\n\nBeing able to receive money without delivering a product\n\n\n\n\nAs these attacks are financially incentivized, there is no limit as to what capital can be invested in such attacks if it\u2019s possible to earn it back. However, for our purposes, we assume that such attackers are limited to up-front investments of $1,000,000 per year collectively. Thus, they are not able to, for example, break the bitcoin network security, or attack 1024-bit RSA keys.\n\n\nThese attackers are the easiest to model, as they play within the closed OpenBazaar system and can be treated game-theoretically. Generally, in our games, these agents can be assumed to be \u03b5-good, meaning they will not attempt a malicious strategy if there is no financial gain in it. We aim to fully protect users from such malicious actors.\n\n\nMalicious corporations\n\n\nCertain corporations may find the OpenBazaar network undesirable and may want to break its security in order to bring it down. Their financial incentive may not be part of the closed OpenBazaar system: They may be able to make profits outside of OpenBazaar by making OpenBazaar unreliable and insecure.\n\n\nThe goals of such agents are the following:\n\n\n\n\nBringing down the majority of OpenBazaar nodes\n\n\nDisrupting the majority of connectivity of the OpenBazaar network\n\n\nBreaking the trust people have on the OpenBazaar network\n\n\n\n\n\u201cBreaking the trust\u201d here means creating arbitrary buyers and sellers that do not follow the expected strategy and default on their payments or shipping.\n\n\nThe incentive for such corporations may be that they are losing money because of competitive sales on the OpenBazaar network.\n\n\nWe currently assume that such corporations are able to spend similar monetary amounts as malicious users to attack the network.\n\n\nHowever, malicious corporations cannot be modeled as \u03b5-good, as they wish to cause harm on the network through external incentives. We aim to partially protect our users from such malicious actors, through reputation systems and positive margins in our nash equilibria that can decentivize such malicious actors. Reputation systems which require proof-of-burn or similar sybil-resistant schemes help in making these attacks more costly. Webs-of-trust can fully protect careful users from such malicious actors, although great care is required from the user side.\n\n\nMalicious governments\n\n\nAs the OpenBazaar software can be operated worldwide, malicious governments should be taken into account. Malicious governments may wish to bring the network down for censorship reasons or for legal reasons.\n\n\nThe goals of such agents are similar to the goals of malicious corporations. In addition, a malicious government has the following goals:\n\n\n\n\nUnmask the anonymity of an OpenBazaar user\n\n\nBlock certain categories of products or individual products from being traded\n\n\n\n\nA malicious government has similar resources as a malicious corporation.\n\n\nMalicious governments can be categorized into active and passive based on their willingness to interfere with networks. A passive government is unwilling to manipulate data as a man-in-the-middle at the network level, and is only willing to be a passive eavesdropper. An active government is happy to interfere with network traffic by manipulating it.\n\n\nA passive government has access to these additional resources:\n\n\n\n\nThey can manipulate the legal framework of their country\n\n\nThey can introduce new laws\n\n\nThey can issue arbitrary subpoenas and warrants\n\n\nThey can issue secret warrants and take decisions in secret courts\n\n\n\n\nAn active government has, in addition, access to the following resources:\n\n\n\n\nThey can sybil-attack the issue of identification documents such as passports\n\n\nThey can man-in-the-middle Internet connections within their country (up to the Tor security assumptions)\n\n\nThey can break Internet connectivity within their country\n\n\nThey can issue arbitrary PKI certificates for HTTPS and TLS protocols\n\n\n\n\nMalicious governments are the hardest attack to guard against. While our goal is to be able to defend against malicious governments, we are not able to do this currently. Our decentralization efforts are oriented around the idea that basic protection from malicious governments should be possible.\n\n\nWe aim to provide full protection against a passive malicious government, and partial protection against active malicious governments.\n\n\nOn the topic of denial-of-service attacks by breaking network connectivity completely, we do not have a mechanism of defence. We rely on the fact that countries will prefer to keep Internet connectivity for the most part of their users. Mesh networks can be used to guard against such attacks, but these are beyond the scope of our threat model.\n\n\nMalicious developers\n\n\nThe last malicious actor is a malicious developer with commit access. These developers are manipulated by one of the above actors through law (secret subpoenas) or bribery in order to achieve their end-goals. Therefore, the goals of a malicious developer are aligned with the goals of those above.\n\n\nWe prefer to list this malicious actor separately, as they have access to a different arsenal of attacks.\n\n\nIn particular, a malicious developer has access to the following resources:\n\n\n\n\nThey can merge arbitrary pull requests, in effect writing arbitrary code\n\n\n\n\nOur primary means of defence against malicious developers are secure development practices, some of which we explain later in this document.\n\n\nSecurity assumptions\n\n\nWe rely on the assumption that certain systems are secure. We make the assumption that the following constituent parts of our system are secure:\n\n\n\n\nRSA, ECDSA, SHA256, AES and the rest of the cryptographic primitives used by the software\n\n\nGPG\n\n\nBitcoin\n\n\nNamecoin\n\n\nTor (including its assumptions on network monitoring)\n\n\nThe browser used by the user\n\n\nThe user\u2019s computer\n\n\nOur implementation languages and frameworks (Python, Javascript, Angular)\n\n\nThe libraries we rely on which are listed here: https://github.com/OpenBazaar/OpenBazaar/blob/master/requirements.txt\n\n\n\n\nBeta status\n\n\nOpenBazaar is currently in beta and is \nfacing multiple security issues\n, in addition to the assumptions above. These issues can cause your transactions to be compromised, your money not to go through or be stolen, or your products not to be delivered, even by attackers with very limited resources. We estimate that an attacker could possibly compromise the system\u2019s security for less than a few thousand dollars. Please be careful when using OpenBazaar at this stage. If you\u2019re using the regular bitcoin network, \nkeep the amounts exchanged low\n (less than a few hundred dollars). Don\u2019t sell your car on OpenBazaar yet!\n\n\nFor the beta version, we rely on the security of HTTPS and PKI. This is needed, as we rely on pip for securely fetching python packages, which relies on HTTPS. Therefore, an active malicious government is able to interfere with OpenBazaar. The specific assumptions are listed below.\n\n\nHowever, we are interested in dropping this requirement for stable versions. We are still unsure of the distribution channels to achieve this.\n\n\nAs part of our beta status, \nwe also rely on a few centralized pieces of infrastructure\n, all of which we would like to replace with decentralized systems. These are our assumptions for the beta version:\n\n\n\n\nPKI is secure. CAs are not compromised or government-controlled.\n\n\nHTTPS is secure.\n\n\nThe operators of seed servers are not interested in performing denial-of-service attacks.\n\n\nObelisk and the official obelisk servers are secure and their owners not malicious.\n\n\nThe official DNSChain servers are secure and their owners not malicious.\n\n\n\n\nThe last two requirements are strong. A user who is concerned with these last points can lift these requirements by running their own Obelisk server or using a trusted Obelisk server, which requires maintaining a bitcoin blockchain copy, and their own DNSChain server, which requires maintaining a namecoin blockchain copy. We have plans to use SVP systems as a replacement for these.\n\n\nWe may introduce additional points of centralization for future beta versions in order to create a working product, which we plan to lift later.\n\n\nAs part of our Beta status, we do not currently employ any anonymity-preserving mechanisms. All transactions are completely trackable. Therefore, malicious governments with the goal of uncovering your identity will succeed trivially.\n\n\nDevelopment infrastructure\n\n\nWe also rely on certain pieces of centralized infrastructure for development. Here are our assumptions about services we use for development and we assume are secure and with no malicious operators:\n\n\n\n\nGitHub\n\n\nSlack\n\n\nGmail\n\n\n\n\nWe also rely on OTR and GPG for secure development-related communications.\n\n\nDevelopment process\n\n\nIn order to guard against actors such as malicious developers, we are publishing all of the source code of OpenBazaar as open source under the \nMIT license\n. We encourage security experts to audit our code for security vulnerabilities. Don\u2019t take our word on the security of OpenBazaar; inspect the code yourself. \nDon\u2019t trust the OpenBazaar developers\n. While we\u2019re doing our best to provide secure software, the reason it\u2019s open source is so that it can be reviewed and audited.\n\n\nOur development process is transparent and security-oriented. We follow certain contributing guidelines which require code reviews and follow proper release cycles. The details of our contributing procedures can be found in the \nCONTRIBUTING\n document. We don\u2019t just make our code open source. Our reviews and commit history are also available for inspection, so that differential audits are possible.\n\n\nWe GPG-sign our releases with contributor keys in the strong GPG set. Currently, Dionysis Zindros signs releases. The signature signifies that the release maintainer believes the source code to be secure at the time of release, and that it was intentionally released by the team, without backdoors or intentional vulnerabilities as far as we know. These signatures are hard to fake by someone who wishes to introduce backdoors in the future. If you require strong security, do not run releases that have not been GPG-signed, or manually inspect the code. Otherwise, at least make sure your binaries and sources are at least downloaded via HTTPS.\n\n\nOur decision-making procedure is transparent too. We use 2-of-4 multisig decision-making for financial decisions. The details of our transparency in decision making can be found in our \ntransparency post\n.\n\n\nSome of our commits are GPG-signed. The GPG-signed commits signify that:\n\n\n\n\nThe code introduced in the commit is believed to be secure by the signer\n\n\nThe parent of the commit is the currently available branch to the signer\n\n\n\n\nPlease note that signing a commit, contrary to popular belief, does not indicate that all the previous commits have been checked by the committer. It only indicates that the particular commit code really is written by the person who signed the commit, and this is it.\n\n\nIt is very easy to introduce fake commits on git and GitHub, using usernames and e-mails of existing contributors. Therefore, we prefer signing individual commits instead of tagging and signing only occassionally to show a full good history. It\u2019s impractical to create a tag for every commit one creates.\n\n\n7.2 OpenBazaar and Subspace\n\n\nKey features of the Subspace protocol are (as per the readme):\n\n\n\n\nAll messages are encrypted with only the sender and recipient able to decrypt.\n\n\nThe sender\u00e2\u20ac\u2122s identity is not attached to the message at all and the only a user-defined number of bits from the recipient address is attached to the message. In other words, no meaningful data is available to passive observers.\n\n\nBy splitting the message load among servers (possibly with a financial incentive), the network can scale to handle a very large number of messages.\n\n\nBecause the network is server based, servers can implement traditional anti-spam measures without harming user experience.\n\n\nThe protocol supports lightweight queries allowing the user to make the anonymity set/bandwidth tradeoff.\n\n\nThe protocol supports market based rationing mechanisms where necessary.\n\n\n\n\nThis protocol was developed by the ever talented Chris Pacia, from \nBitcoin Authenticator\n, who significantly impressed several of us when he circulated his initial proposal\u00e2\u20ac\u00a6 but then shocked us with how quickly he implemented his proposal in just a few weeks. I think there\u00e2\u20ac\u2122s a lot to be said about this model of development: lean, fast, and with a singular focus on making something.\n\n\nCurrently, Subspace supports 3 types of communication: \n\n\n\n\nInstant messaging between two peers\n\n\nEmail (only to other Subspace addresses) \n\n\nPublic or private chat rooms\n\n\n\n\nThis is just the beginning of what can be developed on top of Subspace, but already a significant number of things can be accomplished with OpenBazaar using these initial features.\n\n\nOpenBazaar and Subspace\n\n\nThere are several potential applications for Subspace within OpenBazaar. I will go through a few of them and unpack how they might work\n\n\n1. Ricardian Contract Hosting - Subspace can be used by merchants to upload OpenBazaar Ricardian contracts for persistent and private accessibility.\n\n\nCurrently, as with most distributed hash table (DHT)-style p2p networks, content can only be retrieved from a node if it is online. The implications of this is that a merchant would need to run their OpenBazaar node 24/7 in order for potential buyers to access, view, and purchase contracts they are selling. This may not be an option for most merchants, and it is an area where Subspace is ideally suited to solve.\n\n\nA user will create a contract, submit it to Subspace federated server, who will store the contract either gratuitously or for a small fee over a negotiated period of time. The Subspace server will store the contract and associate the contract with the merchant\u00e2\u20ac\u2122s OpenBazaar GUID within the Subspace DHT. When a potential buyer wishes to download contracts created by a certain merchant, they can submit a request from any Subspace server using the merchants GUID as a search term. The server will either return the contract directly (if it stored on its HDD) or search the DHT for the Subspace server that does, and retrieve the contract for the user. Moreover, the contract can be encrypted using key that only the contract participants can decrypt (similar to Bitcoin stealth addresses). This will enable contracts to be stored in Subspace, and referenced in the DHT, without any OpenBazaar GUID associated with the contract.\n\n\n2. Multiparty communication - private communication and contract creation between market participants\n\n\nA typical exchange within OpenBazaar involves 3 parties: a merchant, buyer, and notary. Within the Ricardian contract schema, the participants can indicate their email address or other communicative ID for contract related discussion. The contract schema can be modified to include a Subspace address and private room key (where other users can query the merchant about the contract if they\u00e2\u20ac\u2122re online). Conveniently, the private room key can be identical to the contract nonce. Once the contract has been signed by all parties (i.e. merchant, buyer, and notary), these parties can chat privately using Subspace\u00e2\u20ac\u2122s email or private chat room service.\n\n\nUnder the current design, the contract creation process begins with the merchant and then ping-pongs between participating nodes. At each stage, the buyer or notary appends relevant information (e.g. ID, tracking number or digital signatures) and passes the contract to the next party until the contract is completely filled in. Alternatively, a Subspace server could act as a central repository of the Ricardian contract, with push access granted to the market participants.\n\n\n3. Market channels\n\n\nUsing Subspace's chat room feature, specialised chat rooms or \u00e2\u20ac\u02dcmarket channels\u00e2\u20ac\u2122 can be created for categories and subcategories of goods and services where merchants can advertise. While the Subspace server network is Federated, each server will have individual leasing policies for storing data. A possible outcome is for Subspace server operators to charge a subscription fee to prospective OpenBazaar merchants to advertise their goods on a market channel they host. Furthermore, OB-specific market channels may be modified to accept \u00e2\u20ac\u02dcseed\u00e2\u20ac\u2122 Ricardian contracts only (i.e. the initial JSON-formatted contract for the item) rather than plain text posts.\n\n\n\n\n4. Auction haggling\n\n\nAuctions in OpenBazaar are expected to be developed later in 2015. While contracts and auctions can be decentrally distributed and managed using the merchant\u00e2\u20ac\u2122s node (or a proxy node with high bandwidth capabilities), they can also be managed via Subspace. The advantage of using Subspace over OpenBazaar\u00e2\u20ac\u2122s DHT are relative to the user, but it would allow for casual users to upload their contract and automatically execute the bidding process without operating a node during the period of the auction. In other words, merchants can \u00e2\u20ac\u02dcfire and forget\u00e2\u20ac\u2122 contracts they put up for auction, returning to the end of the auction period to finalise the OB Ricardian contract with the winning bidder.\n\n\nBids may be uploaded, stored, and pulled from multiple Subspace servers; however, updating the contract with the latest price based on the bids will be done by a single Subspace server (who theoretically will have better bandwidth and uptime capacity compared to a user\u00e2\u20ac\u2122s node). Bids can be submitted via a public chat room modified to only accept JSON-formatted OB contracts (not plain text) to minimize the potential for spam.\n\n\nSummary\n\n\nSubspace has the potential to become a powerful tool to enable market discovery and coordination, while preserving the privacy of individuals purchasing goods and services. Further work is necessary to develop the APIs to enable most of the features listed above, as well as both Subspace and OpenBazaar clients.\n\n\n7.3 The Onion Shipping Protocol\n\n\n1. Introduction\n\n\nIn online marketplaces, personal identifiable information (PII) can be leaked by the buyer exposing their shipping address. For centralised marketplaces, any abuse of this information can be combatted through traditional legal channels. For a pseudonymous marketplace, this may not be possible.\n\n\nAn ideal shipping protocol is required to deliver a good to a buyer without the buyer exposing any PII that can be associated with their pseudonymous identity. Here we propose a multi-hop shipping network that uses encrypted delivery addresses to obfuscate the final destination of the package from the merchant and most of the shipping network.\n\n\n2. Protocol\n\n\nThe protocol conceptually similar to TOR in that encrypted shipping addresses are layered like an onion to only reveal the next delivery address to shipping nodes. \n\n\n\n\nThe buyer pulls up mobile app and enters shipping address\n\n\nApp determines distance and finds compatible nodes to route shipping through \n\n\nThe buyer pays out shipping fee to each shipping node's escrow address\n\n\nApp presents a printable label for the package that includes three QR codes containing encrypted shipping information for each hop just as Tor\n\n\nThe merchant prints label and sticks it on the package and first hop will pick up the package within time window from location of choice\n\n\nShipper A decrypts address from QR code 1 and delivers it to Shipper B within time window\n\n\nShipper A updates delivery status\n\n\nShipper B decrypts address from QR code 2 delivers it to Shipper C\n\n\nShipper B updates delivery status\n\n\nShipper C decrypts address from QR code 3 and delivers it to it's final destination\n\n\nNotifies the merchant that it has been delivered\n\n\nThe buyer confirms delivery and releases funds from multisignature escrow to all shipper nodes\n\n\n\n\n3. Weaknesses\n\n\n\n\nThe last node in the transport chain knows the shipping address (but not the merchant)\n\n\nThe item can be tampered with in transit\n\n\nHigher cost of shipping\n\n\n\n\n4. Use Cases\n\n\nWhile one may think that the primary application of this protocol is for shipping illicit goods, it is in fact to protect the privacy and security of the buyer when purchasing non-illicit items. The purchase of certain items in a non-private manner may allow a merchant to collect metadata on a user, which can be sold to third parties. Moreover, purchasing high priced certain items may make some users a target for theft (post-transaction).", 
            "title": "Articles"
        }, 
        {
            "location": "/07.-Articles/#7-articles", 
            "text": "Index:   OpenBazaar Threat Model  OpenBazaar and Subspace  The Onion Shipping Protocol", 
            "title": "7. Articles"
        }, 
        {
            "location": "/07.-Articles/#71-openbazaar-threat-model", 
            "text": "This article outlines the security model and policies of OpenBazaar. It is written for contributors with push access who are asked to review and merge pull requests, external developers who are interested in submitting pull requests, and end-users who are interested in understanding the security model of OpenBazaar. We will also be including this threat model in our project documentation, but we are sharing on our blog first to solicit feedback from our users and security experts in the field.  Every contributor with push access must read this document.  Threat model  OpenBazaar makes important assumptions about the strength of its adversaries. To understand how to properly develop code for OpenBazaar, it is crucial to understand who the adversaries of OpenBazaar can be, what resources they are able to employ, and what their goals are. Furthermore, it is important to understand what the adversaries are not capable of.  Assumed adversaries  Our adversaries can be broadly categorized as 4 different entities:   Malicious users  Malicious corporations  Malicious governments  Malicious developers   Each of these constitutes a separate entity with different resources and different goals. These are explained below.  Malicious users  A malicious user is a user who tries to break the security of OpenBazaar, usually for financial gain. We treat malicious users as game-theoretic agents who are able to invest approximately as much as they would win out of a security breach, as long as their winnings are significantly larger than their losses.  The goal of malicious users is to make money. The two primary ways of making money by breaking the security of OpenBazaar are these:   Being able to receive a product without making a proper payment  Being able to receive money without delivering a product   As these attacks are financially incentivized, there is no limit as to what capital can be invested in such attacks if it\u2019s possible to earn it back. However, for our purposes, we assume that such attackers are limited to up-front investments of $1,000,000 per year collectively. Thus, they are not able to, for example, break the bitcoin network security, or attack 1024-bit RSA keys.  These attackers are the easiest to model, as they play within the closed OpenBazaar system and can be treated game-theoretically. Generally, in our games, these agents can be assumed to be \u03b5-good, meaning they will not attempt a malicious strategy if there is no financial gain in it. We aim to fully protect users from such malicious actors.  Malicious corporations  Certain corporations may find the OpenBazaar network undesirable and may want to break its security in order to bring it down. Their financial incentive may not be part of the closed OpenBazaar system: They may be able to make profits outside of OpenBazaar by making OpenBazaar unreliable and insecure.  The goals of such agents are the following:   Bringing down the majority of OpenBazaar nodes  Disrupting the majority of connectivity of the OpenBazaar network  Breaking the trust people have on the OpenBazaar network   \u201cBreaking the trust\u201d here means creating arbitrary buyers and sellers that do not follow the expected strategy and default on their payments or shipping.  The incentive for such corporations may be that they are losing money because of competitive sales on the OpenBazaar network.  We currently assume that such corporations are able to spend similar monetary amounts as malicious users to attack the network.  However, malicious corporations cannot be modeled as \u03b5-good, as they wish to cause harm on the network through external incentives. We aim to partially protect our users from such malicious actors, through reputation systems and positive margins in our nash equilibria that can decentivize such malicious actors. Reputation systems which require proof-of-burn or similar sybil-resistant schemes help in making these attacks more costly. Webs-of-trust can fully protect careful users from such malicious actors, although great care is required from the user side.  Malicious governments  As the OpenBazaar software can be operated worldwide, malicious governments should be taken into account. Malicious governments may wish to bring the network down for censorship reasons or for legal reasons.  The goals of such agents are similar to the goals of malicious corporations. In addition, a malicious government has the following goals:   Unmask the anonymity of an OpenBazaar user  Block certain categories of products or individual products from being traded   A malicious government has similar resources as a malicious corporation.  Malicious governments can be categorized into active and passive based on their willingness to interfere with networks. A passive government is unwilling to manipulate data as a man-in-the-middle at the network level, and is only willing to be a passive eavesdropper. An active government is happy to interfere with network traffic by manipulating it.  A passive government has access to these additional resources:   They can manipulate the legal framework of their country  They can introduce new laws  They can issue arbitrary subpoenas and warrants  They can issue secret warrants and take decisions in secret courts   An active government has, in addition, access to the following resources:   They can sybil-attack the issue of identification documents such as passports  They can man-in-the-middle Internet connections within their country (up to the Tor security assumptions)  They can break Internet connectivity within their country  They can issue arbitrary PKI certificates for HTTPS and TLS protocols   Malicious governments are the hardest attack to guard against. While our goal is to be able to defend against malicious governments, we are not able to do this currently. Our decentralization efforts are oriented around the idea that basic protection from malicious governments should be possible.  We aim to provide full protection against a passive malicious government, and partial protection against active malicious governments.  On the topic of denial-of-service attacks by breaking network connectivity completely, we do not have a mechanism of defence. We rely on the fact that countries will prefer to keep Internet connectivity for the most part of their users. Mesh networks can be used to guard against such attacks, but these are beyond the scope of our threat model.  Malicious developers  The last malicious actor is a malicious developer with commit access. These developers are manipulated by one of the above actors through law (secret subpoenas) or bribery in order to achieve their end-goals. Therefore, the goals of a malicious developer are aligned with the goals of those above.  We prefer to list this malicious actor separately, as they have access to a different arsenal of attacks.  In particular, a malicious developer has access to the following resources:   They can merge arbitrary pull requests, in effect writing arbitrary code   Our primary means of defence against malicious developers are secure development practices, some of which we explain later in this document.  Security assumptions  We rely on the assumption that certain systems are secure. We make the assumption that the following constituent parts of our system are secure:   RSA, ECDSA, SHA256, AES and the rest of the cryptographic primitives used by the software  GPG  Bitcoin  Namecoin  Tor (including its assumptions on network monitoring)  The browser used by the user  The user\u2019s computer  Our implementation languages and frameworks (Python, Javascript, Angular)  The libraries we rely on which are listed here: https://github.com/OpenBazaar/OpenBazaar/blob/master/requirements.txt   Beta status  OpenBazaar is currently in beta and is  facing multiple security issues , in addition to the assumptions above. These issues can cause your transactions to be compromised, your money not to go through or be stolen, or your products not to be delivered, even by attackers with very limited resources. We estimate that an attacker could possibly compromise the system\u2019s security for less than a few thousand dollars. Please be careful when using OpenBazaar at this stage. If you\u2019re using the regular bitcoin network,  keep the amounts exchanged low  (less than a few hundred dollars). Don\u2019t sell your car on OpenBazaar yet!  For the beta version, we rely on the security of HTTPS and PKI. This is needed, as we rely on pip for securely fetching python packages, which relies on HTTPS. Therefore, an active malicious government is able to interfere with OpenBazaar. The specific assumptions are listed below.  However, we are interested in dropping this requirement for stable versions. We are still unsure of the distribution channels to achieve this.  As part of our beta status,  we also rely on a few centralized pieces of infrastructure , all of which we would like to replace with decentralized systems. These are our assumptions for the beta version:   PKI is secure. CAs are not compromised or government-controlled.  HTTPS is secure.  The operators of seed servers are not interested in performing denial-of-service attacks.  Obelisk and the official obelisk servers are secure and their owners not malicious.  The official DNSChain servers are secure and their owners not malicious.   The last two requirements are strong. A user who is concerned with these last points can lift these requirements by running their own Obelisk server or using a trusted Obelisk server, which requires maintaining a bitcoin blockchain copy, and their own DNSChain server, which requires maintaining a namecoin blockchain copy. We have plans to use SVP systems as a replacement for these.  We may introduce additional points of centralization for future beta versions in order to create a working product, which we plan to lift later.  As part of our Beta status, we do not currently employ any anonymity-preserving mechanisms. All transactions are completely trackable. Therefore, malicious governments with the goal of uncovering your identity will succeed trivially.  Development infrastructure  We also rely on certain pieces of centralized infrastructure for development. Here are our assumptions about services we use for development and we assume are secure and with no malicious operators:   GitHub  Slack  Gmail   We also rely on OTR and GPG for secure development-related communications.  Development process  In order to guard against actors such as malicious developers, we are publishing all of the source code of OpenBazaar as open source under the  MIT license . We encourage security experts to audit our code for security vulnerabilities. Don\u2019t take our word on the security of OpenBazaar; inspect the code yourself.  Don\u2019t trust the OpenBazaar developers . While we\u2019re doing our best to provide secure software, the reason it\u2019s open source is so that it can be reviewed and audited.  Our development process is transparent and security-oriented. We follow certain contributing guidelines which require code reviews and follow proper release cycles. The details of our contributing procedures can be found in the  CONTRIBUTING  document. We don\u2019t just make our code open source. Our reviews and commit history are also available for inspection, so that differential audits are possible.  We GPG-sign our releases with contributor keys in the strong GPG set. Currently, Dionysis Zindros signs releases. The signature signifies that the release maintainer believes the source code to be secure at the time of release, and that it was intentionally released by the team, without backdoors or intentional vulnerabilities as far as we know. These signatures are hard to fake by someone who wishes to introduce backdoors in the future. If you require strong security, do not run releases that have not been GPG-signed, or manually inspect the code. Otherwise, at least make sure your binaries and sources are at least downloaded via HTTPS.  Our decision-making procedure is transparent too. We use 2-of-4 multisig decision-making for financial decisions. The details of our transparency in decision making can be found in our  transparency post .  Some of our commits are GPG-signed. The GPG-signed commits signify that:   The code introduced in the commit is believed to be secure by the signer  The parent of the commit is the currently available branch to the signer   Please note that signing a commit, contrary to popular belief, does not indicate that all the previous commits have been checked by the committer. It only indicates that the particular commit code really is written by the person who signed the commit, and this is it.  It is very easy to introduce fake commits on git and GitHub, using usernames and e-mails of existing contributors. Therefore, we prefer signing individual commits instead of tagging and signing only occassionally to show a full good history. It\u2019s impractical to create a tag for every commit one creates.", 
            "title": "7.1 OpenBazaar Threat Model"
        }, 
        {
            "location": "/07.-Articles/#72-openbazaar-and-subspace", 
            "text": "Key features of the Subspace protocol are (as per the readme):   All messages are encrypted with only the sender and recipient able to decrypt.  The sender\u00e2\u20ac\u2122s identity is not attached to the message at all and the only a user-defined number of bits from the recipient address is attached to the message. In other words, no meaningful data is available to passive observers.  By splitting the message load among servers (possibly with a financial incentive), the network can scale to handle a very large number of messages.  Because the network is server based, servers can implement traditional anti-spam measures without harming user experience.  The protocol supports lightweight queries allowing the user to make the anonymity set/bandwidth tradeoff.  The protocol supports market based rationing mechanisms where necessary.   This protocol was developed by the ever talented Chris Pacia, from  Bitcoin Authenticator , who significantly impressed several of us when he circulated his initial proposal\u00e2\u20ac\u00a6 but then shocked us with how quickly he implemented his proposal in just a few weeks. I think there\u00e2\u20ac\u2122s a lot to be said about this model of development: lean, fast, and with a singular focus on making something.  Currently, Subspace supports 3 types of communication:    Instant messaging between two peers  Email (only to other Subspace addresses)   Public or private chat rooms   This is just the beginning of what can be developed on top of Subspace, but already a significant number of things can be accomplished with OpenBazaar using these initial features.  OpenBazaar and Subspace  There are several potential applications for Subspace within OpenBazaar. I will go through a few of them and unpack how they might work  1. Ricardian Contract Hosting - Subspace can be used by merchants to upload OpenBazaar Ricardian contracts for persistent and private accessibility.  Currently, as with most distributed hash table (DHT)-style p2p networks, content can only be retrieved from a node if it is online. The implications of this is that a merchant would need to run their OpenBazaar node 24/7 in order for potential buyers to access, view, and purchase contracts they are selling. This may not be an option for most merchants, and it is an area where Subspace is ideally suited to solve.  A user will create a contract, submit it to Subspace federated server, who will store the contract either gratuitously or for a small fee over a negotiated period of time. The Subspace server will store the contract and associate the contract with the merchant\u00e2\u20ac\u2122s OpenBazaar GUID within the Subspace DHT. When a potential buyer wishes to download contracts created by a certain merchant, they can submit a request from any Subspace server using the merchants GUID as a search term. The server will either return the contract directly (if it stored on its HDD) or search the DHT for the Subspace server that does, and retrieve the contract for the user. Moreover, the contract can be encrypted using key that only the contract participants can decrypt (similar to Bitcoin stealth addresses). This will enable contracts to be stored in Subspace, and referenced in the DHT, without any OpenBazaar GUID associated with the contract.  2. Multiparty communication - private communication and contract creation between market participants  A typical exchange within OpenBazaar involves 3 parties: a merchant, buyer, and notary. Within the Ricardian contract schema, the participants can indicate their email address or other communicative ID for contract related discussion. The contract schema can be modified to include a Subspace address and private room key (where other users can query the merchant about the contract if they\u00e2\u20ac\u2122re online). Conveniently, the private room key can be identical to the contract nonce. Once the contract has been signed by all parties (i.e. merchant, buyer, and notary), these parties can chat privately using Subspace\u00e2\u20ac\u2122s email or private chat room service.  Under the current design, the contract creation process begins with the merchant and then ping-pongs between participating nodes. At each stage, the buyer or notary appends relevant information (e.g. ID, tracking number or digital signatures) and passes the contract to the next party until the contract is completely filled in. Alternatively, a Subspace server could act as a central repository of the Ricardian contract, with push access granted to the market participants.  3. Market channels  Using Subspace's chat room feature, specialised chat rooms or \u00e2\u20ac\u02dcmarket channels\u00e2\u20ac\u2122 can be created for categories and subcategories of goods and services where merchants can advertise. While the Subspace server network is Federated, each server will have individual leasing policies for storing data. A possible outcome is for Subspace server operators to charge a subscription fee to prospective OpenBazaar merchants to advertise their goods on a market channel they host. Furthermore, OB-specific market channels may be modified to accept \u00e2\u20ac\u02dcseed\u00e2\u20ac\u2122 Ricardian contracts only (i.e. the initial JSON-formatted contract for the item) rather than plain text posts.   4. Auction haggling  Auctions in OpenBazaar are expected to be developed later in 2015. While contracts and auctions can be decentrally distributed and managed using the merchant\u00e2\u20ac\u2122s node (or a proxy node with high bandwidth capabilities), they can also be managed via Subspace. The advantage of using Subspace over OpenBazaar\u00e2\u20ac\u2122s DHT are relative to the user, but it would allow for casual users to upload their contract and automatically execute the bidding process without operating a node during the period of the auction. In other words, merchants can \u00e2\u20ac\u02dcfire and forget\u00e2\u20ac\u2122 contracts they put up for auction, returning to the end of the auction period to finalise the OB Ricardian contract with the winning bidder.  Bids may be uploaded, stored, and pulled from multiple Subspace servers; however, updating the contract with the latest price based on the bids will be done by a single Subspace server (who theoretically will have better bandwidth and uptime capacity compared to a user\u00e2\u20ac\u2122s node). Bids can be submitted via a public chat room modified to only accept JSON-formatted OB contracts (not plain text) to minimize the potential for spam.  Summary  Subspace has the potential to become a powerful tool to enable market discovery and coordination, while preserving the privacy of individuals purchasing goods and services. Further work is necessary to develop the APIs to enable most of the features listed above, as well as both Subspace and OpenBazaar clients.", 
            "title": "7.2 OpenBazaar and Subspace"
        }, 
        {
            "location": "/07.-Articles/#73-the-onion-shipping-protocol", 
            "text": "1. Introduction  In online marketplaces, personal identifiable information (PII) can be leaked by the buyer exposing their shipping address. For centralised marketplaces, any abuse of this information can be combatted through traditional legal channels. For a pseudonymous marketplace, this may not be possible.  An ideal shipping protocol is required to deliver a good to a buyer without the buyer exposing any PII that can be associated with their pseudonymous identity. Here we propose a multi-hop shipping network that uses encrypted delivery addresses to obfuscate the final destination of the package from the merchant and most of the shipping network.  2. Protocol  The protocol conceptually similar to TOR in that encrypted shipping addresses are layered like an onion to only reveal the next delivery address to shipping nodes.    The buyer pulls up mobile app and enters shipping address  App determines distance and finds compatible nodes to route shipping through   The buyer pays out shipping fee to each shipping node's escrow address  App presents a printable label for the package that includes three QR codes containing encrypted shipping information for each hop just as Tor  The merchant prints label and sticks it on the package and first hop will pick up the package within time window from location of choice  Shipper A decrypts address from QR code 1 and delivers it to Shipper B within time window  Shipper A updates delivery status  Shipper B decrypts address from QR code 2 delivers it to Shipper C  Shipper B updates delivery status  Shipper C decrypts address from QR code 3 and delivers it to it's final destination  Notifies the merchant that it has been delivered  The buyer confirms delivery and releases funds from multisignature escrow to all shipper nodes   3. Weaknesses   The last node in the transport chain knows the shipping address (but not the merchant)  The item can be tampered with in transit  Higher cost of shipping   4. Use Cases  While one may think that the primary application of this protocol is for shipping illicit goods, it is in fact to protect the privacy and security of the buyer when purchasing non-illicit items. The purchase of certain items in a non-private manner may allow a merchant to collect metadata on a user, which can be sold to third parties. Moreover, purchasing high priced certain items may make some users a target for theft (post-transaction).", 
            "title": "7.3 The Onion Shipping Protocol"
        }, 
        {
            "location": "/08.-Reference-Documentation/", 
            "text": "8. Reference Documentation\n\n\n8.1 Bitcoin\n\n\n\n\nBitcoin: A Peer-to-Peer Electronic Cash System\n - Satoshi Nakamoto\n\n\nBitcoin.org\n\n\nBitcoin Developer Documentation\n\n\nBitcoin Wiki\n\n\nMultisignature Transactions\n\n\nMultisignature Tools\n\n\n\n\n8.2 Peer-to-Peer Networking\n\n\n\n\nKademlia distributed hash table\n\n\nStrategies for defeating NAD configuration issues\n\n\n\n\n8.3 Ricardian Contracts\n\n\n\n\nThe Ricardian Contract\n - Ian Grigg\n\n\nTriple-entry accounting\n - Ian Grigg\n\n\n\n\n8.4 Security Layer\n\n\n\n\nTOR\n\n\nI2P Wiki\n\n\n\n\n8.5 Trust and Reputation\n\n\n\n\nIntroduction\n\n\n\"Online Social Networks and Applications: a Measurement Perspective\" - Ben Zhao (YouTube)\n\n\nBitcoin OTC Rating System\n\n\nDistributed Social Network + Reputation System bitcointalk thread\n\n\n\n\n\n\nAcademic Papers:\n\n\nA Robust Reputation System for P2P and Mobile Ad-hoc Networks (PDF)\n\n\nAnonymous Webs of Trust (PDF)\n\n\nEigenTrust++\n\n\n\n\n\n\nWikipedia Links:\n\n\nReputation System\n\n\nWeb of Trust\n Public or anonymous?\n\n\nTrust Metric\n\n\nOnion Routing\n\n\nEigenTrust\n\n\n\n\n\n\n\n\n8.6 Related Projects\n\n\n\n\nPasscards\n\n\nOnename\n\n\nMine\n\n\nCommonAccord\n\n\nSubspace", 
            "title": "References"
        }, 
        {
            "location": "/08.-Reference-Documentation/#8-reference-documentation", 
            "text": "", 
            "title": "8. Reference Documentation"
        }, 
        {
            "location": "/08.-Reference-Documentation/#81-bitcoin", 
            "text": "Bitcoin: A Peer-to-Peer Electronic Cash System  - Satoshi Nakamoto  Bitcoin.org  Bitcoin Developer Documentation  Bitcoin Wiki  Multisignature Transactions  Multisignature Tools", 
            "title": "8.1 Bitcoin"
        }, 
        {
            "location": "/08.-Reference-Documentation/#82-peer-to-peer-networking", 
            "text": "Kademlia distributed hash table  Strategies for defeating NAD configuration issues", 
            "title": "8.2 Peer-to-Peer Networking"
        }, 
        {
            "location": "/08.-Reference-Documentation/#83-ricardian-contracts", 
            "text": "The Ricardian Contract  - Ian Grigg  Triple-entry accounting  - Ian Grigg", 
            "title": "8.3 Ricardian Contracts"
        }, 
        {
            "location": "/08.-Reference-Documentation/#84-security-layer", 
            "text": "TOR  I2P Wiki", 
            "title": "8.4 Security Layer"
        }, 
        {
            "location": "/08.-Reference-Documentation/#85-trust-and-reputation", 
            "text": "Introduction  \"Online Social Networks and Applications: a Measurement Perspective\" - Ben Zhao (YouTube)  Bitcoin OTC Rating System  Distributed Social Network + Reputation System bitcointalk thread    Academic Papers:  A Robust Reputation System for P2P and Mobile Ad-hoc Networks (PDF)  Anonymous Webs of Trust (PDF)  EigenTrust++    Wikipedia Links:  Reputation System  Web of Trust  Public or anonymous?  Trust Metric  Onion Routing  EigenTrust", 
            "title": "8.5 Trust and Reputation"
        }, 
        {
            "location": "/08.-Reference-Documentation/#86-related-projects", 
            "text": "Passcards  Onename  Mine  CommonAccord  Subspace", 
            "title": "8.6 Related Projects"
        }, 
        {
            "location": "/09.-Frequently-Asked-Questions/", 
            "text": "9. Frequently Asked Questions\n\n\nGeneral\n\n\nDoes \nOpenBazaar\n cost anything?\n\n\nNo... and it never will.\n\n\nDoes it cost anything to list items on the network?\n\n\nNo... and it never will.\n\n\nDo I need to be online to sell items?\n\n\nAt this stage, yes. When you create a contract for an item, you need to keep your node online for others to be able to download your contracts and place order.\n\n\nIn the future, contracts will be embedded into the distributed hash table (DHT) and shared by nearby nodes on the network over a period of a few days. This will create a temporary cache of contracts that can be accessed without the merchant needing to be online. In addition, orders will be encrypted and embedded into the DHT and shared by nodes so that the merchant can access orders even if the buyer isn't online.\n\n\nCan I get a notification when my item has received an order, or when my order has been processed?\n\n\nNo, but this is an important feature we will be working on in the future.\n\n\nIs there a mobile application for \nOpenBazaar\n?\n\n\nNot yet.\n\n\nWill I need to run a node to browse or buy things from \nOpenBazaar\n?\n\n\nThere are some emerging third party services that will act as a search engine for browsing listings on \nOpenBazaar\n, such as \nBazaarBay\n.\n\n\nYou will need to run a node to buy items from users on \nOpenBazaar\n at this stage. You can use services such as \nProvistor\n that faciliate running a node.\n\n\n\n\nPayments without Bitcoin\n\n\nCan I buy and sell things with altcoins instead of Bitcoin?\n\n\nYes, but using a third party exchange such as \nShapeshift\n. Altcoin support is not built into the client.\n\n\nCan I buy and sell things with fiat currency?\n\n\nYes, but using a third party exchange like \nCoinbase\n, \nCircle\n, \nCoinJar\n etc.\n\n\nWhy only Bitcoin?\n\n\nWe believe in Bitcoin. While there may be several other crypto-commodities created with interesting properties, only one will remain the 'backend' medium-of-exchange: Bitcoin.\n\n\n\n\nIllicit Items\n\n\nIs this a new Silk Road?\n\n\nAbsolutely not. The Silk Road was a centralized platform, controlled directly by a small group who ran it for profit. The marketplace was built specifically for a small subset of trade: illicit goods. \n\n\nOpenBazaar\n is entirely different. It\u2019s a decentralized platform, not controlled by anyone, and not run for profit. It\u2019s not being built for any subset of trade, but gives anyone in the world the power to buy and sell any type of goods and services with anyone else, using Bitcoin.\n\n\nOpenBazaar\n isn\u2019t Silk Road - version 2, it\u2019s E-Commerce - version 2.\n\n\nHow will you keep illicit goods off of \nOpenBazaar\n?\n\n\nOpenBazaar\n is a protocol for trading goods online, and a decentralized network for people to communicate with each other. Since the network isn\u2019t centrally controlled (by us or anyone), we cannot directly prevent people from selling illicit goods.\n\n\nThe platform uses a reputation and rating system, as well as allowing reputable third parties help manage trade. We expect these checks and balances will strongly encourage legitimate trade on the network.\n\n\nSellers on the \nOpenBazaar\n network host their own products and are therefore directly responsible for complying with local laws (and their own conscience) when listing items or services. Users engaged in illicit activity cannot hide behind a third party service.\n\n\nThe world doesn\u2019t have a standard protocol for trading goods and services online, nor does it have a network to share information about those goods and services. \nOpenBazaar\n finally creates a protocol and network that is free and open for all. As such, we expect that the use of \nOpenBazaar\n will largely reflect how society trades at large - almost entirely legitimate, positive trade with a small portion of people using it for illicit activity. Those that attempt to sell illicit material on \nOpenBazaar\n do so at significant risk to themselves.\n\n\nWhat about \nOpenBazaar\n\u2019s beginnings as Dark Market?\n\n\nDark Market was a winning entry in a Toronto hackathon in April 2014. Following the release of the source code on Github, the developers of Dark Market decided to discontinue the project. A few days later, Brian Hoffman forked the project to continue development. Brian renamed the project to \nOpenBazaar\n, which reflected a shift in vision to create a free and open marketplace for all goods and services.\n\n\nSince April 2014, we\u2019ve seen \nOpenBazaar\n change substantially from the original Dark Market project. Only a small amount of the original code remains, and the majority of the features have been built by the \nOpenBazaar\n community, including the use of Ricardian Contracts, HD signing keys, and kademlia DHT.", 
            "title": "FAQ"
        }, 
        {
            "location": "/09.-Frequently-Asked-Questions/#9-frequently-asked-questions", 
            "text": "", 
            "title": "9. Frequently Asked Questions"
        }, 
        {
            "location": "/09.-Frequently-Asked-Questions/#general", 
            "text": "Does  OpenBazaar  cost anything?  No... and it never will.  Does it cost anything to list items on the network?  No... and it never will.  Do I need to be online to sell items?  At this stage, yes. When you create a contract for an item, you need to keep your node online for others to be able to download your contracts and place order.  In the future, contracts will be embedded into the distributed hash table (DHT) and shared by nearby nodes on the network over a period of a few days. This will create a temporary cache of contracts that can be accessed without the merchant needing to be online. In addition, orders will be encrypted and embedded into the DHT and shared by nodes so that the merchant can access orders even if the buyer isn't online.  Can I get a notification when my item has received an order, or when my order has been processed?  No, but this is an important feature we will be working on in the future.  Is there a mobile application for  OpenBazaar ?  Not yet.  Will I need to run a node to browse or buy things from  OpenBazaar ?  There are some emerging third party services that will act as a search engine for browsing listings on  OpenBazaar , such as  BazaarBay .  You will need to run a node to buy items from users on  OpenBazaar  at this stage. You can use services such as  Provistor  that faciliate running a node.", 
            "title": "General"
        }, 
        {
            "location": "/09.-Frequently-Asked-Questions/#payments-without-bitcoin", 
            "text": "Can I buy and sell things with altcoins instead of Bitcoin?  Yes, but using a third party exchange such as  Shapeshift . Altcoin support is not built into the client.  Can I buy and sell things with fiat currency?  Yes, but using a third party exchange like  Coinbase ,  Circle ,  CoinJar  etc.  Why only Bitcoin?  We believe in Bitcoin. While there may be several other crypto-commodities created with interesting properties, only one will remain the 'backend' medium-of-exchange: Bitcoin.", 
            "title": "Payments without Bitcoin"
        }, 
        {
            "location": "/09.-Frequently-Asked-Questions/#illicit-items", 
            "text": "Is this a new Silk Road?  Absolutely not. The Silk Road was a centralized platform, controlled directly by a small group who ran it for profit. The marketplace was built specifically for a small subset of trade: illicit goods.   OpenBazaar  is entirely different. It\u2019s a decentralized platform, not controlled by anyone, and not run for profit. It\u2019s not being built for any subset of trade, but gives anyone in the world the power to buy and sell any type of goods and services with anyone else, using Bitcoin.  OpenBazaar  isn\u2019t Silk Road - version 2, it\u2019s E-Commerce - version 2.  How will you keep illicit goods off of  OpenBazaar ?  OpenBazaar  is a protocol for trading goods online, and a decentralized network for people to communicate with each other. Since the network isn\u2019t centrally controlled (by us or anyone), we cannot directly prevent people from selling illicit goods.  The platform uses a reputation and rating system, as well as allowing reputable third parties help manage trade. We expect these checks and balances will strongly encourage legitimate trade on the network.  Sellers on the  OpenBazaar  network host their own products and are therefore directly responsible for complying with local laws (and their own conscience) when listing items or services. Users engaged in illicit activity cannot hide behind a third party service.  The world doesn\u2019t have a standard protocol for trading goods and services online, nor does it have a network to share information about those goods and services.  OpenBazaar  finally creates a protocol and network that is free and open for all. As such, we expect that the use of  OpenBazaar  will largely reflect how society trades at large - almost entirely legitimate, positive trade with a small portion of people using it for illicit activity. Those that attempt to sell illicit material on  OpenBazaar  do so at significant risk to themselves.  What about  OpenBazaar \u2019s beginnings as Dark Market?  Dark Market was a winning entry in a Toronto hackathon in April 2014. Following the release of the source code on Github, the developers of Dark Market decided to discontinue the project. A few days later, Brian Hoffman forked the project to continue development. Brian renamed the project to  OpenBazaar , which reflected a shift in vision to create a free and open marketplace for all goods and services.  Since April 2014, we\u2019ve seen  OpenBazaar  change substantially from the original Dark Market project. Only a small amount of the original code remains, and the majority of the features have been built by the  OpenBazaar  community, including the use of Ricardian Contracts, HD signing keys, and kademlia DHT.", 
            "title": "Illicit Items"
        }
    ]
}